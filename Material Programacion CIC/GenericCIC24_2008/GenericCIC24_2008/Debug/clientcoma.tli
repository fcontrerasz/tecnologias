// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.42 (4ba2eeff).
//
// c:\documents and settings\rfrez\desktop\generic\debug\clientcoma.tli
//
// Wrapper implementations for Win32 type library C:\Program Files\Interactive Intelligence\ClientCOMA.dll
// compiler-generated file created 09/29/08 at 12:06:36 - DO NOT EDIT!


//
// interface IEICQueueWatcher wrapper method implementations
//

#pragma implementation_key(1)
inline HRESULT EICClientCOMLib::IEICQueueWatcher::ObjectAdded ( long p_Type, long p_Id ) {
    HRESULT _hr = raw_ObjectAdded(p_Type, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2)
inline HRESULT EICClientCOMLib::IEICQueueWatcher::ObjectChanged ( long p_Type, long p_Id ) {
    HRESULT _hr = raw_ObjectChanged(p_Type, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3)
inline HRESULT EICClientCOMLib::IEICQueueWatcher::ObjectRemoved ( long p_Type, long p_Id ) {
    HRESULT _hr = raw_ObjectRemoved(p_Type, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueue wrapper method implementations
//

#pragma implementation_key(4)
inline HRESULT EICClientCOMLib::IEICQueue::Connect ( long p_Type, _bstr_t p_Name ) {
    HRESULT _hr = raw_Connect(p_Type, p_Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5)
inline HRESULT EICClientCOMLib::IEICQueue::SetChangeHandler ( struct IEICQueueWatcher * p_Handler ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6)
inline VARIANT_BOOL EICClientCOMLib::IEICQueue::GetActiveMonitor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ActiveMonitor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7)
inline void EICClientCOMLib::IEICQueue::PutActiveMonitor ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ActiveMonitor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(8)
inline _variant_t EICClientCOMLib::IEICQueue::GetObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(9)
inline long EICClientCOMLib::IEICQueue::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline _bstr_t EICClientCOMLib::IEICQueue::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(11)
inline HRESULT EICClientCOMLib::IEICQueue::StartObjectsList ( ) {
    HRESULT _hr = raw_StartObjectsList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(12)
inline HRESULT EICClientCOMLib::IEICQueue::GetNextObject ( long * p_Type, long * p_Id ) {
    HRESULT _hr = raw_GetNextObject(p_Type, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueObject2 wrapper method implementations
//

#pragma implementation_key(13)
inline long EICClientCOMLib::IEICQueueObject2::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(14)
inline void EICClientCOMLib::IEICQueueObject2::PutId ( long pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(15)
inline long EICClientCOMLib::IEICQueueObject2::GetState ( ) {
    long _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(16)
inline _bstr_t EICClientCOMLib::IEICQueueObject2::GetStateString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StateString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(17)
inline void EICClientCOMLib::IEICQueueObject2::PutStateString ( _bstr_t pVal ) {
    HRESULT _hr = put_StateString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(18)
inline _bstr_t EICClientCOMLib::IEICQueueObject2::GetLocalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(19)
inline _bstr_t EICClientCOMLib::IEICQueueObject2::GetLocalLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(20)
inline _bstr_t EICClientCOMLib::IEICQueueObject2::GetLocalId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(21)
inline _bstr_t EICClientCOMLib::IEICQueueObject2::GetRemoteName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(22)
inline void EICClientCOMLib::IEICQueueObject2::PutRemoteName ( _bstr_t pVal ) {
    HRESULT _hr = put_RemoteName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(23)
inline _bstr_t EICClientCOMLib::IEICQueueObject2::GetRemoteLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(24)
inline _bstr_t EICClientCOMLib::IEICQueueObject2::GetRemoteId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(25)
inline DATE EICClientCOMLib::IEICQueueObject2::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(26)
inline short EICClientCOMLib::IEICQueueObject2::GetDirection ( ) {
    short _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(27)
inline VARIANT_BOOL EICClientCOMLib::IEICQueueObject2::GetisHeld ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isHeld(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(28)
inline VARIANT_BOOL EICClientCOMLib::IEICQueueObject2::GetisRecording ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isRecording(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(29)
inline VARIANT_BOOL EICClientCOMLib::IEICQueueObject2::GetisPaused ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPaused(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline VARIANT_BOOL EICClientCOMLib::IEICQueueObject2::GetisMuted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isMuted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(31)
inline VARIANT_BOOL EICClientCOMLib::IEICQueueObject2::GetisPrivate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPrivate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(32)
inline VARIANT_BOOL EICClientCOMLib::IEICQueueObject2::GetisMonitored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isMonitored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(33)
inline VARIANT_BOOL EICClientCOMLib::IEICQueueObject2::GetisParty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isParty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(34)
inline long EICClientCOMLib::IEICQueueObject2::GetConferenceId ( ) {
    long _result = 0;
    HRESULT _hr = get_ConferenceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(35)
inline HRESULT EICClientCOMLib::IEICQueueObject2::Pickup ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Pickup(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(36)
inline HRESULT EICClientCOMLib::IEICQueueObject2::Disconnect ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Disconnect(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(37)
inline HRESULT EICClientCOMLib::IEICQueueObject2::Listen ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Listen(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(38)
inline HRESULT EICClientCOMLib::IEICQueueObject2::Record ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Record(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(39)
inline HRESULT EICClientCOMLib::IEICQueueObject2::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(40)
inline HRESULT EICClientCOMLib::IEICQueueObject2::Mute ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Mute(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(41)
inline HRESULT EICClientCOMLib::IEICQueueObject2::Hold ( _bstr_t p_ToUserQueue, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Hold(p_ToUserQueue, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(42)
inline HRESULT EICClientCOMLib::IEICQueueObject2::Private ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Private(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(43)
inline HRESULT EICClientCOMLib::IEICQueueObject2::SendToVoiceMail ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_SendToVoiceMail(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(44)
inline HRESULT EICClientCOMLib::IEICQueueObject2::BlindTransfer ( _bstr_t p_ToNumber, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_BlindTransfer(p_ToNumber, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(45)
inline HRESULT EICClientCOMLib::IEICQueueObject2::ConsultTransfer ( long p_WithCall, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_ConsultTransfer(p_WithCall, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(46)
inline HRESULT EICClientCOMLib::IEICQueueObject2::GetCreationTime ( short * hour, short * minute, short * second ) {
    HRESULT _hr = raw_GetCreationTime(hour, minute, second);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(47)
inline HRESULT EICClientCOMLib::IEICQueueObject2::GetNamedAttribute ( _bstr_t p_Name, BSTR * p_Value ) {
    HRESULT _hr = raw_GetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(48)
inline HRESULT EICClientCOMLib::IEICQueueObject2::SetNamedAttribute ( _bstr_t p_Name, _bstr_t p_Value ) {
    HRESULT _hr = raw_SetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(49)
inline HRESULT EICClientCOMLib::IEICQueueObject2::GetNameAttributeList ( const _variant_t & p_Names, VARIANT * p_Values ) {
    HRESULT _hr = raw_GetNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(50)
inline HRESULT EICClientCOMLib::IEICQueueObject2::SetNameAttributeList ( const _variant_t & p_Names, const _variant_t & p_Values ) {
    HRESULT _hr = raw_SetNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(51)
inline HRESULT EICClientCOMLib::IEICQueueObject2::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(52)
inline HRESULT EICClientCOMLib::IEICQueueObject2::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(53)
inline _bstr_t EICClientCOMLib::IEICQueueObject2::GetUserQueueName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserQueueName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(54)
inline _bstr_t EICClientCOMLib::IEICQueueObject2::GetStationName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StationName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(55)
inline _bstr_t EICClientCOMLib::IEICQueueObject2::GetLineName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(56)
inline _variant_t EICClientCOMLib::IEICQueueObject2::GetQueueList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_QueueList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(57)
inline HRESULT EICClientCOMLib::IEICQueueObject2::PickupForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_PickupForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(58)
inline HRESULT EICClientCOMLib::IEICQueueObject2::DisconnectForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_DisconnectForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(59)
inline HRESULT EICClientCOMLib::IEICQueueObject2::ListenForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_ListenForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(60)
inline HRESULT EICClientCOMLib::IEICQueueObject2::RecordForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_RecordForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(61)
inline HRESULT EICClientCOMLib::IEICQueueObject2::MuteForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_MuteForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(62)
inline HRESULT EICClientCOMLib::IEICQueueObject2::HoldForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_ToUserQueue, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_HoldForUser(p_User, p_Station, p_ToUserQueue, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(63)
inline HRESULT EICClientCOMLib::IEICQueueObject2::PrivateForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_PrivateForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(64)
inline HRESULT EICClientCOMLib::IEICQueueObject2::SendToVoiceMailForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_SendToVoiceMailForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(65)
inline HRESULT EICClientCOMLib::IEICQueueObject2::BlindTransferForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_ToNumber, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_BlindTransferForUser(p_User, p_Station, p_ToNumber, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(66)
inline HRESULT EICClientCOMLib::IEICQueueObject2::ConsultTransferForUser ( _bstr_t p_User, _bstr_t p_Station, long p_WithCall, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_ConsultTransferForUser(p_User, p_Station, p_WithCall, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(67)
inline HRESULT EICClientCOMLib::IEICQueueObject2::PauseForUser ( _bstr_t p_User, _bstr_t p_Station ) {
    HRESULT _hr = raw_PauseForUser(p_User, p_Station);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(68)
inline long EICClientCOMLib::IEICQueueObject2::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(69)
inline _bstr_t EICClientCOMLib::IEICQueueObject2::GetNamedAttributeS ( _bstr_t p_Name ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetNamedAttributeS(p_Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(70)
inline _variant_t EICClientCOMLib::IEICQueueObject2::GetNameAttributeListS ( const _variant_t & p_Names ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetNameAttributeListS(p_Names, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(71)
inline _variant_t EICClientCOMLib::IEICQueueObject2::GetCreationTimeS ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCreationTimeS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(72)
inline long EICClientCOMLib::IEICQueueObject2::GetValidActions ( _bstr_t p_User, _bstr_t p_Station ) {
    long _result = 0;
    HRESULT _hr = raw_GetValidActions(p_User, p_Station, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICQueue2 wrapper method implementations
//

#pragma implementation_key(73)
inline _variant_t EICClientCOMLib::IEICQueue2::GetQueueObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_QueueObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(74)
inline EICClientCOMLib::IEICQueueObject2Ptr EICClientCOMLib::IEICQueue2::GetNextQueueObject ( ) {
    struct IEICQueueObject2 * _result = 0;
    HRESULT _hr = raw_GetNextQueueObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueObject2Ptr(_result, false);
}

#pragma implementation_key(75)
inline HRESULT EICClientCOMLib::IEICQueue2::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(76)
inline HRESULT EICClientCOMLib::IEICQueue2::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(77)
inline HRESULT EICClientCOMLib::IEICQueue2::ConnectClient ( _bstr_t p_Name, _bstr_t p_Desc ) {
    HRESULT _hr = raw_ConnectClient(p_Name, p_Desc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(78)
inline HRESULT EICClientCOMLib::IEICQueue2::DisconnectClient ( _bstr_t p_Name ) {
    HRESULT _hr = raw_DisconnectClient(p_Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(79)
inline long EICClientCOMLib::IEICQueue2::GetTotalCallsToday ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalCallsToday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(80)
inline long EICClientCOMLib::IEICQueue2::GetTotalActiveTimeToday ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalActiveTimeToday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(81)
inline long EICClientCOMLib::IEICQueue2::GetLongestCallToday ( ) {
    long _result = 0;
    HRESULT _hr = get_LongestCallToday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(82)
inline long EICClientCOMLib::IEICQueue2::GetAvgCallDurationToday ( ) {
    long _result = 0;
    HRESULT _hr = get_AvgCallDurationToday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(83)
inline long EICClientCOMLib::IEICQueue2::GetAbandonedCallsToday ( ) {
    long _result = 0;
    HRESULT _hr = get_AbandonedCallsToday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICQueue2Watcher wrapper method implementations
//

#pragma implementation_key(84)
inline HRESULT EICClientCOMLib::IEICQueue2Watcher::ObjectAdded ( struct IEICQueue2 * p_Queue, struct IEICQueueObject2 * p_Object ) {
    HRESULT _hr = raw_ObjectAdded(p_Queue, p_Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(85)
inline HRESULT EICClientCOMLib::IEICQueue2Watcher::ObjectChanged ( struct IEICQueue2 * p_Queue, struct IEICQueueObject2 * p_Object ) {
    HRESULT _hr = raw_ObjectChanged(p_Queue, p_Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(86)
inline HRESULT EICClientCOMLib::IEICQueue2Watcher::ObjectRemoved ( struct IEICQueue2 * p_Queue, long p_Id ) {
    HRESULT _hr = raw_ObjectRemoved(p_Queue, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(87)
inline HRESULT EICClientCOMLib::IEICQueue2Watcher::StatisticsUpdated ( struct IEICQueue2 * p_Queue ) {
    HRESULT _hr = raw_StatisticsUpdated(p_Queue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueObject2Watcher wrapper method implementations
//

#pragma implementation_key(88)
inline HRESULT EICClientCOMLib::IEICQueueObject2Watcher::StateChanged ( struct IEICQueueObject2 * p_Object, long p_NewState, _bstr_t p_StateString ) {
    HRESULT _hr = raw_StateChanged(p_Object, p_NewState, p_StateString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(89)
inline HRESULT EICClientCOMLib::IEICQueueObject2Watcher::SubObjectChanged ( struct IEICQueueObject2 * p_Object, struct IEICQueueObject2 * p_SubObject ) {
    HRESULT _hr = raw_SubObjectChanged(p_Object, p_SubObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(90)
inline HRESULT EICClientCOMLib::IEICQueueObject2Watcher::ObjectSpecificError ( struct IEICQueueObject2 * p_Object, long p_Error ) {
    HRESULT _hr = raw_ObjectSpecificError(p_Object, p_Error);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(91)
inline HRESULT EICClientCOMLib::IEICQueueObject2Watcher::ObjectDestroyed ( struct IEICQueueObject2 * p_Object ) {
    HRESULT _hr = raw_ObjectDestroyed(p_Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICChatObject2 wrapper method implementations
//

#pragma implementation_key(92)
inline HRESULT EICClientCOMLib::IEICChatObject2::SendString ( _bstr_t p_String ) {
    HRESULT _hr = raw_SendString(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(93)
inline HRESULT EICClientCOMLib::IEICChatObject2::SendURL ( _bstr_t p_URL ) {
    HRESULT _hr = raw_SendURL(p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(94)
inline HRESULT EICClientCOMLib::IEICChatObject2::SendFile ( _bstr_t p_FileName, _bstr_t p_FileData ) {
    HRESULT _hr = raw_SendFile(p_FileName, p_FileData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(95)
inline HRESULT EICClientCOMLib::IEICChatObject2::RequestSession ( _bstr_t p_RequestingUserName, _bstr_t p_RequestingEmail, _bstr_t p_RequestingPhone, _bstr_t p_RequestingLocation, _bstr_t p_DestinationQueueName, _bstr_t p_SubjectOfChat ) {
    HRESULT _hr = raw_RequestSession(p_RequestingUserName, p_RequestingEmail, p_RequestingPhone, p_RequestingLocation, p_DestinationQueueName, p_SubjectOfChat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(96)
inline HRESULT EICClientCOMLib::IEICChatObject2::RequestSessionForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_RequestingUserName, _bstr_t p_RequestingEmail, _bstr_t p_RequestingPhone, _bstr_t p_RequestingLocation, _bstr_t p_DestinationQueueName, _bstr_t p_SubjectOfChat ) {
    HRESULT _hr = raw_RequestSessionForUser(p_User, p_Station, p_RequestingUserName, p_RequestingEmail, p_RequestingPhone, p_RequestingLocation, p_DestinationQueueName, p_SubjectOfChat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICChatObject2Watcher wrapper method implementations
//

#pragma implementation_key(97)
inline HRESULT EICClientCOMLib::IEICChatObject2Watcher::ReceivedString ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_String ) {
    HRESULT _hr = raw_ReceivedString(p_Object, p_User, p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(98)
inline HRESULT EICClientCOMLib::IEICChatObject2Watcher::ReceivedUrl ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_URL ) {
    HRESULT _hr = raw_ReceivedUrl(p_Object, p_User, p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(99)
inline HRESULT EICClientCOMLib::IEICChatObject2Watcher::ReceivedFile ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_FileName, _bstr_t p_FileData ) {
    HRESULT _hr = raw_ReceivedFile(p_Object, p_User, p_FileName, p_FileData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCallObject2Watcher wrapper method implementations
//

#pragma implementation_key(100)
inline HRESULT EICClientCOMLib::IEICCallObject2Watcher::StatusChange ( struct IEICQueueObject2 * p_Object ) {
    HRESULT _hr = raw_StatusChange(p_Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICChatObject2Watcher2 wrapper method implementations
//

#pragma implementation_key(101)
inline HRESULT EICClientCOMLib::IEICChatObject2Watcher2::ReceivedString ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_String ) {
    HRESULT _hr = raw_ReceivedString(p_Object, p_User, p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(102)
inline HRESULT EICClientCOMLib::IEICChatObject2Watcher2::ReceivedUrl ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_URL ) {
    HRESULT _hr = raw_ReceivedUrl(p_Object, p_User, p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(103)
inline HRESULT EICClientCOMLib::IEICChatObject2Watcher2::ReceivedFile ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_FileName, _bstr_t p_FileData ) {
    HRESULT _hr = raw_ReceivedFile(p_Object, p_User, p_FileName, p_FileData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCallObject2Watcher2 wrapper method implementations
//

#pragma implementation_key(104)
inline HRESULT EICClientCOMLib::IEICCallObject2Watcher2::StatusChange ( struct IEICQueueObject2 * p_Object ) {
    HRESULT _hr = raw_StatusChange(p_Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueStatData wrapper method implementations
//

#pragma implementation_key(105)
inline long EICClientCOMLib::IEICQueueStatData::GetPeriodLength ( ) {
    long _result = 0;
    HRESULT _hr = get_PeriodLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(106)
inline long EICClientCOMLib::IEICQueueStatData::GetNumberOfCalls ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfCalls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(107)
inline long EICClientCOMLib::IEICQueueStatData::GetNumberAnswered ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberAnswered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(108)
inline long EICClientCOMLib::IEICQueueStatData::GetNumberCompleted ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberCompleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(109)
inline double EICClientCOMLib::IEICQueueStatData::GetAverageWaitTime ( ) {
    double _result = 0;
    HRESULT _hr = get_AverageWaitTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(110)
inline double EICClientCOMLib::IEICQueueStatData::GetAverageTalkTime ( ) {
    double _result = 0;
    HRESULT _hr = get_AverageTalkTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(111)
inline HRESULT EICClientCOMLib::IEICQueueStatData::GetAbandons ( short * p_ArraySize, VARIANT * p_AbandonList ) {
    HRESULT _hr = raw_GetAbandons(p_ArraySize, p_AbandonList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(112)
inline HRESULT EICClientCOMLib::IEICQueueStatData::GetServiceLevels ( short * p_ArraySize, VARIANT * p_ServiceList ) {
    HRESULT _hr = raw_GetServiceLevels(p_ArraySize, p_ServiceList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueStats wrapper method implementations
//

#pragma implementation_key(113)
inline long EICClientCOMLib::IEICQueueStats::GetCallsWaiting ( ) {
    long _result = 0;
    HRESULT _hr = get_CallsWaiting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(114)
inline long EICClientCOMLib::IEICQueueStats::GetCallsAnswered ( ) {
    long _result = 0;
    HRESULT _hr = get_CallsAnswered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(115)
inline DATE EICClientCOMLib::IEICQueueStats::GetLongestWaiting ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestWaiting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline DATE EICClientCOMLib::IEICQueueStats::GetLongestTalkTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestTalkTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(117)
inline long EICClientCOMLib::IEICQueueStats::GetAgentsLoggedIn ( ) {
    long _result = 0;
    HRESULT _hr = get_AgentsLoggedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(118)
inline long EICClientCOMLib::IEICQueueStats::GetAgentsAvailable ( ) {
    long _result = 0;
    HRESULT _hr = get_AgentsAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(119)
inline HRESULT EICClientCOMLib::IEICQueueStats::GetAbandonPeriods ( short * p_ArraySize, VARIANT * p_AbandonTimes ) {
    HRESULT _hr = raw_GetAbandonPeriods(p_ArraySize, p_AbandonTimes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(120)
inline HRESULT EICClientCOMLib::IEICQueueStats::GetServiceLevelPeriods ( short * p_ArraySize, VARIANT * p_ServiceTimes ) {
    HRESULT _hr = raw_GetServiceLevelPeriods(p_ArraySize, p_ServiceTimes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(121)
inline EICClientCOMLib::IEICQueueStatDataPtr EICClientCOMLib::IEICQueueStats::GetCurrentPeriod ( ) {
    struct IEICQueueStatData * _result = 0;
    HRESULT _hr = get_CurrentPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueStatDataPtr(_result, false);
}

#pragma implementation_key(122)
inline EICClientCOMLib::IEICQueueStatDataPtr EICClientCOMLib::IEICQueueStats::GetPreviousPeriod ( ) {
    struct IEICQueueStatData * _result = 0;
    HRESULT _hr = get_PreviousPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueStatDataPtr(_result, false);
}

#pragma implementation_key(123)
inline EICClientCOMLib::IEICQueueStatDataPtr EICClientCOMLib::IEICQueueStats::GetCurrentShift ( ) {
    struct IEICQueueStatData * _result = 0;
    HRESULT _hr = get_CurrentShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueStatDataPtr(_result, false);
}

#pragma implementation_key(124)
inline EICClientCOMLib::IEICQueueStatDataPtr EICClientCOMLib::IEICQueueStats::GetPreviousShift ( ) {
    struct IEICQueueStatData * _result = 0;
    HRESULT _hr = get_PreviousShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueStatDataPtr(_result, false);
}

//
// interface IEICQueueStatWatcher wrapper method implementations
//

#pragma implementation_key(125)
inline HRESULT EICClientCOMLib::IEICQueueStatWatcher::Change ( struct IEICQueueStats * p_Data ) {
    HRESULT _hr = raw_Change(p_Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICWorkgroupStats wrapper method implementations
//

#pragma implementation_key(126)
inline long EICClientCOMLib::IEICWorkgroupStats::GetAgents ( ) {
    long _result = 0;
    HRESULT _hr = get_Agents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline long EICClientCOMLib::IEICWorkgroupStats::GetAgentsLoggedIn ( ) {
    long _result = 0;
    HRESULT _hr = get_AgentsLoggedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(128)
inline long EICClientCOMLib::IEICWorkgroupStats::GetAgentsAvailable ( ) {
    long _result = 0;
    HRESULT _hr = get_AgentsAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(129)
inline DATE EICClientCOMLib::IEICWorkgroupStats::GetLongestAvailable ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(130)
inline long EICClientCOMLib::IEICWorkgroupStats::GetNumberOnInbound ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOnInbound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(131)
inline long EICClientCOMLib::IEICWorkgroupStats::GetNumberOnInboundInACW ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOnInboundInACW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(132)
inline DATE EICClientCOMLib::IEICWorkgroupStats::GetLongestInbound ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestInbound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(133)
inline long EICClientCOMLib::IEICWorkgroupStats::GetNumberOnOutbound ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOnOutbound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(134)
inline long EICClientCOMLib::IEICWorkgroupStats::GetNumberOnOutboundInACW ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOnOutboundInACW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline DATE EICClientCOMLib::IEICWorkgroupStats::GetLongestOutbound ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestOutbound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(136)
inline long EICClientCOMLib::IEICWorkgroupStats::GetNumberNonACD ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberNonACD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(137)
inline DATE EICClientCOMLib::IEICWorkgroupStats::GetLongestNonACD ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestNonACD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(138)
inline HRESULT EICClientCOMLib::IEICWorkgroupStats::GetStatusSummaryInfo ( short * p_ArraySize, VARIANT * p_StatusKeys, VARIANT * p_StatusCounts ) {
    HRESULT _hr = raw_GetStatusSummaryInfo(p_ArraySize, p_StatusKeys, p_StatusCounts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICWorkgroupStatWatcher wrapper method implementations
//

#pragma implementation_key(139)
inline HRESULT EICClientCOMLib::IEICWorkgroupStatWatcher::Change ( struct IEICWorkgroupStats * p_Data ) {
    HRESULT _hr = raw_Change(p_Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICUserWatcher wrapper method implementations
//

#pragma implementation_key(140)
inline HRESULT EICClientCOMLib::IEICUserWatcher::StatusChanged ( _bstr_t p_NewStatus, DATE p_UntilDateTime ) {
    HRESULT _hr = raw_StatusChanged(p_NewStatus, p_UntilDateTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(141)
inline HRESULT EICClientCOMLib::IEICUserWatcher::UserChanged ( ) {
    HRESULT _hr = raw_UserChanged();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(142)
inline HRESULT EICClientCOMLib::IEICUserWatcher::UserLoginChanged ( _bstr_t p_Station, VARIANT_BOOL p_Login ) {
    HRESULT _hr = raw_UserLoginChanged(p_Station, p_Login);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICUser wrapper method implementations
//

#pragma implementation_key(143)
inline _bstr_t EICClientCOMLib::IEICUser::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(144)
inline void EICClientCOMLib::IEICUser::PutId ( _bstr_t pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(145)
inline _bstr_t EICClientCOMLib::IEICUser::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(146)
inline _variant_t EICClientCOMLib::IEICUser::GetAvailableStatusMessages ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AvailableStatusMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(147)
inline _bstr_t EICClientCOMLib::IEICUser::GetStatusMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(148)
inline void EICClientCOMLib::IEICUser::PutStatusMessage ( _bstr_t pVal ) {
    HRESULT _hr = put_StatusMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(149)
inline VARIANT_BOOL EICClientCOMLib::IEICUser::GetisDND ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isDND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(150)
inline DATE EICClientCOMLib::IEICUser::GetUntilDateTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_UntilDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(151)
inline void EICClientCOMLib::IEICUser::PutUntilDateTime ( DATE pVal ) {
    HRESULT _hr = put_UntilDateTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(152)
inline HRESULT EICClientCOMLib::IEICUser::SetUntilDateTime ( short year, short month, short day, short hour, short minute ) {
    HRESULT _hr = raw_SetUntilDateTime(year, month, day, hour, minute);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(153)
inline HRESULT EICClientCOMLib::IEICUser::GetUntilDateTime ( short * year, short * month, short * day, short * hour, short * minute ) {
    HRESULT _hr = raw_GetUntilDateTime(year, month, day, hour, minute);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(154)
inline VARIANT_BOOL EICClientCOMLib::IEICUser::GetisOnPhone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isOnPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline _bstr_t EICClientCOMLib::IEICUser::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(156)
inline HRESULT EICClientCOMLib::IEICUser::SetChangeHandler ( struct IEICUserWatcher * p_Handler ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(157)
inline HRESULT EICClientCOMLib::IEICUser::Call ( long * p_CallId ) {
    HRESULT _hr = raw_Call(p_CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(158)
inline HRESULT EICClientCOMLib::IEICUser::Workgroups ( VARIANT * p_Workgroups ) {
    HRESULT _hr = raw_Workgroups(p_Workgroups);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(159)
inline HRESULT EICClientCOMLib::IEICUser::ViewableWorkgroups ( VARIANT * p_Workgroups ) {
    HRESULT _hr = raw_ViewableWorkgroups(p_Workgroups);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(160)
inline HRESULT EICClientCOMLib::IEICUser::AccessibleQueues ( VARIANT * p_Queues ) {
    HRESULT _hr = raw_AccessibleQueues(p_Queues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(161)
inline VARIANT_BOOL EICClientCOMLib::IEICUser::GetCanRecord ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanRecord(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(162)
inline VARIANT_BOOL EICClientCOMLib::IEICUser::GetCanListen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanListen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline VARIANT_BOOL EICClientCOMLib::IEICUser::GetCanMakePrivate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanMakePrivate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(164)
inline HRESULT EICClientCOMLib::IEICUser::StartWorkgroupsList ( ) {
    HRESULT _hr = raw_StartWorkgroupsList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(165)
inline HRESULT EICClientCOMLib::IEICUser::GetNextWorkgroup ( BSTR * p_Name ) {
    HRESULT _hr = raw_GetNextWorkgroup(p_Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(166)
inline HRESULT EICClientCOMLib::IEICUser::StartViewableWorkgroupsList ( ) {
    HRESULT _hr = raw_StartViewableWorkgroupsList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(167)
inline HRESULT EICClientCOMLib::IEICUser::GetNextViewableWorkgroup ( BSTR * p_Name ) {
    HRESULT _hr = raw_GetNextViewableWorkgroup(p_Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(168)
inline HRESULT EICClientCOMLib::IEICUser::StartAccessibleQueuesList ( ) {
    HRESULT _hr = raw_StartAccessibleQueuesList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(169)
inline HRESULT EICClientCOMLib::IEICUser::GetNextAccessibleQueues ( BSTR * p_Name, long * p_Type, VARIANT_BOOL * p_Modifiable ) {
    HRESULT _hr = raw_GetNextAccessibleQueues(p_Name, p_Type, p_Modifiable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(170)
inline HRESULT EICClientCOMLib::IEICUser::SetNonPersistentStatus ( _bstr_t p_Status ) {
    HRESULT _hr = raw_SetNonPersistentStatus(p_Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(171)
inline HRESULT EICClientCOMLib::IEICUser::StartStatusMessages ( ) {
    HRESULT _hr = raw_StartStatusMessages();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(172)
inline HRESULT EICClientCOMLib::IEICUser::GetNextStatusMessage ( BSTR * p_Text, VARIANT_BOOL * p_IsDND, VARIANT_BOOL * p_HasDate, VARIANT_BOOL * p_HasTime, BSTR * p_IconFileName ) {
    HRESULT _hr = raw_GetNextStatusMessage(p_Text, p_IsDND, p_HasDate, p_HasTime, p_IconFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(173)
inline _variant_t EICClientCOMLib::IEICUser::GetLoggedInStations ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LoggedInStations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(174)
inline VARIANT_BOOL EICClientCOMLib::IEICUser::GetIsLoggedIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoggedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICUserEx wrapper method implementations
//

#pragma implementation_key(175)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx::GetAlertOptionTelephone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlertOptionTelephone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(176)
inline void EICClientCOMLib::IEICUserEx::PutAlertOptionTelephone ( VARIANT_BOOL __MIDL_0011 ) {
    HRESULT _hr = put_AlertOptionTelephone(__MIDL_0011);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(177)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx::GetAlertOptionComputer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlertOptionComputer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(178)
inline void EICClientCOMLib::IEICUserEx::PutAlertOptionComputer ( VARIANT_BOOL __MIDL_0013 ) {
    HRESULT _hr = put_AlertOptionComputer(__MIDL_0013);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(179)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx::GetAlertOptionPopClient ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlertOptionPopClient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(180)
inline void EICClientCOMLib::IEICUserEx::PutAlertOptionPopClient ( VARIANT_BOOL __MIDL_0015 ) {
    HRESULT _hr = put_AlertOptionPopClient(__MIDL_0015);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(181)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx::GetAlertOptionSetFocus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlertOptionSetFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(182)
inline void EICClientCOMLib::IEICUserEx::PutAlertOptionSetFocus ( VARIANT_BOOL __MIDL_0017 ) {
    HRESULT _hr = put_AlertOptionSetFocus(__MIDL_0017);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(183)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx::GetNewChatOptionSound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatOptionSound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(184)
inline void EICClientCOMLib::IEICUserEx::PutNewChatOptionSound ( VARIANT_BOOL __MIDL_0019 ) {
    HRESULT _hr = put_NewChatOptionSound(__MIDL_0019);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(185)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx::GetNewChatOptionPopClient ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatOptionPopClient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(186)
inline void EICClientCOMLib::IEICUserEx::PutNewChatOptionPopClient ( VARIANT_BOOL __MIDL_0021 ) {
    HRESULT _hr = put_NewChatOptionPopClient(__MIDL_0021);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(187)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx::GetNewChatOptionSetFocus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatOptionSetFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(188)
inline void EICClientCOMLib::IEICUserEx::PutNewChatOptionSetFocus ( VARIANT_BOOL __MIDL_0023 ) {
    HRESULT _hr = put_NewChatOptionSetFocus(__MIDL_0023);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(189)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx::GetNewChatTextOptionSound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatTextOptionSound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(190)
inline void EICClientCOMLib::IEICUserEx::PutNewChatTextOptionSound ( VARIANT_BOOL __MIDL_0025 ) {
    HRESULT _hr = put_NewChatTextOptionSound(__MIDL_0025);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(191)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx::GetNewChatTextOptionPopClient ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatTextOptionPopClient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(192)
inline void EICClientCOMLib::IEICUserEx::PutNewChatTextOptionPopClient ( VARIANT_BOOL __MIDL_0027 ) {
    HRESULT _hr = put_NewChatTextOptionPopClient(__MIDL_0027);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(193)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx::GetNewChatTextOptionSetFocus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatTextOptionSetFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(194)
inline void EICClientCOMLib::IEICUserEx::PutNewChatTextOptionSetFocus ( VARIANT_BOOL __MIDL_0029 ) {
    HRESULT _hr = put_NewChatTextOptionSetFocus(__MIDL_0029);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(195)
inline long EICClientCOMLib::IEICUserEx::GetIncomingCallsTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_IncomingCallsTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(196)
inline void EICClientCOMLib::IEICUserEx::PutIncomingCallsTimeout ( long seconds ) {
    HRESULT _hr = put_IncomingCallsTimeout(seconds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(197)
inline _bstr_t EICClientCOMLib::IEICUserEx::GetIncomingCallsForwardNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IncomingCallsForwardNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(198)
inline void EICClientCOMLib::IEICUserEx::PutIncomingCallsForwardNumber ( _bstr_t number ) {
    HRESULT _hr = put_IncomingCallsForwardNumber(number);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(199)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx::GetActivateOutOfOfficeMessage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ActivateOutOfOfficeMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(200)
inline void EICClientCOMLib::IEICUserEx::PutActivateOutOfOfficeMessage ( VARIANT_BOOL __MIDL_0033 ) {
    HRESULT _hr = put_ActivateOutOfOfficeMessage(__MIDL_0033);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(201)
inline HRESULT EICClientCOMLib::IEICUserEx::HoldUpdates ( ) {
    HRESULT _hr = raw_HoldUpdates();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(202)
inline HRESULT EICClientCOMLib::IEICUserEx::CommitUpdates ( ) {
    HRESULT _hr = raw_CommitUpdates();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(203)
inline _variant_t EICClientCOMLib::IEICUserEx::GetChatURLs ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChatURLs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(204)
inline _variant_t EICClientCOMLib::IEICUserEx::GetChatMessages ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChatMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(205)
inline _variant_t EICClientCOMLib::IEICUserEx::GetChatFiles ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChatFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(206)
inline void EICClientCOMLib::IEICUserEx::PutStatusKey ( _bstr_t Val ) {
    HRESULT _hr = put_StatusKey(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(207)
inline _bstr_t EICClientCOMLib::IEICUserEx::GetStatusKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(208)
inline _variant_t EICClientCOMLib::IEICUserEx::GetDirectories ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Directories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICUserS wrapper method implementations
//

#pragma implementation_key(209)
inline _variant_t EICClientCOMLib::IEICUserS::GetAccessibleQueueObjectsS ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AccessibleQueueObjectsS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(210)
inline _variant_t EICClientCOMLib::IEICUserS::GetViewableWorkgroupsS ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ViewableWorkgroupsS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(211)
inline _variant_t EICClientCOMLib::IEICUserS::GetWorkgroupsS ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_WorkgroupsS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(212)
inline long EICClientCOMLib::IEICUserS::CallS ( ) {
    long _result = 0;
    HRESULT _hr = raw_CallS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(213)
inline _variant_t EICClientCOMLib::IEICUserS::GetUntilDateTimeS ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UntilDateTimeS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(214)
inline void EICClientCOMLib::IEICUserS::PutUntilDateTimeS ( VARIANT * p_Date ) {
    HRESULT _hr = put_UntilDateTimeS(p_Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEICWorkgroupWatcher wrapper method implementations
//

#pragma implementation_key(215)
inline HRESULT EICClientCOMLib::IEICWorkgroupWatcher::UserAdded ( _bstr_t p_UserId ) {
    HRESULT _hr = raw_UserAdded(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(216)
inline HRESULT EICClientCOMLib::IEICWorkgroupWatcher::UserChanged ( _bstr_t p_UserId, _bstr_t p_Status, DATE p_UntilDateTime ) {
    HRESULT _hr = raw_UserChanged(p_UserId, p_Status, p_UntilDateTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(217)
inline HRESULT EICClientCOMLib::IEICWorkgroupWatcher::UserRemoved ( _bstr_t p_UserId ) {
    HRESULT _hr = raw_UserRemoved(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(218)
inline HRESULT EICClientCOMLib::IEICWorkgroupWatcher::UserOnPhone ( _bstr_t p_UserId, VARIANT_BOOL p_OnPhone ) {
    HRESULT _hr = raw_UserOnPhone(p_UserId, p_OnPhone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(219)
inline HRESULT EICClientCOMLib::IEICWorkgroupWatcher::UserLoginChanged ( _bstr_t p_UserId, _bstr_t p_Station, VARIANT_BOOL p_Login ) {
    HRESULT _hr = raw_UserLoginChanged(p_UserId, p_Station, p_Login);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICWorkgroup wrapper method implementations
//

#pragma implementation_key(220)
inline HRESULT EICClientCOMLib::IEICWorkgroup::GetWorkgroupMembers ( VARIANT * p_UserIds ) {
    HRESULT _hr = raw_GetWorkgroupMembers(p_UserIds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(221)
inline HRESULT EICClientCOMLib::IEICWorkgroup::SetChangeHandler ( struct IEICWorkgroupWatcher * p_Handler, VARIANT_BOOL p_MonitorIndividuals ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler, p_MonitorIndividuals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(222)
inline _bstr_t EICClientCOMLib::IEICWorkgroup::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(223)
inline void EICClientCOMLib::IEICWorkgroup::PutId ( _bstr_t pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(224)
inline _bstr_t EICClientCOMLib::IEICWorkgroup::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(225)
inline HRESULT EICClientCOMLib::IEICWorkgroup::StartMembersList ( ) {
    HRESULT _hr = raw_StartMembersList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(226)
inline HRESULT EICClientCOMLib::IEICWorkgroup::GetNextMember ( BSTR * p_UserId ) {
    HRESULT _hr = raw_GetNextMember(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(227)
inline short EICClientCOMLib::IEICWorkgroup::GetWrapupTime ( ) {
    short _result = 0;
    HRESULT _hr = get_WrapupTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(228)
inline _bstr_t EICClientCOMLib::IEICWorkgroup::GetWrapupStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WrapupStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(229)
inline void EICClientCOMLib::IEICWorkgroup::PutMonitorOnPhone ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MonitorOnPhone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(230)
inline VARIANT_BOOL EICClientCOMLib::IEICWorkgroup::GetMonitorOnPhone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MonitorOnPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICWorkgroup2Watcher wrapper method implementations
//

#pragma implementation_key(231)
inline HRESULT EICClientCOMLib::IEICWorkgroup2Watcher::UserStatusChanged ( _bstr_t p_UserId, _bstr_t p_StatusKey, DATE p_UntilDateTime, VARIANT_BOOL p_HasDate, VARIANT_BOOL p_HasTime ) {
    HRESULT _hr = raw_UserStatusChanged(p_UserId, p_StatusKey, p_UntilDateTime, p_HasDate, p_HasTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICConferenceObject2Watcher wrapper method implementations
//

#pragma implementation_key(232)
inline HRESULT EICClientCOMLib::IEICConferenceObject2Watcher::PartyChanged ( long p_ConfId, long p_Type, long p_ObjId, long p_Event ) {
    HRESULT _hr = raw_PartyChanged(p_ConfId, p_Type, p_ObjId, p_Event);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(233)
inline HRESULT EICClientCOMLib::IEICConferenceObject2Watcher::ObjectDestroyed ( long p_ConfId ) {
    HRESULT _hr = raw_ObjectDestroyed(p_ConfId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(234)
inline HRESULT EICClientCOMLib::IEICConferenceObject2Watcher::TextMessageReceived ( long p_ConfId, _bstr_t p_SenderUserId, _bstr_t p_Msg ) {
    HRESULT _hr = raw_TextMessageReceived(p_ConfId, p_SenderUserId, p_Msg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICWorkgroup2Watcher2 wrapper method implementations
//

#pragma implementation_key(235)
inline HRESULT EICClientCOMLib::IEICWorkgroup2Watcher2::UserStatusChanged ( _bstr_t p_UserId, _bstr_t p_StatusKey, DATE p_UntilDateTime, VARIANT_BOOL p_HasDate, VARIANT_BOOL p_HasTime ) {
    HRESULT _hr = raw_UserStatusChanged(p_UserId, p_StatusKey, p_UntilDateTime, p_HasDate, p_HasTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IACDHelpRequest wrapper method implementations
//

#pragma implementation_key(236)
inline _bstr_t EICClientCOMLib::IACDHelpRequest::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(237)
inline void EICClientCOMLib::IACDHelpRequest::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(238)
inline EICClientCOMLib::IEICQueueObject2Ptr EICClientCOMLib::IACDHelpRequest::GetInteraction ( ) {
    struct IEICQueueObject2 * _result = 0;
    HRESULT _hr = get_Interaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueObject2Ptr(_result, false);
}

#pragma implementation_key(239)
inline void EICClientCOMLib::IACDHelpRequest::PutInteraction ( struct IEICQueueObject2 * pVal ) {
    HRESULT _hr = put_Interaction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(240)
inline _bstr_t EICClientCOMLib::IACDHelpRequest::GetAgent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Agent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(241)
inline void EICClientCOMLib::IACDHelpRequest::PutAgent ( _bstr_t pVal ) {
    HRESULT _hr = put_Agent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(242)
inline _bstr_t EICClientCOMLib::IACDHelpRequest::GetWorkgroup ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Workgroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(243)
inline void EICClientCOMLib::IACDHelpRequest::PutWorkgroup ( _bstr_t pVal ) {
    HRESULT _hr = put_Workgroup(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(244)
inline _bstr_t EICClientCOMLib::IACDHelpRequest::GetStation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Station(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(245)
inline void EICClientCOMLib::IACDHelpRequest::PutStation ( _bstr_t pVal ) {
    HRESULT _hr = put_Station(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(246)
inline _bstr_t EICClientCOMLib::IACDHelpRequest::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(247)
inline void EICClientCOMLib::IACDHelpRequest::PutExtension ( _bstr_t pVal ) {
    HRESULT _hr = put_Extension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(248)
inline HRESULT EICClientCOMLib::IACDHelpRequest::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IACDHelpMonitorCallback wrapper method implementations
//

#pragma implementation_key(249)
inline HRESULT EICClientCOMLib::IACDHelpMonitorCallback::HelpRequest ( struct IACDHelpRequest * p_Request ) {
    HRESULT _hr = raw_HelpRequest(p_Request);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(250)
inline HRESULT EICClientCOMLib::IACDHelpMonitorCallback::ResponseReceived ( struct IACDHelpRequest * p_Request ) {
    HRESULT _hr = raw_ResponseReceived(p_Request);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISIPPhoneWatcher wrapper method implementations
//

#pragma implementation_key(251)
inline HRESULT EICClientCOMLib::ISIPPhoneWatcher::OnDeviceChanged ( VARIANT_BOOL bCapableOfAudio ) {
    HRESULT _hr = raw_OnDeviceChanged(bCapableOfAudio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueue2WatcherAdapter wrapper method implementations
//

#pragma implementation_key(252)
inline void EICClientCOMLib::IEICQueue2WatcherAdapter::PutObjectAddedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectAddedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(253)
inline void EICClientCOMLib::IEICQueue2WatcherAdapter::PutObjectChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(254)
inline void EICClientCOMLib::IEICQueue2WatcherAdapter::PutObjectRemovedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectRemovedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(255)
inline void EICClientCOMLib::IEICQueue2WatcherAdapter::PutStatisticsUpdatedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_StatisticsUpdatedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline _variant_t EICClientCOMLib::IEICQueue2WatcherAdapter::GetObjectAddedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectAddedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(257)
inline _variant_t EICClientCOMLib::IEICQueue2WatcherAdapter::GetObjectChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(258)
inline _variant_t EICClientCOMLib::IEICQueue2WatcherAdapter::GetObjectRemovedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectRemovedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(259)
inline _variant_t EICClientCOMLib::IEICQueue2WatcherAdapter::GetStatisticsUpdatedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StatisticsUpdatedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICRemoteConnection wrapper method implementations
//

#pragma implementation_key(260)
inline HRESULT EICClientCOMLib::IEICRemoteConnection::Connect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_PersistentConnection, VARIANT_BOOL p_AutoDisconnect ) {
    HRESULT _hr = raw_Connect(p_App, p_Server, p_User, p_Password, p_Station, p_PersistentConnection, p_AutoDisconnect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(261)
inline HRESULT EICClientCOMLib::IEICRemoteConnection::Disconnect ( VARIANT_BOOL p_DisconnectUserOnly ) {
    HRESULT _hr = raw_Disconnect(p_DisconnectUserOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(262)
inline _bstr_t EICClientCOMLib::IEICRemoteConnection::GetServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Server(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(263)
inline _bstr_t EICClientCOMLib::IEICRemoteConnection::GetUser ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(264)
inline _bstr_t EICClientCOMLib::IEICRemoteConnection::GetStation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Station(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(265)
inline VARIANT_BOOL EICClientCOMLib::IEICRemoteConnection::GetConnectionValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConnectionValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICConnection wrapper method implementations
//

#pragma implementation_key(266)
inline HRESULT EICClientCOMLib::IEICConnection::Connect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_AutoDisconnect ) {
    HRESULT _hr = raw_Connect(p_App, p_Server, p_User, p_Password, p_Station, p_AutoDisconnect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(267)
inline HRESULT EICClientCOMLib::IEICConnection::Attach ( _bstr_t p_App, _bstr_t p_Server, VARIANT_BOOL p_AutoDisconnect ) {
    HRESULT _hr = raw_Attach(p_App, p_Server, p_AutoDisconnect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(268)
inline HRESULT EICClientCOMLib::IEICConnection::Disconnect ( VARIANT_BOOL p_DisconnectUserOnly ) {
    HRESULT _hr = raw_Disconnect(p_DisconnectUserOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(269)
inline HRESULT EICClientCOMLib::IEICConnection::ForceDisconnect ( _bstr_t p_User, _bstr_t p_Station, VARIANT_BOOL p_DisconnectUserOnly ) {
    HRESULT _hr = raw_ForceDisconnect(p_User, p_Station, p_DisconnectUserOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(270)
inline _bstr_t EICClientCOMLib::IEICConnection::GetServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Server(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(271)
inline _bstr_t EICClientCOMLib::IEICConnection::GetUser ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(272)
inline _bstr_t EICClientCOMLib::IEICConnection::GetStation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Station(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(273)
inline HRESULT EICClientCOMLib::IEICConnection::PassiveConnect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, VARIANT_BOOL p_AutoDisconnect ) {
    HRESULT _hr = raw_PassiveConnect(p_App, p_Server, p_User, p_Password, p_AutoDisconnect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(274)
inline VARIANT_BOOL EICClientCOMLib::IEICConnection::GetConnectionValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConnectionValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICChatObjectWatcher wrapper method implementations
//

#pragma implementation_key(275)
inline HRESULT EICClientCOMLib::IEICChatObjectWatcher::StateChanged ( long p_NewState, _bstr_t p_StateString ) {
    HRESULT _hr = raw_StateChanged(p_NewState, p_StateString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(276)
inline HRESULT EICClientCOMLib::IEICChatObjectWatcher::ObjectSpecificChange ( ) {
    HRESULT _hr = raw_ObjectSpecificChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(277)
inline HRESULT EICClientCOMLib::IEICChatObjectWatcher::ObjectDestroyed ( ) {
    HRESULT _hr = raw_ObjectDestroyed();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(278)
inline HRESULT EICClientCOMLib::IEICChatObjectWatcher::ObjectSpecificError ( long p_Error ) {
    HRESULT _hr = raw_ObjectSpecificError(p_Error);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(279)
inline HRESULT EICClientCOMLib::IEICChatObjectWatcher::SubObjectChanged ( long p_Type, long p_Id, long p_Change ) {
    HRESULT _hr = raw_SubObjectChanged(p_Type, p_Id, p_Change);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(280)
inline HRESULT EICClientCOMLib::IEICChatObjectWatcher::ReceivedString ( _bstr_t p_User, _bstr_t p_String ) {
    HRESULT _hr = raw_ReceivedString(p_User, p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(281)
inline HRESULT EICClientCOMLib::IEICChatObjectWatcher::ReceivedUrl ( _bstr_t p_User, _bstr_t p_URL ) {
    HRESULT _hr = raw_ReceivedUrl(p_User, p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(282)
inline HRESULT EICClientCOMLib::IEICChatObjectWatcher::ReceivedFile ( _bstr_t p_User, _bstr_t p_FileName, _bstr_t p_FileData ) {
    HRESULT _hr = raw_ReceivedFile(p_User, p_FileName, p_FileData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICChatObject wrapper method implementations
//

#pragma implementation_key(283)
inline long EICClientCOMLib::IEICChatObject::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(284)
inline void EICClientCOMLib::IEICChatObject::PutId ( long pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(285)
inline long EICClientCOMLib::IEICChatObject::GetState ( ) {
    long _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline _bstr_t EICClientCOMLib::IEICChatObject::GetStateString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StateString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(287)
inline void EICClientCOMLib::IEICChatObject::PutStateString ( _bstr_t pVal ) {
    HRESULT _hr = put_StateString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(288)
inline HRESULT EICClientCOMLib::IEICChatObject::Pickup ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Pickup(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(289)
inline HRESULT EICClientCOMLib::IEICChatObject::Disconnect ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Disconnect(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(290)
inline HRESULT EICClientCOMLib::IEICChatObject::SetChangeHandler ( struct IEICChatObjectWatcher * p_Handler ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(291)
inline _bstr_t EICClientCOMLib::IEICChatObject::GetLocalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(292)
inline _bstr_t EICClientCOMLib::IEICChatObject::GetLocalLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(293)
inline _bstr_t EICClientCOMLib::IEICChatObject::GetRemoteName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(294)
inline void EICClientCOMLib::IEICChatObject::PutRemoteName ( _bstr_t pVal ) {
    HRESULT _hr = put_RemoteName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(295)
inline _bstr_t EICClientCOMLib::IEICChatObject::GetRemoteLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(296)
inline _bstr_t EICClientCOMLib::IEICChatObject::GetLocalId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(297)
inline _bstr_t EICClientCOMLib::IEICChatObject::GetRemoteId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(298)
inline DATE EICClientCOMLib::IEICChatObject::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(299)
inline HRESULT EICClientCOMLib::IEICChatObject::GetCreationTime ( short * hour, short * minute, short * second ) {
    HRESULT _hr = raw_GetCreationTime(hour, minute, second);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(300)
inline short EICClientCOMLib::IEICChatObject::GetDirection ( ) {
    short _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline HRESULT EICClientCOMLib::IEICChatObject::GetNamedAttribute ( _bstr_t p_Name, BSTR * p_Value ) {
    HRESULT _hr = raw_GetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(302)
inline HRESULT EICClientCOMLib::IEICChatObject::SetNamedAttribute ( _bstr_t p_Name, _bstr_t p_Value ) {
    HRESULT _hr = raw_SetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(303)
inline HRESULT EICClientCOMLib::IEICChatObject::Listen ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Listen(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(304)
inline HRESULT EICClientCOMLib::IEICChatObject::Record ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Record(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(305)
inline HRESULT EICClientCOMLib::IEICChatObject::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(306)
inline HRESULT EICClientCOMLib::IEICChatObject::Private ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Private(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(307)
inline VARIANT_BOOL EICClientCOMLib::IEICChatObject::GetisRecording ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isRecording(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline VARIANT_BOOL EICClientCOMLib::IEICChatObject::GetisPaused ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPaused(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(309)
inline VARIANT_BOOL EICClientCOMLib::IEICChatObject::GetisPrivate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPrivate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline VARIANT_BOOL EICClientCOMLib::IEICChatObject::GetisMonitored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isMonitored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(311)
inline HRESULT EICClientCOMLib::IEICChatObject::PutNameAttributeList ( const _variant_t & p_Names, const _variant_t & p_Values ) {
    HRESULT _hr = raw_PutNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(312)
inline HRESULT EICClientCOMLib::IEICChatObject::GetNameAttributeList ( const _variant_t & p_Names, VARIANT * p_Values ) {
    HRESULT _hr = raw_GetNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(313)
inline HRESULT EICClientCOMLib::IEICChatObject::SendString ( _bstr_t p_String ) {
    HRESULT _hr = raw_SendString(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(314)
inline HRESULT EICClientCOMLib::IEICChatObject::SendURL ( _bstr_t p_URL ) {
    HRESULT _hr = raw_SendURL(p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(315)
inline HRESULT EICClientCOMLib::IEICChatObject::SendFile ( _bstr_t p_FileName, _bstr_t p_FileData ) {
    HRESULT _hr = raw_SendFile(p_FileName, p_FileData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(316)
inline HRESULT EICClientCOMLib::IEICChatObject::BlindTransfer ( _bstr_t p_UserQueueName, _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_BlindTransfer(p_UserQueueName, p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(317)
inline HRESULT EICClientCOMLib::IEICChatObject::RequestSession ( _bstr_t p_RequestingUserName, _bstr_t p_RequestingEmail, _bstr_t p_RequestingPhone, _bstr_t p_RequestingLocation, _bstr_t p_DestinationQueueName, _bstr_t p_SubjectOfChat ) {
    HRESULT _hr = raw_RequestSession(p_RequestingUserName, p_RequestingEmail, p_RequestingPhone, p_RequestingLocation, p_DestinationQueueName, p_SubjectOfChat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueObjectWatcher wrapper method implementations
//

#pragma implementation_key(318)
inline HRESULT EICClientCOMLib::IEICQueueObjectWatcher::StateChanged ( long p_NewState, _bstr_t p_StateString ) {
    HRESULT _hr = raw_StateChanged(p_NewState, p_StateString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(319)
inline HRESULT EICClientCOMLib::IEICQueueObjectWatcher::ObjectSpecificChange ( ) {
    HRESULT _hr = raw_ObjectSpecificChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(320)
inline HRESULT EICClientCOMLib::IEICQueueObjectWatcher::ObjectDestroyed ( ) {
    HRESULT _hr = raw_ObjectDestroyed();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(321)
inline HRESULT EICClientCOMLib::IEICQueueObjectWatcher::ObjectSpecificError ( long p_Error ) {
    HRESULT _hr = raw_ObjectSpecificError(p_Error);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(322)
inline HRESULT EICClientCOMLib::IEICQueueObjectWatcher::SubObjectChanged ( long p_Type, long p_Id, long p_Change ) {
    HRESULT _hr = raw_SubObjectChanged(p_Type, p_Id, p_Change);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCallObject wrapper method implementations
//

#pragma implementation_key(323)
inline long EICClientCOMLib::IEICCallObject::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(324)
inline void EICClientCOMLib::IEICCallObject::PutId ( long pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(325)
inline long EICClientCOMLib::IEICCallObject::GetState ( ) {
    long _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(326)
inline _bstr_t EICClientCOMLib::IEICCallObject::GetStateString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StateString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(327)
inline void EICClientCOMLib::IEICCallObject::PutStateString ( _bstr_t pVal ) {
    HRESULT _hr = put_StateString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(328)
inline HRESULT EICClientCOMLib::IEICCallObject::Pickup ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Pickup(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(329)
inline HRESULT EICClientCOMLib::IEICCallObject::Disconnect ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Disconnect(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(330)
inline HRESULT EICClientCOMLib::IEICCallObject::SetChangeHandler ( struct IEICQueueObjectWatcher * p_Handler ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(331)
inline _bstr_t EICClientCOMLib::IEICCallObject::GetLocalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(332)
inline _bstr_t EICClientCOMLib::IEICCallObject::GetLocalLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(333)
inline _bstr_t EICClientCOMLib::IEICCallObject::GetRemoteName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(334)
inline void EICClientCOMLib::IEICCallObject::PutRemoteName ( _bstr_t pVal ) {
    HRESULT _hr = put_RemoteName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(335)
inline _bstr_t EICClientCOMLib::IEICCallObject::GetRemoteLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(336)
inline _bstr_t EICClientCOMLib::IEICCallObject::GetLocalId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(337)
inline _bstr_t EICClientCOMLib::IEICCallObject::GetRemoteId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(338)
inline DATE EICClientCOMLib::IEICCallObject::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline HRESULT EICClientCOMLib::IEICCallObject::GetCreationTime ( short * hour, short * minute, short * second ) {
    HRESULT _hr = raw_GetCreationTime(hour, minute, second);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(340)
inline short EICClientCOMLib::IEICCallObject::GetDirection ( ) {
    short _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(341)
inline HRESULT EICClientCOMLib::IEICCallObject::GetNamedAttribute ( _bstr_t p_Name, BSTR * p_Value ) {
    HRESULT _hr = raw_GetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(342)
inline HRESULT EICClientCOMLib::IEICCallObject::SetNamedAttribute ( _bstr_t p_Name, _bstr_t p_Value ) {
    HRESULT _hr = raw_SetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(343)
inline HRESULT EICClientCOMLib::IEICCallObject::ExtendedDial ( _bstr_t p_Number, short p_TimeoutSecs, VARIANT_BOOL p_CallAnalysis, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_ExtendedDial(p_Number, p_TimeoutSecs, p_CallAnalysis, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(344)
inline HRESULT EICClientCOMLib::IEICCallObject::Dial ( _bstr_t p_Number, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_Dial(p_Number, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(345)
inline HRESULT EICClientCOMLib::IEICCallObject::Listen ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Listen(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(346)
inline HRESULT EICClientCOMLib::IEICCallObject::Record ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Record(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(347)
inline HRESULT EICClientCOMLib::IEICCallObject::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(348)
inline HRESULT EICClientCOMLib::IEICCallObject::Mute ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Mute(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(349)
inline HRESULT EICClientCOMLib::IEICCallObject::Hold ( _bstr_t p_ToUserQueue, _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Hold(p_ToUserQueue, p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(350)
inline HRESULT EICClientCOMLib::IEICCallObject::Private ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Private(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(351)
inline HRESULT EICClientCOMLib::IEICCallObject::BlindTransfer ( _bstr_t p_ToNumber, _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_BlindTransfer(p_ToNumber, p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(352)
inline HRESULT EICClientCOMLib::IEICCallObject::ConsultTransfer ( long p_WithCall, _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_ConsultTransfer(p_WithCall, p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(353)
inline HRESULT EICClientCOMLib::IEICCallObject::SendToVoiceMail ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_SendToVoiceMail(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(354)
inline VARIANT_BOOL EICClientCOMLib::IEICCallObject::GetisHeld ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isHeld(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(355)
inline VARIANT_BOOL EICClientCOMLib::IEICCallObject::GetisRecording ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isRecording(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(356)
inline VARIANT_BOOL EICClientCOMLib::IEICCallObject::GetisPaused ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPaused(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(357)
inline VARIANT_BOOL EICClientCOMLib::IEICCallObject::GetisMuted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isMuted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(358)
inline VARIANT_BOOL EICClientCOMLib::IEICCallObject::GetisPrivate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPrivate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(359)
inline VARIANT_BOOL EICClientCOMLib::IEICCallObject::GetisMonitored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isMonitored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(360)
inline HRESULT EICClientCOMLib::IEICCallObject::PlayDigits ( _bstr_t p_StringOfDigits ) {
    HRESULT _hr = raw_PlayDigits(p_StringOfDigits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(361)
inline VARIANT_BOOL EICClientCOMLib::IEICCallObject::GetisParty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isParty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(362)
inline long EICClientCOMLib::IEICCallObject::GetConferenceId ( ) {
    long _result = 0;
    HRESULT _hr = get_ConferenceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(363)
inline HRESULT EICClientCOMLib::IEICCallObject::PutNameAttributeList ( const _variant_t & p_Names, const _variant_t & p_Values ) {
    HRESULT _hr = raw_PutNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(364)
inline HRESULT EICClientCOMLib::IEICCallObject::GetNameAttributeList ( const _variant_t & p_Names, VARIANT * p_Values ) {
    HRESULT _hr = raw_GetNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICWorkgroupEntry wrapper method implementations
//

#pragma implementation_key(365)
inline HRESULT EICClientCOMLib::IEICWorkgroupEntry::Load ( _bstr_t pVal ) {
    HRESULT _hr = raw_Load(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(366)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetUserId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(367)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(368)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(369)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(370)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(371)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_City(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(372)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(373)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Zip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(374)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Phone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(375)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Company(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(376)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(377)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetDepartment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Department(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(378)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetBusinessAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(379)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetBusinessCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(380)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetBusinessState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(381)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetBusinessZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessZip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(382)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetBusinessCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(383)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetBusinessEMail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessEMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(384)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetAssistant ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(385)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetHomeCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(386)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetHomeEMail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeEMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(387)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetBusinessPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(388)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetBusinessPhone2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessPhone2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(389)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetHomePhone2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomePhone2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(390)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetMobile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mobile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(391)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetFax ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Fax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(392)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetPager ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Pager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(393)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetAssistantPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssistantPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(394)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(395)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetPrimaryNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrimaryNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(396)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetNotes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Notes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(397)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetStatusMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(398)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetStatusKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(399)
inline _variant_t EICClientCOMLib::IEICWorkgroupEntry::GetUntilDateTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UntilDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(400)
inline VARIANT_BOOL EICClientCOMLib::IEICWorkgroupEntry::GetisDND ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isDND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(401)
inline VARIANT_BOOL EICClientCOMLib::IEICWorkgroupEntry::GethasDate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_hasDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(402)
inline VARIANT_BOOL EICClientCOMLib::IEICWorkgroupEntry::GethasTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_hasTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(403)
inline VARIANT_BOOL EICClientCOMLib::IEICWorkgroupEntry::GetIsLoggedIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoggedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(404)
inline VARIANT_BOOL EICClientCOMLib::IEICWorkgroupEntry::GetisOnPhone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isOnPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(405)
inline _bstr_t EICClientCOMLib::IEICWorkgroupEntry::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(406)
inline _variant_t EICClientCOMLib::IEICWorkgroupEntry::GetStatusChangeTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StatusChangeTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICConferenceObject wrapper method implementations
//

#pragma implementation_key(407)
inline HRESULT EICClientCOMLib::IEICConferenceObject::Create ( struct IEICCallObject * p_Call ) {
    HRESULT _hr = raw_Create(p_Call);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(408)
inline HRESULT EICClientCOMLib::IEICConferenceObject::Add ( struct IEICCallObject * p_Call ) {
    HRESULT _hr = raw_Add(p_Call);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(409)
inline HRESULT EICClientCOMLib::IEICConferenceObject::ListMembers ( VARIANT * p_ArrayOfCallIds ) {
    HRESULT _hr = raw_ListMembers(p_ArrayOfCallIds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(410)
inline HRESULT EICClientCOMLib::IEICConferenceObject::SetChangeHandler ( struct IEICQueueObjectWatcher * p_Handler ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(411)
inline HRESULT EICClientCOMLib::IEICConferenceObject::DisconnectParty ( long p_CallId ) {
    HRESULT _hr = raw_DisconnectParty(p_CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(412)
inline long EICClientCOMLib::IEICConferenceObject::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline void EICClientCOMLib::IEICConferenceObject::PutId ( long pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(414)
inline HRESULT EICClientCOMLib::IEICConferenceObject::StartMembersList ( ) {
    HRESULT _hr = raw_StartMembersList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(415)
inline HRESULT EICClientCOMLib::IEICConferenceObject::GetNextMember ( long * p_CallId ) {
    HRESULT _hr = raw_GetNextMember(p_CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueStatDataS wrapper method implementations
//

#pragma implementation_key(416)
inline _variant_t EICClientCOMLib::IEICQueueStatDataS::GetAbandons ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Abandons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(417)
inline _variant_t EICClientCOMLib::IEICQueueStatDataS::GetServiceLevels ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ServiceLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICWorkgroupStatsS wrapper method implementations
//

#pragma implementation_key(418)
inline _variant_t EICClientCOMLib::IEICWorkgroupStatsS::GetStatusSummaryInfo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StatusSummaryInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICStatistics wrapper method implementations
//

#pragma implementation_key(419)
inline HRESULT EICClientCOMLib::IEICStatistics::Connect ( _bstr_t p_Name ) {
    HRESULT _hr = raw_Connect(p_Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(420)
inline HRESULT EICClientCOMLib::IEICStatistics::SetQueueChangeHandler ( IUnknown * p_Handler ) {
    HRESULT _hr = raw_SetQueueChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(421)
inline HRESULT EICClientCOMLib::IEICStatistics::SetWorkgroupChangeHandler ( IUnknown * p_Handler ) {
    HRESULT _hr = raw_SetWorkgroupChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(422)
inline EICClientCOMLib::IEICQueueStatsPtr EICClientCOMLib::IEICStatistics::GetQueueStats ( ) {
    struct IEICQueueStats * _result = 0;
    HRESULT _hr = get_QueueStats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueStatsPtr(_result, false);
}

#pragma implementation_key(423)
inline EICClientCOMLib::IEICWorkgroupStatsPtr EICClientCOMLib::IEICStatistics::GetWorkgroupStats ( ) {
    struct IEICWorkgroupStats * _result = 0;
    HRESULT _hr = get_WorkgroupStats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICWorkgroupStatsPtr(_result, false);
}

//
// interface IEICLogEvent wrapper method implementations
//

#pragma implementation_key(424)
inline HRESULT EICClientCOMLib::IEICLogEvent::Log ( _bstr_t p_String ) {
    HRESULT _hr = raw_Log(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICLogging wrapper method implementations
//

#pragma implementation_key(425)
inline HRESULT EICClientCOMLib::IEICLogging::Start ( struct IEICLogEvent * p_Logger, VARIANT_BOOL p_InternalDebugging ) {
    HRESULT _hr = raw_Start(p_Logger, p_InternalDebugging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(426)
inline HRESULT EICClientCOMLib::IEICLogging::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(427)
inline HRESULT EICClientCOMLib::IEICLogging::Log ( _bstr_t p_String ) {
    HRESULT _hr = raw_Log(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(428)
inline void EICClientCOMLib::IEICLogging::PutInternalDebugging ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InternalDebugging(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(429)
inline VARIANT_BOOL EICClientCOMLib::IEICLogging::GetInternalDebugging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InternalDebugging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICNames wrapper method implementations
//

#pragma implementation_key(430)
inline IUnknownPtr EICClientCOMLib::IEICNames::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(431)
inline _bstr_t EICClientCOMLib::IEICNames::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(432)
inline void EICClientCOMLib::IEICNames::PutItem ( long Index, _bstr_t pVal ) {
    HRESULT _hr = put_Item(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(433)
inline long EICClientCOMLib::IEICNames::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline HRESULT EICClientCOMLib::IEICNames::Add ( _bstr_t newVal ) {
    HRESULT _hr = raw_Add(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(435)
inline HRESULT EICClientCOMLib::IEICNames::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDS wrapper method implementations
//

#pragma implementation_key(436)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDS::GetWorkgroups ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Workgroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(437)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDS::GetUsers ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Users(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(438)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDS::GetSkills ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Skills(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(439)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDS::GetNTUsers ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_NTUsers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(440)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDS::GetActions ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(441)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDS::GetStatusMessages ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_StatusMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(442)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDS::GetWorkstations ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Workstations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(443)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDS::GetSMDIPorts ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_SMDIPorts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(444)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDS::GetPagingCarriers ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_PagingCarriers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(445)
inline HRESULT EICClientCOMLib::IEICDS::BeginTransaction ( ) {
    HRESULT _hr = raw_BeginTransaction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(446)
inline HRESULT EICClientCOMLib::IEICDS::EndTransaction ( ) {
    HRESULT _hr = raw_EndTransaction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDSEntry wrapper method implementations
//

#pragma implementation_key(447)
inline _bstr_t EICClientCOMLib::IEICDSEntry::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(448)
inline void EICClientCOMLib::IEICDSEntry::PutId ( _bstr_t pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(449)
inline HRESULT EICClientCOMLib::IEICDSEntry::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(450)
inline HRESULT EICClientCOMLib::IEICDSEntry::Revert ( ) {
    HRESULT _hr = raw_Revert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDSCustomEntry wrapper method implementations
//

#pragma implementation_key(451)
inline _variant_t EICClientCOMLib::IEICDSCustomEntry::GetValue ( _bstr_t p_Attribute ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(p_Attribute, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(452)
inline void EICClientCOMLib::IEICDSCustomEntry::PutValue ( _bstr_t p_Attribute, const _variant_t & p_Value ) {
    HRESULT _hr = put_Value(p_Attribute, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(453)
inline _bstr_t EICClientCOMLib::IEICDSCustomEntry::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IEICDS2 wrapper method implementations
//

#pragma implementation_key(454)
inline HRESULT EICClientCOMLib::IEICDS2::DeleteEntry ( struct IEICDSEntry * p_Entry ) {
    HRESULT _hr = raw_DeleteEntry(p_Entry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(455)
inline EICClientCOMLib::IEICDSCustomEntryPtr EICClientCOMLib::IEICDS2::CreateCustomEntry ( struct IEICDSEntry * p_Parent, _bstr_t p_Attr ) {
    struct IEICDSCustomEntry * _result = 0;
    HRESULT _hr = raw_CreateCustomEntry(p_Parent, p_Attr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICDSCustomEntryPtr(_result, false);
}

#pragma implementation_key(456)
inline EICClientCOMLib::IEICDSCustomEntryPtr EICClientCOMLib::IEICDS2::GetCustomEntry ( struct IEICDSEntry * p_Parent, _bstr_t p_Attr ) {
    struct IEICDSCustomEntry * _result = 0;
    HRESULT _hr = raw_GetCustomEntry(p_Parent, p_Attr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICDSCustomEntryPtr(_result, false);
}

//
// interface IEICDS3 wrapper method implementations
//

#pragma implementation_key(457)
inline HRESULT EICClientCOMLib::IEICDS3::AddSkill ( _bstr_t p_Skill ) {
    HRESULT _hr = raw_AddSkill(p_Skill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(458)
inline HRESULT EICClientCOMLib::IEICDS3::DeleteSkill ( _bstr_t p_Skill ) {
    HRESULT _hr = raw_DeleteSkill(p_Skill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDSUser wrapper method implementations
//

#pragma implementation_key(459)
inline _bstr_t EICClientCOMLib::IEICDSUser::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(460)
inline void EICClientCOMLib::IEICDSUser::PutExtension ( _bstr_t pVal ) {
    HRESULT _hr = put_Extension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(461)
inline _bstr_t EICClientCOMLib::IEICDSUser::GetMailbox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mailbox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(462)
inline void EICClientCOMLib::IEICDSUser::PutMailbox ( _bstr_t pVal ) {
    HRESULT _hr = put_Mailbox(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(463)
inline _bstr_t EICClientCOMLib::IEICDSUser::GetMailboxDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailboxDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(464)
inline void EICClientCOMLib::IEICDSUser::PutMailboxDisplayName ( _bstr_t pVal ) {
    HRESULT _hr = put_MailboxDisplayName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(465)
inline void EICClientCOMLib::IEICDSUser::PutPassword ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Password(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(466)
inline _bstr_t EICClientCOMLib::IEICDSUser::GetStatusMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(467)
inline void EICClientCOMLib::IEICDSUser::PutStatusMessage ( _bstr_t pVal ) {
    HRESULT _hr = put_StatusMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(468)
inline _bstr_t EICClientCOMLib::IEICDSUser::GetDefaultWorkstation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultWorkstation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(469)
inline void EICClientCOMLib::IEICDSUser::PutDefaultWorkstation ( _bstr_t pVal ) {
    HRESULT _hr = put_DefaultWorkstation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(470)
inline _bstr_t EICClientCOMLib::IEICDSUser::GetNTDomainName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NTDomainName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(471)
inline void EICClientCOMLib::IEICDSUser::PutNTDomainName ( _bstr_t pVal ) {
    HRESULT _hr = put_NTDomainName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(472)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDSUser::GetWorkgroups ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Workgroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(473)
inline HRESULT EICClientCOMLib::IEICDSUser::AddToWorkgroup ( _bstr_t p_WorkgroupName ) {
    HRESULT _hr = raw_AddToWorkgroup(p_WorkgroupName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(474)
inline HRESULT EICClientCOMLib::IEICDSUser::RemoveFromWorkgroup ( _bstr_t p_WorkgroupName ) {
    HRESULT _hr = raw_RemoveFromWorkgroup(p_WorkgroupName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(475)
inline HRESULT EICClientCOMLib::IEICDSUser::GetACDOptions ( VARIANT * p_Cost, VARIANT * p_Attribute1, VARIANT * p_Attribute2, VARIANT * p_Attribute3, VARIANT * p_AutoAnswerCalls ) {
    HRESULT _hr = raw_GetACDOptions(p_Cost, p_Attribute1, p_Attribute2, p_Attribute3, p_AutoAnswerCalls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(476)
inline HRESULT EICClientCOMLib::IEICDSUser::SetACDOptions ( const _variant_t & p_Cost, const _variant_t & p_Attribute1, const _variant_t & p_Attribute2, const _variant_t & p_Attribute3, const _variant_t & p_AutoAnswerCalls ) {
    HRESULT _hr = raw_SetACDOptions(p_Cost, p_Attribute1, p_Attribute2, p_Attribute3, p_AutoAnswerCalls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(477)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDSUser::GetSkills ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Skills(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(478)
inline HRESULT EICClientCOMLib::IEICDSUser::AddSkill ( _bstr_t p_SkillName ) {
    HRESULT _hr = raw_AddSkill(p_SkillName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(479)
inline HRESULT EICClientCOMLib::IEICDSUser::RemoveSkill ( _bstr_t p_SkillName ) {
    HRESULT _hr = raw_RemoveSkill(p_SkillName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(480)
inline HRESULT EICClientCOMLib::IEICDSUser::SetSkill ( _bstr_t p_Name, long p_Proficiency, long p_DesireToUse ) {
    HRESULT _hr = raw_SetSkill(p_Name, p_Proficiency, p_DesireToUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(481)
inline HRESULT EICClientCOMLib::IEICDSUser::GetSkill ( _bstr_t p_Name, long * p_Proficiency, long * p_DesireToUse ) {
    HRESULT _hr = raw_GetSkill(p_Name, p_Proficiency, p_DesireToUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(482)
inline HRESULT EICClientCOMLib::IEICDSUser::GetAgentGreeting ( VARIANT_BOOL * p_HasAgentGreeting, BSTR * pVal ) {
    HRESULT _hr = raw_GetAgentGreeting(p_HasAgentGreeting, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(483)
inline HRESULT EICClientCOMLib::IEICDSUser::SetAgentGreeting ( VARIANT_BOOL p_HasAgentGreeting, _bstr_t p_AgentGreeting ) {
    HRESULT _hr = raw_SetAgentGreeting(p_HasAgentGreeting, p_AgentGreeting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(484)
inline HRESULT EICClientCOMLib::IEICDSUser::GetSMDI ( VARIANT * p_MWIEnabled, VARIANT * p_MWIPhoneNumber, VARIANT * p_SMDIPort ) {
    HRESULT _hr = raw_GetSMDI(p_MWIEnabled, p_MWIPhoneNumber, p_SMDIPort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(485)
inline HRESULT EICClientCOMLib::IEICDSUser::SetSMDI ( const _variant_t & p_MWIEnabled, const _variant_t & p_MWIPhoneNumber, const _variant_t & p_SMDIPort ) {
    HRESULT _hr = raw_SetSMDI(p_MWIEnabled, p_MWIPhoneNumber, p_SMDIPort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(486)
inline HRESULT EICClientCOMLib::IEICDSUser::GetClientNotification ( VARIANT * p_RingTelephone, VARIANT * p_RingComputer, VARIANT * p_PopClientWindow, VARIANT * p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_GetClientNotification(p_RingTelephone, p_RingComputer, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(487)
inline HRESULT EICClientCOMLib::IEICDSUser::SetClientNotification ( const _variant_t & p_RingTelephone, const _variant_t & p_RingComputer, const _variant_t & p_PopClientWindow, const _variant_t & p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_SetClientNotification(p_RingTelephone, p_RingComputer, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(488)
inline HRESULT EICClientCOMLib::IEICDSUser::GetNewChatOptions ( VARIANT * p_PlaySound, VARIANT * p_PopClientWindow, VARIANT * p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_GetNewChatOptions(p_PlaySound, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(489)
inline HRESULT EICClientCOMLib::IEICDSUser::SetNewChatOptions ( const _variant_t & p_PlaySound, const _variant_t & p_PopClientWindow, const _variant_t & p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_SetNewChatOptions(p_PlaySound, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(490)
inline HRESULT EICClientCOMLib::IEICDSUser::GetNewChatTextOptions ( VARIANT * p_PlaySound, VARIANT * p_PopClientWindow, VARIANT * p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_GetNewChatTextOptions(p_PlaySound, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(491)
inline HRESULT EICClientCOMLib::IEICDSUser::SetNewChatTextOptions ( const _variant_t & p_PlaySound, const _variant_t & p_PopClientWindow, const _variant_t & p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_SetNewChatTextOptions(p_PlaySound, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(492)
inline long EICClientCOMLib::IEICDSUser::GetOfferingCallTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_OfferingCallTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(493)
inline void EICClientCOMLib::IEICDSUser::PutOfferingCallTimeout ( long pVal ) {
    HRESULT _hr = put_OfferingCallTimeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(494)
inline HRESULT EICClientCOMLib::IEICDSUser::GetActions ( VARIANT * p_AlertingAction, VARIANT * p_DisconnectedAction ) {
    HRESULT _hr = raw_GetActions(p_AlertingAction, p_DisconnectedAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(495)
inline HRESULT EICClientCOMLib::IEICDSUser::SetActions ( const _variant_t & p_AlertingAction, const _variant_t & p_DisconnectedAction ) {
    HRESULT _hr = raw_SetActions(p_AlertingAction, p_DisconnectedAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(496)
inline VARIANT_BOOL EICClientCOMLib::IEICDSUser::GetPagingActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PagingActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(497)
inline void EICClientCOMLib::IEICDSUser::PutPagingActive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PagingActive(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(498)
inline _bstr_t EICClientCOMLib::IEICDSUser::GetPagingCarrier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PagingCarrier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(499)
inline void EICClientCOMLib::IEICDSUser::PutPagingCarrier ( _bstr_t pVal ) {
    HRESULT _hr = put_PagingCarrier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(500)
inline _bstr_t EICClientCOMLib::IEICDSUser::GetPagingPIN ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PagingPIN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(501)
inline void EICClientCOMLib::IEICDSUser::PutPagingPIN ( _bstr_t pVal ) {
    HRESULT _hr = put_PagingPIN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(502)
inline VARIANT_BOOL EICClientCOMLib::IEICDSUser::GetPageAccess ( enum DSPageAccess p_PageAccess ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PageAccess(p_PageAccess, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(503)
inline void EICClientCOMLib::IEICDSUser::PutPageAccess ( enum DSPageAccess p_PageAccess, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PageAccess(p_PageAccess, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(504)
inline VARIANT_BOOL EICClientCOMLib::IEICDSUser::GetUserRights ( enum DSUserRights p_UserRights ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserRights(p_UserRights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(505)
inline void EICClientCOMLib::IEICDSUser::PutUserRights ( enum DSUserRights p_UserRights, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UserRights(p_UserRights, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(506)
inline HRESULT EICClientCOMLib::IEICDSUser::GetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * * p_Inherited, struct IEICNames * * p_CurrentAvailable, struct IEICNames * * p_CurrentSelected ) {
    HRESULT _hr = raw_GetAccessControl(p_Category, p_Inherited, p_CurrentAvailable, p_CurrentSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(507)
inline HRESULT EICClientCOMLib::IEICDSUser::SetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * p_CurrentSelected ) {
    HRESULT _hr = raw_SetAccessControl(p_Category, p_CurrentSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(508)
inline _variant_t EICClientCOMLib::IEICDSUser::GetAttribute ( long p_Attribute ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Attribute(p_Attribute, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(509)
inline void EICClientCOMLib::IEICDSUser::PutAttribute ( long p_Attribute, const _variant_t & p_Val ) {
    HRESULT _hr = put_Attribute(p_Attribute, p_Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEICDSWorkgroup wrapper method implementations
//

#pragma implementation_key(510)
inline _bstr_t EICClientCOMLib::IEICDSWorkgroup::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(511)
inline void EICClientCOMLib::IEICDSWorkgroup::PutExtension ( _bstr_t pVal ) {
    HRESULT _hr = put_Extension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(512)
inline _bstr_t EICClientCOMLib::IEICDSWorkgroup::GetMailbox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mailbox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(513)
inline void EICClientCOMLib::IEICDSWorkgroup::PutMailbox ( _bstr_t pVal ) {
    HRESULT _hr = put_Mailbox(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(514)
inline _bstr_t EICClientCOMLib::IEICDSWorkgroup::GetMailboxDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailboxDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(515)
inline void EICClientCOMLib::IEICDSWorkgroup::PutMailboxDisplayName ( _bstr_t pVal ) {
    HRESULT _hr = put_MailboxDisplayName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(516)
inline _bstr_t EICClientCOMLib::IEICDSWorkgroup::GetIcon ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(517)
inline void EICClientCOMLib::IEICDSWorkgroup::PutIcon ( _bstr_t pVal ) {
    HRESULT _hr = put_Icon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(518)
inline _bstr_t EICClientCOMLib::IEICDSWorkgroup::GetRingSound ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RingSound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(519)
inline void EICClientCOMLib::IEICDSWorkgroup::PutRingSound ( _bstr_t pVal ) {
    HRESULT _hr = put_RingSound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(520)
inline _bstr_t EICClientCOMLib::IEICDSWorkgroup::GetChatSound ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatSound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(521)
inline void EICClientCOMLib::IEICDSWorkgroup::PutChatSound ( _bstr_t pVal ) {
    HRESULT _hr = put_ChatSound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(522)
inline _bstr_t EICClientCOMLib::IEICDSWorkgroup::GetOnHoldMusic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnHoldMusic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(523)
inline void EICClientCOMLib::IEICDSWorkgroup::PutOnHoldMusic ( _bstr_t pVal ) {
    HRESULT _hr = put_OnHoldMusic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(524)
inline VARIANT_BOOL EICClientCOMLib::IEICDSWorkgroup::GetHasQueue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasQueue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(525)
inline void EICClientCOMLib::IEICDSWorkgroup::PutHasQueue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HasQueue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(526)
inline VARIANT_BOOL EICClientCOMLib::IEICDSWorkgroup::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(527)
inline void EICClientCOMLib::IEICDSWorkgroup::PutActive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Active(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(528)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDSWorkgroup::GetUsers ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Users(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(529)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::AddUser ( _bstr_t p_Id ) {
    HRESULT _hr = raw_AddUser(p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(530)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::RemoveUser ( _bstr_t p_Id ) {
    HRESULT _hr = raw_RemoveUser(p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(531)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDSWorkgroup::GetSkills ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Skills(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(532)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::AddSkill ( _bstr_t p_SkillName ) {
    HRESULT _hr = raw_AddSkill(p_SkillName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(533)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::RemoveSkill ( _bstr_t p_SkillName ) {
    HRESULT _hr = raw_RemoveSkill(p_SkillName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(534)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::SetSkill ( _bstr_t p_Name, long p_Proficiency, long p_DesireToUse ) {
    HRESULT _hr = raw_SetSkill(p_Name, p_Proficiency, p_DesireToUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(535)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::GetSkill ( _bstr_t p_Name, long * p_Proficiency, long * p_DesireToUse ) {
    HRESULT _hr = raw_GetSkill(p_Name, p_Proficiency, p_DesireToUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(536)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::GetACDActions ( VARIANT * p_AlertingAction, VARIANT * p_DisconnectedAction, VARIANT * p_TransferAction, VARIANT * p_IncomingTransferAction ) {
    HRESULT _hr = raw_GetACDActions(p_AlertingAction, p_DisconnectedAction, p_TransferAction, p_IncomingTransferAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(537)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::SetACDActions ( const _variant_t & p_AlertingAction, const _variant_t & p_DisconnectedAction, const _variant_t & p_TransferAction, const _variant_t & p_IncomingTransferAction ) {
    HRESULT _hr = raw_SetACDActions(p_AlertingAction, p_DisconnectedAction, p_TransferAction, p_IncomingTransferAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(538)
inline VARIANT_BOOL EICClientCOMLib::IEICDSWorkgroup::GetExecuteTransferActionOnUserTransfer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExecuteTransferActionOnUserTransfer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(539)
inline void EICClientCOMLib::IEICDSWorkgroup::PutExecuteTransferActionOnUserTransfer ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExecuteTransferActionOnUserTransfer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(540)
inline _bstr_t EICClientCOMLib::IEICDSWorkgroup::GetNoAnswerStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoAnswerStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(541)
inline void EICClientCOMLib::IEICDSWorkgroup::PutNoAnswerStatus ( _bstr_t pVal ) {
    HRESULT _hr = put_NoAnswerStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(542)
inline _bstr_t EICClientCOMLib::IEICDSWorkgroup::GetOnCallStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnCallStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(543)
inline void EICClientCOMLib::IEICDSWorkgroup::PutOnCallStatus ( _bstr_t pVal ) {
    HRESULT _hr = put_OnCallStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(544)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::GetWrapup ( long * p_WrapupTime, BSTR * p_WrapupStatus ) {
    HRESULT _hr = raw_GetWrapup(p_WrapupTime, p_WrapupStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(545)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::SetWrapup ( long p_WrapupTime, _bstr_t p_WrapupStatus ) {
    HRESULT _hr = raw_SetWrapup(p_WrapupTime, p_WrapupStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(546)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::GetActions ( VARIANT * p_AlertingAction, VARIANT * p_DisconnectedAction ) {
    HRESULT _hr = raw_GetActions(p_AlertingAction, p_DisconnectedAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(547)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::SetActions ( const _variant_t & p_AlertingAction, const _variant_t & p_DisconnectedAction ) {
    HRESULT _hr = raw_SetActions(p_AlertingAction, p_DisconnectedAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(548)
inline long EICClientCOMLib::IEICDSWorkgroup::GetOfferingCallTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_OfferingCallTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(549)
inline void EICClientCOMLib::IEICDSWorkgroup::PutOfferingCallTimeout ( long pVal ) {
    HRESULT _hr = put_OfferingCallTimeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(550)
inline VARIANT_BOOL EICClientCOMLib::IEICDSWorkgroup::GetPagingActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PagingActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(551)
inline void EICClientCOMLib::IEICDSWorkgroup::PutPagingActive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PagingActive(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(552)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::GetCallStatistics ( VARIANT * p_StatisticsPeriod, VARIANT * p_EstimatedCallTimeInterval ) {
    HRESULT _hr = raw_GetCallStatistics(p_StatisticsPeriod, p_EstimatedCallTimeInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(553)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::SetCallStatistics ( const _variant_t & p_StatisticsPeriod, const _variant_t & p_EstimatedCallTimeInterval ) {
    HRESULT _hr = raw_SetCallStatistics(p_StatisticsPeriod, p_EstimatedCallTimeInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(554)
inline _variant_t EICClientCOMLib::IEICDSWorkgroup::GetStatisticsShiftStarts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StatisticsShiftStarts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(555)
inline void EICClientCOMLib::IEICDSWorkgroup::PutStatisticsShiftStarts ( const _variant_t & pVal ) {
    HRESULT _hr = put_StatisticsShiftStarts(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(556)
inline VARIANT_BOOL EICClientCOMLib::IEICDSWorkgroup::GetPageAccess ( enum DSPageAccess p_PageAccess ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PageAccess(p_PageAccess, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(557)
inline void EICClientCOMLib::IEICDSWorkgroup::PutPageAccess ( enum DSPageAccess p_PageAccess, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PageAccess(p_PageAccess, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(558)
inline VARIANT_BOOL EICClientCOMLib::IEICDSWorkgroup::GetUserRights ( enum DSUserRights p_UserRights ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserRights(p_UserRights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(559)
inline void EICClientCOMLib::IEICDSWorkgroup::PutUserRights ( enum DSUserRights p_UserRights, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UserRights(p_UserRights, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(560)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::GetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * * p_Inherited, struct IEICNames * * p_CurrentAvailable, struct IEICNames * * p_CurrentSelected ) {
    HRESULT _hr = raw_GetAccessControl(p_Category, p_Inherited, p_CurrentAvailable, p_CurrentSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(561)
inline HRESULT EICClientCOMLib::IEICDSWorkgroup::SetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * p_CurrentSelected ) {
    HRESULT _hr = raw_SetAccessControl(p_Category, p_CurrentSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDSStation wrapper method implementations
//

#pragma implementation_key(562)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(563)
inline void EICClientCOMLib::IEICDSStation::PutExtension ( _bstr_t pVal ) {
    HRESULT _hr = put_Extension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(564)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(565)
inline void EICClientCOMLib::IEICDSStation::PutType ( _bstr_t pVal ) {
    HRESULT _hr = put_Type(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(566)
inline int EICClientCOMLib::IEICDSStation::GetPortNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_PortNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(567)
inline void EICClientCOMLib::IEICDSStation::PutPortNumber ( int pVal ) {
    HRESULT _hr = put_PortNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(568)
inline int EICClientCOMLib::IEICDSStation::GetBoardNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_BoardNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(569)
inline void EICClientCOMLib::IEICDSStation::PutBoardNumber ( int pVal ) {
    HRESULT _hr = put_BoardNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(570)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetChannel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Channel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(571)
inline void EICClientCOMLib::IEICDSStation::PutChannel ( _bstr_t pVal ) {
    HRESULT _hr = put_Channel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(572)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetDriver ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Driver(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(573)
inline void EICClientCOMLib::IEICDSStation::PutDriver ( _bstr_t pVal ) {
    HRESULT _hr = put_Driver(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(574)
inline VARIANT_BOOL EICClientCOMLib::IEICDSStation::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(575)
inline void EICClientCOMLib::IEICDSStation::PutActive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Active(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline VARIANT_BOOL EICClientCOMLib::IEICDSStation::GetRingAlways ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RingAlways(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline void EICClientCOMLib::IEICDSStation::PutRingAlways ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RingAlways(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(578)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetRemotePhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemotePhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(579)
inline void EICClientCOMLib::IEICDSStation::PutRemotePhone ( _bstr_t pVal ) {
    HRESULT _hr = put_RemotePhone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetRemoteLineGroup ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteLineGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(581)
inline void EICClientCOMLib::IEICDSStation::PutRemoteLineGroup ( _bstr_t pVal ) {
    HRESULT _hr = put_RemoteLineGroup(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetNode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Node(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(583)
inline void EICClientCOMLib::IEICDSStation::PutNode ( _bstr_t pVal ) {
    HRESULT _hr = put_Node(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(584)
inline int EICClientCOMLib::IEICDSStation::GetVoiceResource ( ) {
    int _result = 0;
    HRESULT _hr = get_VoiceResource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(585)
inline void EICClientCOMLib::IEICDSStation::PutVoiceResource ( int pVal ) {
    HRESULT _hr = put_VoiceResource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(586)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetADSI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ADSI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(587)
inline void EICClientCOMLib::IEICDSStation::PutADSI ( _bstr_t pVal ) {
    HRESULT _hr = put_ADSI(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(588)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetFSKType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FSKType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(589)
inline void EICClientCOMLib::IEICDSStation::PutFSKType ( _bstr_t pVal ) {
    HRESULT _hr = put_FSKType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(590)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetConnectionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(591)
inline void EICClientCOMLib::IEICDSStation::PutConnectionType ( _bstr_t pVal ) {
    HRESULT _hr = put_ConnectionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(592)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(593)
inline void EICClientCOMLib::IEICDSStation::PutLine ( _bstr_t pVal ) {
    HRESULT _hr = put_Line(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(594)
inline _bstr_t EICClientCOMLib::IEICDSStation::GetIPAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IPAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(595)
inline void EICClientCOMLib::IEICDSStation::PutIPAddress ( _bstr_t pVal ) {
    HRESULT _hr = put_IPAddress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(596)
inline EICClientCOMLib::IEICNamesPtr EICClientCOMLib::IEICDSStation::GetAccess ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Access(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

#pragma implementation_key(597)
inline void EICClientCOMLib::IEICDSStation::PutAccess ( struct IEICNames * pVal ) {
    HRESULT _hr = put_Access(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEICDSStationEx wrapper method implementations
//

#pragma implementation_key(598)
inline HRESULT EICClientCOMLib::IEICDSStationEx::SaveAttributesAndSetLicenses ( ) {
    HRESULT _hr = raw_SaveAttributesAndSetLicenses();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICGenericObject2 wrapper method implementations
//

#pragma implementation_key(599)
inline int EICClientCOMLib::IEICGenericObject2::CreateNew ( _bstr_t p_QueueName, int p_QueueType, enum EICQueueObjectStates p_State, int p_Direction, int p_RemotePartyType, int p_LocalPartyType, _bstr_t p_RemoteName, _bstr_t p_RemoteId, _bstr_t p_LocalLocation ) {
    int _result = 0;
    HRESULT _hr = raw_CreateNew(p_QueueName, p_QueueType, p_State, p_Direction, p_RemotePartyType, p_LocalPartyType, p_RemoteName, p_RemoteId, p_LocalLocation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICUserStatus wrapper method implementations
//

#pragma implementation_key(600)
inline _bstr_t EICClientCOMLib::IEICUserStatus::GetStatusMessage ( _bstr_t p_User ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusMessage(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(601)
inline _bstr_t EICClientCOMLib::IEICUserStatus::GetStatusKey ( _bstr_t p_User ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusKey(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(602)
inline DATE EICClientCOMLib::IEICUserStatus::GetUntilDateTime ( _bstr_t p_User ) {
    DATE _result = 0;
    HRESULT _hr = get_UntilDateTime(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(603)
inline VARIANT_BOOL EICClientCOMLib::IEICUserStatus::GetisDND ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isDND(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(604)
inline VARIANT_BOOL EICClientCOMLib::IEICUserStatus::GethasDate ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_hasDate(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(605)
inline VARIANT_BOOL EICClientCOMLib::IEICUserStatus::GethasTime ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_hasTime(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(606)
inline VARIANT_BOOL EICClientCOMLib::IEICUserStatus::GetIsLoggedIn ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoggedIn(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(607)
inline VARIANT_BOOL EICClientCOMLib::IEICUserStatus::GetisOnPhone ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isOnPhone(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICCampEvent wrapper method implementations
//

#pragma implementation_key(608)
inline HRESULT EICClientCOMLib::IEICCampEvent::CampEvent ( _bstr_t p_UserId, long p_EventId ) {
    HRESULT _hr = raw_CampEvent(p_UserId, p_EventId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCampMonitor wrapper method implementations
//

#pragma implementation_key(609)
inline HRESULT EICClientCOMLib::IEICCampMonitor::StartCamp ( _bstr_t p_UserId ) {
    HRESULT _hr = raw_StartCamp(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(610)
inline HRESULT EICClientCOMLib::IEICCampMonitor::EndCamp ( _bstr_t p_UserId ) {
    HRESULT _hr = raw_EndCamp(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(611)
inline HRESULT EICClientCOMLib::IEICCampMonitor::EndAllCamp ( ) {
    HRESULT _hr = raw_EndAllCamp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(612)
inline HRESULT EICClientCOMLib::IEICCampMonitor::SetMarshalledCallback ( struct IEICCampEvent * p_Handler ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(613)
inline HRESULT EICClientCOMLib::IEICCampMonitor::SetThreadCallback ( struct IEICCampEvent * p_Handler ) {
    HRESULT _hr = raw_SetThreadCallback(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueObject2WatcherAdapter wrapper method implementations
//

#pragma implementation_key(614)
inline void EICClientCOMLib::IEICQueueObject2WatcherAdapter::PutStateChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_StateChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(615)
inline void EICClientCOMLib::IEICQueueObject2WatcherAdapter::PutSubObjectChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_SubObjectChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(616)
inline void EICClientCOMLib::IEICQueueObject2WatcherAdapter::PutObjectSpecificErrorFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectSpecificErrorFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(617)
inline void EICClientCOMLib::IEICQueueObject2WatcherAdapter::PutObjectDestroyedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectDestroyedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(618)
inline _variant_t EICClientCOMLib::IEICQueueObject2WatcherAdapter::GetStateChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StateChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(619)
inline _variant_t EICClientCOMLib::IEICQueueObject2WatcherAdapter::GetSubObjectChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SubObjectChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(620)
inline _variant_t EICClientCOMLib::IEICQueueObject2WatcherAdapter::GetObjectSpecificErrorFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectSpecificErrorFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(621)
inline _variant_t EICClientCOMLib::IEICQueueObject2WatcherAdapter::GetObjectDestroyedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectDestroyedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICChatObject2WatcherAdapter wrapper method implementations
//

#pragma implementation_key(622)
inline void EICClientCOMLib::IEICChatObject2WatcherAdapter::PutStateChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_StateChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(623)
inline void EICClientCOMLib::IEICChatObject2WatcherAdapter::PutSubObjectChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_SubObjectChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(624)
inline void EICClientCOMLib::IEICChatObject2WatcherAdapter::PutObjectSpecificErrorFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectSpecificErrorFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(625)
inline void EICClientCOMLib::IEICChatObject2WatcherAdapter::PutObjectDestroyedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectDestroyedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(626)
inline void EICClientCOMLib::IEICChatObject2WatcherAdapter::PutReceivedStringFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ReceivedStringFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(627)
inline void EICClientCOMLib::IEICChatObject2WatcherAdapter::PutReceivedUrlFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ReceivedUrlFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(628)
inline void EICClientCOMLib::IEICChatObject2WatcherAdapter::PutReceivedFileFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ReceivedFileFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(629)
inline _variant_t EICClientCOMLib::IEICChatObject2WatcherAdapter::GetStateChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StateChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(630)
inline _variant_t EICClientCOMLib::IEICChatObject2WatcherAdapter::GetSubObjectChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SubObjectChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(631)
inline _variant_t EICClientCOMLib::IEICChatObject2WatcherAdapter::GetObjectSpecificErrorFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectSpecificErrorFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(632)
inline _variant_t EICClientCOMLib::IEICChatObject2WatcherAdapter::GetObjectDestroyedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectDestroyedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(633)
inline _variant_t EICClientCOMLib::IEICChatObject2WatcherAdapter::GetReceivedStringFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReceivedStringFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(634)
inline _variant_t EICClientCOMLib::IEICChatObject2WatcherAdapter::GetReceivedUrlFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReceivedUrlFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(635)
inline _variant_t EICClientCOMLib::IEICChatObject2WatcherAdapter::GetReceivedFileFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReceivedFileFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICCallObject2WatcherAdapter wrapper method implementations
//

#pragma implementation_key(636)
inline void EICClientCOMLib::IEICCallObject2WatcherAdapter::PutStateChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_StateChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(637)
inline void EICClientCOMLib::IEICCallObject2WatcherAdapter::PutSubObjectChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_SubObjectChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(638)
inline void EICClientCOMLib::IEICCallObject2WatcherAdapter::PutObjectSpecificErrorFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectSpecificErrorFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(639)
inline void EICClientCOMLib::IEICCallObject2WatcherAdapter::PutObjectDestroyedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectDestroyedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(640)
inline void EICClientCOMLib::IEICCallObject2WatcherAdapter::PutStatusChangeFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_StatusChangeFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(641)
inline _variant_t EICClientCOMLib::IEICCallObject2WatcherAdapter::GetStateChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StateChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(642)
inline _variant_t EICClientCOMLib::IEICCallObject2WatcherAdapter::GetSubObjectChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SubObjectChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(643)
inline _variant_t EICClientCOMLib::IEICCallObject2WatcherAdapter::GetObjectSpecificErrorFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectSpecificErrorFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(644)
inline _variant_t EICClientCOMLib::IEICCallObject2WatcherAdapter::GetObjectDestroyedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectDestroyedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(645)
inline _variant_t EICClientCOMLib::IEICCallObject2WatcherAdapter::GetStatusChangeFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StatusChangeFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICWorkgroup2 wrapper method implementations
//

#pragma implementation_key(646)
inline HRESULT EICClientCOMLib::IEICWorkgroup2::SetMarshalledCallback ( IUnknown * p_Watcher, VARIANT_BOOL p_WatchIndividuals ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher, p_WatchIndividuals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(647)
inline HRESULT EICClientCOMLib::IEICWorkgroup2::SetThreadCallback ( IUnknown * p_Watcher, VARIANT_BOOL p_WatchIndividuals ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher, p_WatchIndividuals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCallObject2 wrapper method implementations
//

#pragma implementation_key(648)
inline HRESULT EICClientCOMLib::IEICCallObject2::PlayDigits ( _bstr_t p_StringOfDigits ) {
    HRESULT _hr = raw_PlayDigits(p_StringOfDigits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(649)
inline HRESULT EICClientCOMLib::IEICCallObject2::ExtendedDial ( _bstr_t p_Number, short p_TimeoutSecs, VARIANT_BOOL p_CallAnalysis, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_ExtendedDial(p_Number, p_TimeoutSecs, p_CallAnalysis, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(650)
inline HRESULT EICClientCOMLib::IEICCallObject2::Dial ( _bstr_t p_Number, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_Dial(p_Number, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(651)
inline HRESULT EICClientCOMLib::IEICCallObject2::ExtendedDialForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_Number, short p_TimeoutSecs, VARIANT_BOOL p_CallAnalysis, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_ExtendedDialForUser(p_User, p_Station, p_Number, p_TimeoutSecs, p_CallAnalysis, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(652)
inline HRESULT EICClientCOMLib::IEICCallObject2::DialForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_Number, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_DialForUser(p_User, p_Station, p_Number, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(653)
inline HRESULT EICClientCOMLib::IEICCallObject2::DialError ( long p_Error ) {
    HRESULT _hr = raw_DialError(p_Error);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICConferenceObject2 wrapper method implementations
//

#pragma implementation_key(654)
inline HRESULT EICClientCOMLib::IEICConferenceObject2::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(655)
inline HRESULT EICClientCOMLib::IEICConferenceObject2::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(656)
inline HRESULT EICClientCOMLib::IEICConferenceObject2::SendTextMessage ( _bstr_t p_Msg ) {
    HRESULT _hr = raw_SendTextMessage(p_Msg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(657)
inline HRESULT EICClientCOMLib::IEICConferenceObject2::SendTextMessageForUser ( _bstr_t p_UserId, _bstr_t p_Msg ) {
    HRESULT _hr = raw_SendTextMessageForUser(p_UserId, p_Msg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(658)
inline HRESULT EICClientCOMLib::IEICConferenceObject2::GetCurrentText ( BSTR * p_Msgs ) {
    HRESULT _hr = raw_GetCurrentText(p_Msgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(659)
inline HRESULT EICClientCOMLib::IEICConferenceObject2::Create ( struct IEICCallObject2 * p_Call ) {
    HRESULT _hr = raw_Create(p_Call);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(660)
inline HRESULT EICClientCOMLib::IEICConferenceObject2::Add ( struct IEICCallObject2 * p_Call ) {
    HRESULT _hr = raw_Add(p_Call);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICEmailObject2 wrapper method implementations
//

#pragma implementation_key(661)
inline _bstr_t EICClientCOMLib::IEICEmailObject2::GetFrom ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(662)
inline _bstr_t EICClientCOMLib::IEICEmailObject2::GetSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(663)
inline _variant_t EICClientCOMLib::IEICEmailObject2::GetToList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ToList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(664)
inline _variant_t EICClientCOMLib::IEICEmailObject2::GetCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(665)
inline _variant_t EICClientCOMLib::IEICEmailObject2::GetBCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BCCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(666)
inline _variant_t EICClientCOMLib::IEICEmailObject2::GetReplyList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReplyList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(667)
inline _bstr_t EICClientCOMLib::IEICEmailObject2::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(668)
inline _bstr_t EICClientCOMLib::IEICEmailObject2::GetTextBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(669)
inline _bstr_t EICClientCOMLib::IEICEmailObject2::GetImportance ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(670)
inline _bstr_t EICClientCOMLib::IEICEmailObject2::GetContentType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(671)
inline _variant_t EICClientCOMLib::IEICEmailObject2::GetDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(672)
inline HRESULT EICClientCOMLib::IEICEmailObject2::SaveAttachment ( _bstr_t attachmentFilePath, long Index ) {
    HRESULT _hr = raw_SaveAttachment(attachmentFilePath, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(673)
inline int EICClientCOMLib::IEICEmailObject2::GetNumAttachments ( ) {
    int _result = 0;
    HRESULT _hr = get_NumAttachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(674)
inline _bstr_t EICClientCOMLib::IEICEmailObject2::GetAttachmentName ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttachmentName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IEICEmailObject2Response wrapper method implementations
//

#pragma implementation_key(675)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Response::GetResponseFrom ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(676)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Response::GetResponseSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseSenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(677)
inline _variant_t EICClientCOMLib::IEICEmailObject2Response::GetResponseToList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseToList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(678)
inline _variant_t EICClientCOMLib::IEICEmailObject2Response::GetResponseCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseCCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(679)
inline _variant_t EICClientCOMLib::IEICEmailObject2Response::GetResponseBCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseBCCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(680)
inline _variant_t EICClientCOMLib::IEICEmailObject2Response::GetResponseReplyList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseReplyList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(681)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Response::GetResponseSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(682)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Response::GetResponseTextBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseTextBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(683)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Response::GetResponseImportance ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseImportance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(684)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Response::GetResponseContentType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseContentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(685)
inline _variant_t EICClientCOMLib::IEICEmailObject2Response::GetResponseDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(686)
inline VARIANT_BOOL EICClientCOMLib::IEICEmailObject2Response::GetResponseDirty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResponseDirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(687)
inline void EICClientCOMLib::IEICEmailObject2Response::PutResponseFrom ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseFrom(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(688)
inline void EICClientCOMLib::IEICEmailObject2Response::PutResponseSenderName ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseSenderName(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(689)
inline void EICClientCOMLib::IEICEmailObject2Response::PutResponseToList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseToList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(690)
inline void EICClientCOMLib::IEICEmailObject2Response::PutResponseCCList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseCCList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(691)
inline void EICClientCOMLib::IEICEmailObject2Response::PutResponseBCCList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseBCCList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(692)
inline void EICClientCOMLib::IEICEmailObject2Response::PutResponseReplyList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseReplyList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(693)
inline void EICClientCOMLib::IEICEmailObject2Response::PutResponseSubject ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseSubject(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(694)
inline void EICClientCOMLib::IEICEmailObject2Response::PutResponseTextBody ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseTextBody(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(695)
inline void EICClientCOMLib::IEICEmailObject2Response::PutResponseImportance ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseImportance(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(696)
inline void EICClientCOMLib::IEICEmailObject2Response::PutResponseContentType ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseContentType(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(697)
inline void EICClientCOMLib::IEICEmailObject2Response::PutResponseDate ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseDate(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(698)
inline HRESULT EICClientCOMLib::IEICEmailObject2Response::SaveResponse ( ) {
    HRESULT _hr = raw_SaveResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(699)
inline HRESULT EICClientCOMLib::IEICEmailObject2Response::SendResponse ( ) {
    HRESULT _hr = raw_SendResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(700)
inline HRESULT EICClientCOMLib::IEICEmailObject2Response::ClearResponse ( ) {
    HRESULT _hr = raw_ClearResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(701)
inline HRESULT EICClientCOMLib::IEICEmailObject2Response::RemoveResponseAttachment ( long Index ) {
    HRESULT _hr = raw_RemoveResponseAttachment(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(702)
inline HRESULT EICClientCOMLib::IEICEmailObject2Response::InsertResponseAttachment ( _bstr_t Name, _bstr_t Path, long Index ) {
    HRESULT _hr = raw_InsertResponseAttachment(Name, Path, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICEmailObject2Ex wrapper method implementations
//

#pragma implementation_key(703)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Ex::GetResponseFrom ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(704)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Ex::GetResponseSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseSenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(705)
inline _variant_t EICClientCOMLib::IEICEmailObject2Ex::GetResponseToList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseToList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(706)
inline _variant_t EICClientCOMLib::IEICEmailObject2Ex::GetResponseCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseCCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(707)
inline _variant_t EICClientCOMLib::IEICEmailObject2Ex::GetResponseBCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseBCCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(708)
inline _variant_t EICClientCOMLib::IEICEmailObject2Ex::GetResponseReplyList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseReplyList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(709)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Ex::GetResponseSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(710)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Ex::GetResponseTextBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseTextBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(711)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Ex::GetResponseImportance ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseImportance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(712)
inline _bstr_t EICClientCOMLib::IEICEmailObject2Ex::GetResponseContentType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseContentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(713)
inline _variant_t EICClientCOMLib::IEICEmailObject2Ex::GetResponseDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(714)
inline VARIANT_BOOL EICClientCOMLib::IEICEmailObject2Ex::GetResponseDirty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResponseDirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(715)
inline void EICClientCOMLib::IEICEmailObject2Ex::PutResponseFrom ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseFrom(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(716)
inline void EICClientCOMLib::IEICEmailObject2Ex::PutResponseSenderName ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseSenderName(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(717)
inline void EICClientCOMLib::IEICEmailObject2Ex::PutResponseToList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseToList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(718)
inline void EICClientCOMLib::IEICEmailObject2Ex::PutResponseCCList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseCCList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(719)
inline void EICClientCOMLib::IEICEmailObject2Ex::PutResponseBCCList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseBCCList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(720)
inline void EICClientCOMLib::IEICEmailObject2Ex::PutResponseReplyList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseReplyList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(721)
inline void EICClientCOMLib::IEICEmailObject2Ex::PutResponseSubject ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseSubject(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(722)
inline void EICClientCOMLib::IEICEmailObject2Ex::PutResponseTextBody ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseTextBody(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(723)
inline void EICClientCOMLib::IEICEmailObject2Ex::PutResponseImportance ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseImportance(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(724)
inline void EICClientCOMLib::IEICEmailObject2Ex::PutResponseContentType ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseContentType(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(725)
inline void EICClientCOMLib::IEICEmailObject2Ex::PutResponseDate ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseDate(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(726)
inline HRESULT EICClientCOMLib::IEICEmailObject2Ex::SaveResponse ( ) {
    HRESULT _hr = raw_SaveResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(727)
inline HRESULT EICClientCOMLib::IEICEmailObject2Ex::SendResponse ( ) {
    HRESULT _hr = raw_SendResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(728)
inline HRESULT EICClientCOMLib::IEICEmailObject2Ex::ClearResponse ( ) {
    HRESULT _hr = raw_ClearResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(729)
inline HRESULT EICClientCOMLib::IEICEmailObject2Ex::RemoveResponseAttachment ( long Index ) {
    HRESULT _hr = raw_RemoveResponseAttachment(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(730)
inline HRESULT EICClientCOMLib::IEICEmailObject2Ex::InsertResponseAttachment ( _bstr_t Name, _bstr_t Path, long Index ) {
    HRESULT _hr = raw_InsertResponseAttachment(Name, Path, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueObjectWatcherAdapter wrapper method implementations
//

#pragma implementation_key(731)
inline HRESULT EICClientCOMLib::IEICQueueObjectWatcherAdapter::StateChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = raw_StateChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(732)
inline HRESULT EICClientCOMLib::IEICQueueObjectWatcherAdapter::ObjectSpecificChangeFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = raw_ObjectSpecificChangeFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(733)
inline HRESULT EICClientCOMLib::IEICQueueObjectWatcherAdapter::ObjectDestroyedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = raw_ObjectDestroyedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(734)
inline HRESULT EICClientCOMLib::IEICQueueObjectWatcherAdapter::ObjectSpecificErrorFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = raw_ObjectSpecificErrorFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(735)
inline HRESULT EICClientCOMLib::IEICQueueObjectWatcherAdapter::SubObjectChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = raw_SubObjectChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCallAcoustics wrapper method implementations
//

#pragma implementation_key(736)
inline HRESULT EICClientCOMLib::IEICCallAcoustics::PlayTone ( struct IEICCallObject2 * p_Call, short p_Frequency, short p_Amplitude, short p_Duration ) {
    HRESULT _hr = raw_PlayTone(p_Call, p_Frequency, p_Amplitude, p_Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(737)
inline HRESULT EICClientCOMLib::IEICCallAcoustics::PlayWav ( struct IEICCallObject2 * p_Call, _bstr_t p_WavFile ) {
    HRESULT _hr = raw_PlayWav(p_Call, p_WavFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(738)
inline HRESULT EICClientCOMLib::IEICCallAcoustics::PlayString ( struct IEICCallObject2 * p_Call, _bstr_t p_Text ) {
    HRESULT _hr = raw_PlayString(p_Call, p_Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(739)
inline HRESULT EICClientCOMLib::IEICCallAcoustics::PlayDigits ( struct IEICCallObject2 * p_Call, _bstr_t p_Digits ) {
    HRESULT _hr = raw_PlayDigits(p_Call, p_Digits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(740)
inline HRESULT EICClientCOMLib::IEICCallAcoustics::GetDigits ( struct IEICCallObject2 * p_Call, IUnknown * p_Callback ) {
    HRESULT _hr = raw_GetDigits(p_Call, p_Callback);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(741)
inline HRESULT EICClientCOMLib::IEICCallAcoustics::GetTone ( struct IEICCallObject2 * p_Call, IUnknown * p_Callback ) {
    HRESULT _hr = raw_GetTone(p_Call, p_Callback);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(742)
inline HRESULT EICClientCOMLib::IEICCallAcoustics::PlayDualTone ( struct IEICCallObject2 * p_Call, short p_Freq1, short p_Amp1, short p_Freq2, short p_Amp2, short p_Duration ) {
    HRESULT _hr = raw_PlayDualTone(p_Call, p_Freq1, p_Amp1, p_Freq2, p_Amp2, p_Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IIWebCallbackObject wrapper method implementations
//

#pragma implementation_key(743)
inline _bstr_t EICClientCOMLib::IIWebCallbackObject::GetStartTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(744)
inline _bstr_t EICClientCOMLib::IIWebCallbackObject::GetStopTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(745)
inline _bstr_t EICClientCOMLib::IIWebCallbackObject::GetConnectTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(746)
inline _bstr_t EICClientCOMLib::IIWebCallbackObject::GetPhoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(747)
inline EICClientCOMLib::IEICQueue2Ptr EICClientCOMLib::IIWebCallbackObject::GetQueue ( ) {
    struct IEICQueue2 * _result = 0;
    HRESULT _hr = get_Queue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueue2Ptr(_result, false);
}

#pragma implementation_key(748)
inline _bstr_t EICClientCOMLib::IIWebCallbackObject::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IIWebInstantQuestion wrapper method implementations
//

#pragma implementation_key(749)
inline _bstr_t EICClientCOMLib::IIWebInstantQuestion::GetStartTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(750)
inline _bstr_t EICClientCOMLib::IIWebInstantQuestion::GetStopTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(751)
inline _bstr_t EICClientCOMLib::IIWebInstantQuestion::GetConnectTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(752)
inline _bstr_t EICClientCOMLib::IIWebInstantQuestion::GetUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(753)
inline EICClientCOMLib::IEICQueue2Ptr EICClientCOMLib::IIWebInstantQuestion::GetQueue ( ) {
    struct IEICQueue2 * _result = 0;
    HRESULT _hr = get_Queue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueue2Ptr(_result, false);
}

#pragma implementation_key(754)
inline _bstr_t EICClientCOMLib::IIWebInstantQuestion::GetQuestion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Question(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(755)
inline HRESULT EICClientCOMLib::IIWebInstantQuestion::Answer ( _bstr_t p_UserId, _bstr_t p_strMessage ) {
    HRESULT _hr = raw_Answer(p_UserId, p_strMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IIWebWebSession wrapper method implementations
//

#pragma implementation_key(756)
inline _bstr_t EICClientCOMLib::IIWebWebSession::GetStartTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(757)
inline _bstr_t EICClientCOMLib::IIWebWebSession::GetStopTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(758)
inline _bstr_t EICClientCOMLib::IIWebWebSession::GetConnectTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(759)
inline _bstr_t EICClientCOMLib::IIWebWebSession::GetGuid ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Guid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(760)
inline EICClientCOMLib::IEICQueue2Ptr EICClientCOMLib::IIWebWebSession::GetQueue ( ) {
    struct IEICQueue2 * _result = 0;
    HRESULT _hr = get_Queue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueue2Ptr(_result, false);
}

#pragma implementation_key(761)
inline _variant_t EICClientCOMLib::IIWebWebSession::GetUrlHistory ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UrlHistory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(762)
inline _bstr_t EICClientCOMLib::IIWebWebSession::GetRegistrationInfo ( _bstr_t p_Tag ) {
    BSTR _result = 0;
    HRESULT _hr = get_RegistrationInfo(p_Tag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(763)
inline HRESULT EICClientCOMLib::IIWebWebSession::SendPopupMessage ( _bstr_t p_UserId, _bstr_t p_strMessage ) {
    HRESULT _hr = raw_SendPopupMessage(p_UserId, p_strMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(764)
inline HRESULT EICClientCOMLib::IIWebWebSession::SendURL ( _bstr_t p_UserId, _bstr_t p_strUrl ) {
    HRESULT _hr = raw_SendURL(p_UserId, p_strUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(765)
inline HRESULT EICClientCOMLib::IIWebWebSession::RequestChat ( _bstr_t p_UserId ) {
    HRESULT _hr = raw_RequestChat(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IIWebBrowserSync wrapper method implementations
//

#pragma implementation_key(766)
inline _bstr_t EICClientCOMLib::IIWebBrowserSync::GetStartTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(767)
inline _bstr_t EICClientCOMLib::IIWebBrowserSync::GetStopTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(768)
inline _bstr_t EICClientCOMLib::IIWebBrowserSync::GetConnectTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(769)
inline _bstr_t EICClientCOMLib::IIWebBrowserSync::GetUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(770)
inline HRESULT EICClientCOMLib::IIWebBrowserSync::SendURL ( _bstr_t p_UserId, _bstr_t p_URL ) {
    HRESULT _hr = raw_SendURL(p_UserId, p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IIWebBrowserSync2 wrapper method implementations
//

#pragma implementation_key(771)
inline HRESULT EICClientCOMLib::IIWebBrowserSync2::LaunchCoBrowser ( _bstr_t p_User, _bstr_t p_Password ) {
    HRESULT _hr = raw_LaunchCoBrowser(p_User, p_Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICNotification wrapper method implementations
//

#pragma implementation_key(772)
inline HRESULT EICClientCOMLib::IEICNotification::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(773)
inline HRESULT EICClientCOMLib::IEICNotification::SendRequest ( struct IEICNotification * * p_RetVal, long p_TimeoutMilliseconds ) {
    HRESULT _hr = raw_SendRequest(p_RetVal, p_TimeoutMilliseconds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(774)
inline HRESULT EICClientCOMLib::IEICNotification::SendResponse ( struct IEICNotification * p_NotificationData ) {
    HRESULT _hr = raw_SendResponse(p_NotificationData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(775)
inline HRESULT EICClientCOMLib::IEICNotification::PopStringData ( BSTR * pVal ) {
    HRESULT _hr = raw_PopStringData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(776)
inline HRESULT EICClientCOMLib::IEICNotification::PopLongData ( long * pVal ) {
    HRESULT _hr = raw_PopLongData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(777)
inline HRESULT EICClientCOMLib::IEICNotification::PopShortData ( short * pVal ) {
    HRESULT _hr = raw_PopShortData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(778)
inline HRESULT EICClientCOMLib::IEICNotification::PushStringData ( _bstr_t pVal ) {
    HRESULT _hr = raw_PushStringData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(779)
inline HRESULT EICClientCOMLib::IEICNotification::PushLongData ( long pVal ) {
    HRESULT _hr = raw_PushLongData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(780)
inline HRESULT EICClientCOMLib::IEICNotification::PushShortData ( short pVal ) {
    HRESULT _hr = raw_PushShortData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(781)
inline _bstr_t EICClientCOMLib::IEICNotification::GetObjectType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(782)
inline void EICClientCOMLib::IEICNotification::PutObjectType ( _bstr_t pVal ) {
    HRESULT _hr = put_ObjectType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(783)
inline _bstr_t EICClientCOMLib::IEICNotification::GetObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(784)
inline void EICClientCOMLib::IEICNotification::PutObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_ObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(785)
inline _bstr_t EICClientCOMLib::IEICNotification::GetEventName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EventName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(786)
inline void EICClientCOMLib::IEICNotification::PutEventName ( _bstr_t pVal ) {
    HRESULT _hr = put_EventName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(787)
inline VARIANT_BOOL EICClientCOMLib::IEICNotification::GetIsResponse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICServerWatcher wrapper method implementations
//

#pragma implementation_key(788)
inline HRESULT EICClientCOMLib::IEICServerWatcher::ReceivedNotification ( struct IEICNotification * p_Notification ) {
    HRESULT _hr = raw_ReceivedNotification(p_Notification);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICNotificationSink wrapper method implementations
//

#pragma implementation_key(789)
inline HRESULT EICClientCOMLib::IEICNotificationSink::SetWatcher ( struct IEICServerWatcher * p_Watcher, VARIANT_BOOL p_InOwnThread ) {
    HRESULT _hr = raw_SetWatcher(p_Watcher, p_InOwnThread);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(790)
inline HRESULT EICClientCOMLib::IEICNotificationSink::AddEventWatch ( _bstr_t p_Type, _bstr_t p_ObjectName, _bstr_t p_Event ) {
    HRESULT _hr = raw_AddEventWatch(p_Type, p_ObjectName, p_Event);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(791)
inline HRESULT EICClientCOMLib::IEICNotificationSink::RemoveEventWatch ( _bstr_t p_Type, _bstr_t p_ObjectName, _bstr_t p_Event ) {
    HRESULT _hr = raw_RemoveEventWatch(p_Type, p_ObjectName, p_Event);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(792)
inline HRESULT EICClientCOMLib::IEICNotificationSink::AddObjectWatch ( _bstr_t p_Type, _bstr_t p_ObjectName ) {
    HRESULT _hr = raw_AddObjectWatch(p_Type, p_ObjectName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(793)
inline HRESULT EICClientCOMLib::IEICNotificationSink::RemoveObjectWatch ( _bstr_t p_Type, _bstr_t p_ObjectName ) {
    HRESULT _hr = raw_RemoveObjectWatch(p_Type, p_ObjectName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(794)
inline HRESULT EICClientCOMLib::IEICNotificationSink::RemoveAllWatches ( ) {
    HRESULT _hr = raw_RemoveAllWatches();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(795)
inline HRESULT EICClientCOMLib::IEICNotificationSink::SuspendAllWatches ( ) {
    HRESULT _hr = raw_SuspendAllWatches();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(796)
inline HRESULT EICClientCOMLib::IEICNotificationSink::ResumeAllWatches ( ) {
    HRESULT _hr = raw_ResumeAllWatches();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISwitchover wrapper method implementations
//

#pragma implementation_key(797)
inline _bstr_t EICClientCOMLib::ISwitchover::GetBackupName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BackupName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(798)
inline VARIANT_BOOL EICClientCOMLib::ISwitchover::GetBackupServer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackupServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(799)
inline VARIANT_BOOL EICClientCOMLib::ISwitchover::GetRunning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Running(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(800)
inline VARIANT_BOOL EICClientCOMLib::ISwitchover::GetInstalled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Installed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(801)
inline HRESULT EICClientCOMLib::ISwitchover::GetSwitchoverInformation ( BSTR * pBackupMachine, VARIANT_BOOL * pIsBackup ) {
    HRESULT _hr = raw_GetSwitchoverInformation(pBackupMachine, pIsBackup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IACDHelpMonitor wrapper method implementations
//

#pragma implementation_key(802)
inline HRESULT EICClientCOMLib::IACDHelpMonitor::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(803)
inline HRESULT EICClientCOMLib::IACDHelpMonitor::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(804)
inline HRESULT EICClientCOMLib::IACDHelpMonitor::SendResponse ( struct IACDHelpRequest * p_Watcher ) {
    HRESULT _hr = raw_SendResponse(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IUserForwarding wrapper method implementations
//

#pragma implementation_key(805)
inline _bstr_t EICClientCOMLib::IUserForwarding::GetForwardNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ForwardNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(806)
inline void EICClientCOMLib::IUserForwarding::PutForwardNumber ( _bstr_t pVal ) {
    HRESULT _hr = put_ForwardNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(807)
inline _bstr_t EICClientCOMLib::IUserForwarding::GetForwardVoicemail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ForwardVoicemail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(808)
inline void EICClientCOMLib::IUserForwarding::PutForwardVoicemail ( _bstr_t pVal ) {
    HRESULT _hr = put_ForwardVoicemail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(809)
inline enum EICClientCOMLib::ForwardingOptions EICClientCOMLib::IUserForwarding::GetForward ( enum ForwardingCallResults result ) {
    enum ForwardingOptions _result;
    HRESULT _hr = get_Forward(result, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(810)
inline void EICClientCOMLib::IUserForwarding::PutForward ( enum ForwardingCallResults result, enum ForwardingOptions pVal ) {
    HRESULT _hr = put_Forward(result, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEICQueue3 wrapper method implementations
//

#pragma implementation_key(811)
inline HRESULT EICClientCOMLib::IEICQueue3::Activate ( enum EICQueueTypes Type, _bstr_t Name ) {
    HRESULT _hr = raw_Activate(Type, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(812)
inline HRESULT EICClientCOMLib::IEICQueue3::Deactivate ( ) {
    HRESULT _hr = raw_Deactivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(813)
inline HRESULT EICClientCOMLib::IEICQueue3::RequestAttributeUpdateCallback ( const _variant_t & p_attrs ) {
    HRESULT _hr = raw_RequestAttributeUpdateCallback(p_attrs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(814)
inline VARIANT_BOOL EICClientCOMLib::IEICQueue3::Contains ( const _variant_t & InteractionId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(InteractionId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(815)
inline HRESULT EICClientCOMLib::IEICQueue3::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(816)
inline HRESULT EICClientCOMLib::IEICQueue3::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IIWebCallbackObject2 wrapper method implementations
//

#pragma implementation_key(817)
inline VARIANT_BOOL EICClientCOMLib::IIWebCallbackObject2::GetSuccessful ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Successful(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(818)
inline void EICClientCOMLib::IIWebCallbackObject2::PutSuccessful ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Successful(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEICMarshaller wrapper method implementations
//

#pragma implementation_key(819)
inline HRESULT EICClientCOMLib::IEICMarshaller::CallBack ( ) {
    HRESULT _hr = raw_CallBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICServer2Watcher wrapper method implementations
//

#pragma implementation_key(820)
inline HRESULT EICClientCOMLib::IEICServer2Watcher::SwitchOver ( ) {
    HRESULT _hr = raw_SwitchOver();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(821)
inline HRESULT EICClientCOMLib::IEICServer2Watcher::ConnectionLost ( ) {
    HRESULT _hr = raw_ConnectionLost();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(822)
inline HRESULT EICClientCOMLib::IEICServer2Watcher::CSRequestedShutDown ( ) {
    HRESULT _hr = raw_CSRequestedShutDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(823)
inline HRESULT EICClientCOMLib::IEICServer2Watcher::CSShutDown ( ) {
    HRESULT _hr = raw_CSShutDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICServer2 wrapper method implementations
//

#pragma implementation_key(824)
inline long EICClientCOMLib::IEICServer2::FullConnect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_AutoDisconnect, long p_MediaTypes ) {
    long _result = 0;
    HRESULT _hr = raw_FullConnect(p_App, p_Server, p_User, p_Password, p_Station, p_AutoDisconnect, p_MediaTypes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(825)
inline long EICClientCOMLib::IEICServer2::RemoteConnect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_PersistentConnection, VARIANT_BOOL p_AutoDisconnect, long p_MediaTypes ) {
    long _result = 0;
    HRESULT _hr = raw_RemoteConnect(p_App, p_Server, p_User, p_Password, p_Station, p_PersistentConnection, p_AutoDisconnect, p_MediaTypes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(826)
inline long EICClientCOMLib::IEICServer2::NotifierLogin ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, VARIANT_BOOL p_AutoDisconnect ) {
    long _result = 0;
    HRESULT _hr = raw_NotifierLogin(p_App, p_Server, p_User, p_Password, p_AutoDisconnect, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(827)
inline long EICClientCOMLib::IEICServer2::NotifierLoginCheck ( _bstr_t p_User, _bstr_t p_Password ) {
    long _result = 0;
    HRESULT _hr = raw_NotifierLoginCheck(p_User, p_Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(828)
inline long EICClientCOMLib::IEICServer2::CSLogin ( _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, _bstr_t p_InitialStatus, VARIANT_BOOL p_Remote, VARIANT_BOOL p_Persistent, long p_MediaTypes ) {
    long _result = 0;
    HRESULT _hr = raw_CSLogin(p_User, p_Password, p_Station, p_InitialStatus, p_Remote, p_Persistent, p_MediaTypes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(829)
inline HRESULT EICClientCOMLib::IEICServer2::CSLogout ( _bstr_t p_User, _bstr_t p_Station ) {
    HRESULT _hr = raw_CSLogout(p_User, p_Station);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(830)
inline VARIANT_BOOL EICClientCOMLib::IEICServer2::GetRemote ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Remote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(831)
inline VARIANT_BOOL EICClientCOMLib::IEICServer2::GetPersistentRemoteConnection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersistentRemoteConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(832)
inline HRESULT EICClientCOMLib::IEICServer2::SetMarshalledCallback ( struct IEICServer2Watcher * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(833)
inline HRESULT EICClientCOMLib::IEICServer2::SetThreadCallback ( struct IEICServer2Watcher * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(834)
inline _bstr_t EICClientCOMLib::IEICServer2::ServerParameter ( _bstr_t p_Param ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ServerParameter(p_Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(835)
inline _variant_t EICClientCOMLib::IEICServer2::ServerParameterList ( const _variant_t & p_Params ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ServerParameterList(p_Params, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(836)
inline HRESULT EICClientCOMLib::IEICServer2::GetTimeStamp ( short * p_Day, short * p_Month, short * p_Year, short * p_Hour, short * p_Minute, short * p_Second ) {
    HRESULT _hr = raw_GetTimeStamp(p_Day, p_Month, p_Year, p_Hour, p_Minute, p_Second);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(837)
inline HRESULT EICClientCOMLib::IEICServer2::ForceLoginOnError ( ) {
    HRESULT _hr = raw_ForceLoginOnError();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IClientServicesWatcher wrapper method implementations
//

#pragma implementation_key(838)
inline HRESULT EICClientCOMLib::IClientServicesWatcher::LicenseRevoked ( _bstr_t p_StatName, _bstr_t p_License ) {
    HRESULT _hr = raw_LicenseRevoked(p_StatName, p_License);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICServer3 wrapper method implementations
//

#pragma implementation_key(839)
inline long EICClientCOMLib::IEICServer3::DoesStationHaveRightsToRun ( _bstr_t p_Station, _bstr_t p_License, VARIANT_BOOL p_BootOffOtherInstanceIfInUse ) {
    long _result = 0;
    HRESULT _hr = raw_DoesStationHaveRightsToRun(p_Station, p_License, p_BootOffOtherInstanceIfInUse, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(840)
inline _bstr_t EICClientCOMLib::IEICServer3::GetLoginCookie ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLoginCookie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(841)
inline long EICClientCOMLib::IEICServer3::NotifierLoginWithCookie ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Cookie ) {
    long _result = 0;
    HRESULT _hr = raw_NotifierLoginWithCookie(p_App, p_Server, p_User, p_Cookie, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(842)
inline HRESULT EICClientCOMLib::IEICServer3::SetClientServicesCallback ( struct IClientServicesWatcher * p_Watcher, VARIANT_BOOL p_Marshalled ) {
    HRESULT _hr = raw_SetClientServicesCallback(p_Watcher, p_Marshalled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(843)
inline HRESULT EICClientCOMLib::IEICServer3::SetPassword ( _bstr_t p_Password ) {
    HRESULT _hr = raw_SetPassword(p_Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISIPPhone wrapper method implementations
//

#pragma implementation_key(844)
inline HRESULT EICClientCOMLib::ISIPPhone::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(845)
inline HRESULT EICClientCOMLib::ISIPPhone::Deactivate ( ) {
    HRESULT _hr = raw_Deactivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISIPPhone2 wrapper method implementations
//

#pragma implementation_key(846)
inline HRESULT EICClientCOMLib::ISIPPhone2::SetWatcher ( struct ISIPPhoneWatcher * pWatcher ) {
    HRESULT _hr = raw_SetWatcher(pWatcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICSConnectProfile wrapper method implementations
//

#pragma implementation_key(847)
inline _bstr_t EICClientCOMLib::ICSConnectProfile::GetUserId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(848)
inline void EICClientCOMLib::ICSConnectProfile::PutUserId ( _bstr_t pVal ) {
    HRESULT _hr = put_UserId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(849)
inline _bstr_t EICClientCOMLib::ICSConnectProfile::GetRemotePhoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemotePhoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(850)
inline void EICClientCOMLib::ICSConnectProfile::PutRemotePhoneNumber ( _bstr_t pVal ) {
    HRESULT _hr = put_RemotePhoneNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(851)
inline _bstr_t EICClientCOMLib::ICSConnectProfile::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(852)
inline void EICClientCOMLib::ICSConnectProfile::PutPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_Password(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(853)
inline _bstr_t EICClientCOMLib::ICSConnectProfile::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(854)
inline void EICClientCOMLib::ICSConnectProfile::PutStatus ( _bstr_t pVal ) {
    HRESULT _hr = put_Status(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(855)
inline VARIANT_BOOL EICClientCOMLib::ICSConnectProfile::GetRemote ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Remote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline void EICClientCOMLib::ICSConnectProfile::PutRemote ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Remote(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(857)
inline VARIANT_BOOL EICClientCOMLib::ICSConnectProfile::GetPersistent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Persistent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(858)
inline void EICClientCOMLib::ICSConnectProfile::PutPersistent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Persistent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(859)
inline long EICClientCOMLib::ICSConnectProfile::GetMediaFlags ( ) {
    long _result = 0;
    HRESULT _hr = get_MediaFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline void EICClientCOMLib::ICSConnectProfile::PutMediaFlags ( long pVal ) {
    HRESULT _hr = put_MediaFlags(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(861)
inline long EICClientCOMLib::ICSConnectProfile::GetSecondsNoAnswer ( ) {
    long _result = 0;
    HRESULT _hr = get_SecondsNoAnswer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(862)
inline void EICClientCOMLib::ICSConnectProfile::PutSecondsNoAnswer ( long pVal ) {
    HRESULT _hr = put_SecondsNoAnswer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(863)
inline _bstr_t EICClientCOMLib::ICSConnectProfile::GetStationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(864)
inline void EICClientCOMLib::ICSConnectProfile::PutStationID ( _bstr_t pVal ) {
    HRESULT _hr = put_StationID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(865)
inline _bstr_t EICClientCOMLib::ICSConnectProfile::GetServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Server(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(866)
inline void EICClientCOMLib::ICSConnectProfile::PutServer ( _bstr_t pVal ) {
    HRESULT _hr = put_Server(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(867)
inline VARIANT_BOOL EICClientCOMLib::ICSConnectProfile::GetForceLoginOnError ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForceLoginOnError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(868)
inline void EICClientCOMLib::ICSConnectProfile::PutForceLoginOnError ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ForceLoginOnError(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(869)
inline VARIANT_BOOL EICClientCOMLib::ICSConnectProfile::GetAutoDisconnect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoDisconnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(870)
inline void EICClientCOMLib::ICSConnectProfile::PutAutoDisconnect ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoDisconnect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEICDSAction wrapper method implementations
//

#pragma implementation_key(871)
inline _bstr_t EICClientCOMLib::IEICDSAction::GetApplication ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ILicensing wrapper method implementations
//

#pragma implementation_key(872)
inline VARIANT_BOOL EICClientCOMLib::ILicensing::QuerySpecificLicense ( _bstr_t StationName, _bstr_t userName, _bstr_t licenseName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_QuerySpecificLicense(StationName, userName, licenseName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(873)
inline VARIANT_BOOL EICClientCOMLib::ILicensing::AcquireLicense ( _bstr_t StationName, _bstr_t licenseName, VARIANT_BOOL bRevokeIfNecessary, VARIANT_BOOL bOptional ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AcquireLicense(StationName, licenseName, bRevokeIfNecessary, bOptional, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(874)
inline enum EICClientCOMLib::ACDStatus EICClientCOMLib::ILicensing::GetACDStatus ( ) {
    enum ACDStatus _result;
    HRESULT _hr = get_ACDStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(875)
inline VARIANT_BOOL EICClientCOMLib::ILicensing::AcquireProxyLicense ( _bstr_t UserId, _bstr_t StationName, _bstr_t machineName, long p_Cookie, _bstr_t licenseName, VARIANT_BOOL bRevokeIfNecessary, VARIANT_BOOL bOptional ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AcquireProxyLicense(UserId, StationName, machineName, p_Cookie, licenseName, bRevokeIfNecessary, bOptional, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(876)
inline VARIANT_BOOL EICClientCOMLib::ILicensing::ReleaseProxyLicenses ( _bstr_t UserId, _bstr_t StationName, _bstr_t machineName, long p_Cookie ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ReleaseProxyLicenses(UserId, StationName, machineName, p_Cookie, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILogin wrapper method implementations
//

#pragma implementation_key(877)
inline long EICClientCOMLib::ILogin::ClientLoginWithProfile ( _bstr_t p_App, struct ICSConnectProfile * p_Profile ) {
    long _result = 0;
    HRESULT _hr = raw_ClientLoginWithProfile(p_App, p_Profile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(878)
inline long EICClientCOMLib::ILogin::NotifierLoginWithProfile ( _bstr_t p_App, struct ICSConnectProfile * p_Profile ) {
    long _result = 0;
    HRESULT _hr = raw_NotifierLoginWithProfile(p_App, p_Profile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(879)
inline long EICClientCOMLib::ILogin::CSLoginWithProfile ( struct ICSConnectProfile * p_Profile ) {
    long _result = 0;
    HRESULT _hr = raw_CSLoginWithProfile(p_Profile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline long EICClientCOMLib::ILogin::CSProxyLoginWithProfile ( struct ICSConnectProfile * p_Profile, _bstr_t p_MachineName, VARIANT_BOOL p_AuthenticationRequired, long * p_Cookie ) {
    long _result = 0;
    HRESULT _hr = raw_CSProxyLoginWithProfile(p_Profile, p_MachineName, p_AuthenticationRequired, p_Cookie, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(881)
inline long EICClientCOMLib::ILogin::CSProxyLogoutWithProfile ( _bstr_t p_UserId, _bstr_t p_StationId, long p_Cookie ) {
    long _result = 0;
    HRESULT _hr = raw_CSProxyLogoutWithProfile(p_UserId, p_StationId, p_Cookie, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IExtendedDial wrapper method implementations
//

#pragma implementation_key(882)
inline HRESULT EICClientCOMLib::IExtendedDial::DialFromWorkgroup ( _bstr_t p_Number, _bstr_t p_Workgroup ) {
    HRESULT _hr = raw_DialFromWorkgroup(p_Number, p_Workgroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDialParameters wrapper method implementations
//

#pragma implementation_key(883)
inline _bstr_t EICClientCOMLib::IDialParameters::GetUser ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(884)
inline void EICClientCOMLib::IDialParameters::PutUser ( _bstr_t pVal ) {
    HRESULT _hr = put_User(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(885)
inline _bstr_t EICClientCOMLib::IDialParameters::GetStation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Station(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(886)
inline void EICClientCOMLib::IDialParameters::PutStation ( _bstr_t pVal ) {
    HRESULT _hr = put_Station(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(887)
inline _bstr_t EICClientCOMLib::IDialParameters::Getnumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(888)
inline void EICClientCOMLib::IDialParameters::Putnumber ( _bstr_t pVal ) {
    HRESULT _hr = put_number(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(889)
inline short EICClientCOMLib::IDialParameters::GetTimeoutInSeconds ( ) {
    short _result = 0;
    HRESULT _hr = get_TimeoutInSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(890)
inline void EICClientCOMLib::IDialParameters::PutTimeoutInSeconds ( short pVal ) {
    HRESULT _hr = put_TimeoutInSeconds(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(891)
inline VARIANT_BOOL EICClientCOMLib::IDialParameters::GetPerformCallAnalysis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerformCallAnalysis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(892)
inline void EICClientCOMLib::IDialParameters::PutPerformCallAnalysis ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PerformCallAnalysis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(893)
inline VARIANT_BOOL EICClientCOMLib::IDialParameters::GetCallHandlerOnSuccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CallHandlerOnSuccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(894)
inline void EICClientCOMLib::IDialParameters::PutCallHandlerOnSuccess ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CallHandlerOnSuccess(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(895)
inline _bstr_t EICClientCOMLib::IDialParameters::GetWorkgroup ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Workgroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(896)
inline void EICClientCOMLib::IDialParameters::PutWorkgroup ( _bstr_t pVal ) {
    HRESULT _hr = put_Workgroup(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IExtendedDial2 wrapper method implementations
//

#pragma implementation_key(897)
inline HRESULT EICClientCOMLib::IExtendedDial2::DialWithParameters ( struct IDialParameters * p_DialParameters ) {
    HRESULT _hr = raw_DialWithParameters(p_DialParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICClientCOMUpdate wrapper method implementations
//

#pragma implementation_key(898)
inline HRESULT EICClientCOMLib::IEICClientCOMUpdate::StartMonitor ( _bstr_t p_strCommandLine, _bstr_t p_strCurrentDir ) {
    HRESULT _hr = raw_StartMonitor(p_strCommandLine, p_strCurrentDir);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(899)
inline HRESULT EICClientCOMLib::IEICClientCOMUpdate::StopMonitor ( ) {
    HRESULT _hr = raw_StopMonitor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(900)
inline HRESULT EICClientCOMLib::IEICClientCOMUpdate::SetICUserInfo ( _bstr_t p_strServer, _bstr_t p_strUser, _bstr_t p_strPasswd ) {
    HRESULT _hr = raw_SetICUserInfo(p_strServer, p_strUser, p_strPasswd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(901)
inline VARIANT_BOOL EICClientCOMLib::IEICClientCOMUpdate::DownloadUpdates ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DownloadUpdates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(902)
inline HRESULT EICClientCOMLib::IEICClientCOMUpdate::ApplyUpdatesAfterShutdown ( ) {
    HRESULT _hr = raw_ApplyUpdatesAfterShutdown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(903)
inline HRESULT EICClientCOMLib::IEICClientCOMUpdate::SetRestartMsg ( _bstr_t p_strMessage ) {
    HRESULT _hr = raw_SetRestartMsg(p_strMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICUserEx2Watcher wrapper method implementations
//

#pragma implementation_key(904)
inline HRESULT EICClientCOMLib::IEICUserEx2Watcher::StatusChanged ( struct IEICUserEx2 * p_User, _bstr_t p_StatusKey, VARIANT_BOOL p_IsDND, DATE p_UntilDateTime, VARIANT_BOOL p_HasDate, VARIANT_BOOL p_HasTime ) {
    HRESULT _hr = raw_StatusChanged(p_User, p_StatusKey, p_IsDND, p_UntilDateTime, p_HasDate, p_HasTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(905)
inline HRESULT EICClientCOMLib::IEICUserEx2Watcher::UserChanged ( struct IEICUserEx2 * p_User ) {
    HRESULT _hr = raw_UserChanged(p_User);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(906)
inline HRESULT EICClientCOMLib::IEICUserEx2Watcher::UserLoginChanged ( struct IEICUserEx2 * p_User, _bstr_t p_Station, VARIANT_BOOL p_Login ) {
    HRESULT _hr = raw_UserLoginChanged(p_User, p_Station, p_Login);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(907)
inline HRESULT EICClientCOMLib::IEICUserEx2Watcher::UserOnPhoneChanged ( struct IEICUserEx2 * p_User, VARIANT_BOOL p_OnPhone ) {
    HRESULT _hr = raw_UserOnPhoneChanged(p_User, p_OnPhone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICUserEx2 wrapper method implementations
//

#pragma implementation_key(908)
inline HRESULT EICClientCOMLib::IEICUserEx2::SetMarshalledCallback ( IUnknown * p_Handler ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(909)
inline HRESULT EICClientCOMLib::IEICUserEx2::SetThreadCallback ( IUnknown * p_Handler ) {
    HRESULT _hr = raw_SetThreadCallback(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(910)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx2::GetStatusHasDate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StatusHasDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(911)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx2::GetStatusHasTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StatusHasTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline HRESULT EICClientCOMLib::IEICUserEx2::SetUntilDateTimeEx ( const _variant_t & dateTime, VARIANT_BOOL hasDate, VARIANT_BOOL hasTime ) {
    HRESULT _hr = raw_SetUntilDateTimeEx(dateTime, hasDate, hasTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(913)
inline _variant_t EICClientCOMLib::IEICUserEx2::GetNextStatusMessageV ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetNextStatusMessageV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(914)
inline _variant_t EICClientCOMLib::IEICUserEx2::GetDirectoryList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DirectoryList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(915)
inline EICClientCOMLib::IEICDirectoryPtr EICClientCOMLib::IEICUserEx2::GetDirectory ( _bstr_t p_SourceName, long p_Type ) {
    struct IEICDirectory * _result = 0;
    HRESULT _hr = raw_GetDirectory(p_SourceName, p_Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICDirectoryPtr(_result, false);
}

#pragma implementation_key(916)
inline EICClientCOMLib::IEICWorkgroupPtr EICClientCOMLib::IEICUserEx2::GetWorkgroup ( _bstr_t p_Name ) {
    struct IEICWorkgroup * _result = 0;
    HRESULT _hr = raw_GetWorkgroup(p_Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICWorkgroupPtr(_result, false);
}

#pragma implementation_key(917)
inline EICClientCOMLib::IEICQueuePtr EICClientCOMLib::IEICUserEx2::GetQueue ( _bstr_t p_Name, long p_Type ) {
    struct IEICQueue * _result = 0;
    HRESULT _hr = raw_GetQueue(p_Name, p_Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueuePtr(_result, false);
}

#pragma implementation_key(918)
inline long EICClientCOMLib::IEICUserEx2::GetAvailableActions ( ) {
    long _result = 0;
    HRESULT _hr = get_AvailableActions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(919)
inline long EICClientCOMLib::IEICUserEx2::GetStationVolume ( ) {
    long _result = 0;
    HRESULT _hr = get_StationVolume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(920)
inline void EICClientCOMLib::IEICUserEx2::PutStationVolume ( long p_Volume ) {
    HRESULT _hr = put_StationVolume(p_Volume);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(921)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx2::isOnPhoneForUser ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isOnPhoneForUser(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(922)
inline VARIANT_BOOL EICClientCOMLib::IEICUserEx2::isLoggedInForUser ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isLoggedInForUser(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICUser3 wrapper method implementations
//

#pragma implementation_key(923)
inline _bstr_t EICClientCOMLib::IEICUser3::GetFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(924)
inline _bstr_t EICClientCOMLib::IEICUser3::GetLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(925)
inline VARIANT_BOOL EICClientCOMLib::IEICUser3::GetisACD ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isACD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(926)
inline EICClientCOMLib::IUserForwardingPtr EICClientCOMLib::IEICUser3::GetForwarding ( ) {
    struct IUserForwarding * _result = 0;
    HRESULT _hr = get_Forwarding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserForwardingPtr(_result, false);
}

#pragma implementation_key(927)
inline void EICClientCOMLib::IEICUser3::PutForwarding ( struct IUserForwarding * pVal ) {
    HRESULT _hr = put_Forwarding(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(928)
inline VARIANT_BOOL EICClientCOMLib::IEICUser3::GetExcludeFromDirectory ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExcludeFromDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(929)
inline _bstr_t EICClientCOMLib::IEICUser3::GetDepartmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DepartmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(930)
inline unsigned long EICClientCOMLib::IEICUser3::GetMediaSupportFlags ( ) {
    unsigned long _result = 0;
    HRESULT _hr = get_MediaSupportFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(931)
inline _variant_t EICClientCOMLib::IEICUser3::GetPeerServerNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PeerServerNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(932)
inline DATE EICClientCOMLib::IEICUser3::GetStatusChangeTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StatusChangeTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICDirectory wrapper method implementations
//

#pragma implementation_key(933)
inline HRESULT EICClientCOMLib::IEICDirectory::StartMemberList ( ) {
    HRESULT _hr = raw_StartMemberList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(934)
inline HRESULT EICClientCOMLib::IEICDirectory::GetNextMember ( long * p_Id ) {
    HRESULT _hr = raw_GetNextMember(p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(935)
inline HRESULT EICClientCOMLib::IEICDirectory::Connect ( _bstr_t p_SourceName, long p_Type ) {
    HRESULT _hr = raw_Connect(p_SourceName, p_Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(936)
inline VARIANT_BOOL EICClientCOMLib::IEICDirectory::GetIsPublic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPublic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(937)
inline HRESULT EICClientCOMLib::IEICDirectory::SetChangeHandler ( struct IEICDirectoryWatcher * p_Watcher ) {
    HRESULT _hr = raw_SetChangeHandler(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(938)
inline HRESULT EICClientCOMLib::IEICDirectory::SetUser ( _bstr_t p_User, _bstr_t p_Password ) {
    HRESULT _hr = raw_SetUser(p_User, p_Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDirectoryWatcher wrapper method implementations
//

#pragma implementation_key(939)
inline HRESULT EICClientCOMLib::IEICDirectoryWatcher::MemberChanged ( struct IEICDirectory * p_Directory, long p_Id ) {
    HRESULT _hr = raw_MemberChanged(p_Directory, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(940)
inline HRESULT EICClientCOMLib::IEICDirectoryWatcher::MemberRemoved ( struct IEICDirectory * p_Directory, long p_Id ) {
    HRESULT _hr = raw_MemberRemoved(p_Directory, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(941)
inline HRESULT EICClientCOMLib::IEICDirectoryWatcher::MemberAdded ( struct IEICDirectory * p_Directory, long p_Id ) {
    HRESULT _hr = raw_MemberAdded(p_Directory, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDirectory2 wrapper method implementations
//

#pragma implementation_key(942)
inline HRESULT EICClientCOMLib::IEICDirectory2::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(943)
inline HRESULT EICClientCOMLib::IEICDirectory2::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(944)
inline _bstr_t EICClientCOMLib::IEICDirectory2::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(945)
inline long EICClientCOMLib::IEICDirectory2::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICDirectoryEntry wrapper method implementations
//

#pragma implementation_key(946)
inline HRESULT EICClientCOMLib::IEICDirectoryEntry::Load ( struct IEICDirectory * p_Directory, long p_Id ) {
    HRESULT _hr = raw_Load(p_Directory, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(947)
inline HRESULT EICClientCOMLib::IEICDirectoryEntry::Create ( struct IEICDirectory * p_Directory ) {
    HRESULT _hr = raw_Create(p_Directory);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(948)
inline HRESULT EICClientCOMLib::IEICDirectoryEntry::Commit ( ) {
    HRESULT _hr = raw_Commit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(949)
inline HRESULT EICClientCOMLib::IEICDirectoryEntry::Rollback ( ) {
    HRESULT _hr = raw_Rollback();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(950)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetUserId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(951)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(952)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(953)
inline void EICClientCOMLib::IEICDirectoryEntry::PutLastName ( _bstr_t pVal ) {
    HRESULT _hr = put_LastName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(954)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(955)
inline void EICClientCOMLib::IEICDirectoryEntry::PutFirstName ( _bstr_t pVal ) {
    HRESULT _hr = put_FirstName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(956)
inline void EICClientCOMLib::IEICDirectoryEntry::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(957)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(958)
inline void EICClientCOMLib::IEICDirectoryEntry::PutAddress ( _bstr_t pVal ) {
    HRESULT _hr = put_Address(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(959)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(960)
inline void EICClientCOMLib::IEICDirectoryEntry::PutCity ( _bstr_t pVal ) {
    HRESULT _hr = put_City(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(961)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_City(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(962)
inline void EICClientCOMLib::IEICDirectoryEntry::PutState ( _bstr_t pVal ) {
    HRESULT _hr = put_State(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(963)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(964)
inline void EICClientCOMLib::IEICDirectoryEntry::PutZip ( _bstr_t pVal ) {
    HRESULT _hr = put_Zip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(965)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Zip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(966)
inline void EICClientCOMLib::IEICDirectoryEntry::PutPhone ( _bstr_t pVal ) {
    HRESULT _hr = put_Phone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(967)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Phone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(968)
inline void EICClientCOMLib::IEICDirectoryEntry::PutCompany ( _bstr_t pVal ) {
    HRESULT _hr = put_Company(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(969)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Company(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(970)
inline void EICClientCOMLib::IEICDirectoryEntry::PutTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(971)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(972)
inline void EICClientCOMLib::IEICDirectoryEntry::PutDepartment ( _bstr_t pVal ) {
    HRESULT _hr = put_Department(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(973)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetDepartment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Department(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(974)
inline void EICClientCOMLib::IEICDirectoryEntry::PutBusinessAddress ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessAddress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(975)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetBusinessAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(976)
inline void EICClientCOMLib::IEICDirectoryEntry::PutBusinessCity ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessCity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(977)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetBusinessCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(978)
inline void EICClientCOMLib::IEICDirectoryEntry::PutBusinessState ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessState(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(979)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetBusinessState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(980)
inline void EICClientCOMLib::IEICDirectoryEntry::PutBusinessZip ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessZip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(981)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetBusinessZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessZip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(982)
inline void EICClientCOMLib::IEICDirectoryEntry::PutBusinessCountry ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessCountry(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(983)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetBusinessCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(984)
inline void EICClientCOMLib::IEICDirectoryEntry::PutBusinessEMail ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessEMail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(985)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetBusinessEMail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessEMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(986)
inline void EICClientCOMLib::IEICDirectoryEntry::PutAssistant ( _bstr_t pVal ) {
    HRESULT _hr = put_Assistant(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(987)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetAssistant ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(988)
inline void EICClientCOMLib::IEICDirectoryEntry::PutHomeCountry ( _bstr_t pVal ) {
    HRESULT _hr = put_HomeCountry(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(989)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetHomeCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(990)
inline void EICClientCOMLib::IEICDirectoryEntry::PutHomeEMail ( _bstr_t pVal ) {
    HRESULT _hr = put_HomeEMail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(991)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetHomeEMail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeEMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(992)
inline void EICClientCOMLib::IEICDirectoryEntry::PutBusinessPhone ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessPhone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(993)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetBusinessPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(994)
inline void EICClientCOMLib::IEICDirectoryEntry::PutBusinessPhone2 ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessPhone2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(995)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetBusinessPhone2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessPhone2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(996)
inline void EICClientCOMLib::IEICDirectoryEntry::PutHomePhone2 ( _bstr_t pVal ) {
    HRESULT _hr = put_HomePhone2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(997)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetHomePhone2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomePhone2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(998)
inline void EICClientCOMLib::IEICDirectoryEntry::PutMobile ( _bstr_t pVal ) {
    HRESULT _hr = put_Mobile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(999)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetMobile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mobile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1000)
inline void EICClientCOMLib::IEICDirectoryEntry::PutFax ( _bstr_t pVal ) {
    HRESULT _hr = put_Fax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1001)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetFax ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Fax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1002)
inline void EICClientCOMLib::IEICDirectoryEntry::PutPager ( _bstr_t pVal ) {
    HRESULT _hr = put_Pager(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1003)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetPager ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Pager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1004)
inline void EICClientCOMLib::IEICDirectoryEntry::PutAssistantPhone ( _bstr_t pVal ) {
    HRESULT _hr = put_AssistantPhone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1005)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetAssistantPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssistantPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1006)
inline void EICClientCOMLib::IEICDirectoryEntry::PutUrl ( _bstr_t pVal ) {
    HRESULT _hr = put_Url(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1007)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1008)
inline void EICClientCOMLib::IEICDirectoryEntry::PutPrimaryNumber ( _bstr_t pVal ) {
    HRESULT _hr = put_PrimaryNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1009)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetPrimaryNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrimaryNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1010)
inline void EICClientCOMLib::IEICDirectoryEntry::PutNotes ( _bstr_t pVal ) {
    HRESULT _hr = put_Notes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1011)
inline _bstr_t EICClientCOMLib::IEICDirectoryEntry::GetNotes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Notes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IEICDirectory2Watcher wrapper method implementations
//

#pragma implementation_key(1012)
inline HRESULT EICClientCOMLib::IEICDirectory2Watcher::MemberChanged ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id ) {
    HRESULT _hr = raw_MemberChanged(p_Directory, p_Entry, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1013)
inline HRESULT EICClientCOMLib::IEICDirectory2Watcher::MemberRemoved ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id ) {
    HRESULT _hr = raw_MemberRemoved(p_Directory, p_Entry, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1014)
inline HRESULT EICClientCOMLib::IEICDirectory2Watcher::MemberAdded ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id ) {
    HRESULT _hr = raw_MemberAdded(p_Directory, p_Entry, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1015)
inline HRESULT EICClientCOMLib::IEICDirectory2Watcher::MemberDisplayChanged ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id ) {
    HRESULT _hr = raw_MemberDisplayChanged(p_Directory, p_Entry, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDirectory2Ex wrapper method implementations
//

#pragma implementation_key(1016)
inline HRESULT EICClientCOMLib::IEICDirectory2Ex::DeleteEntry ( long p_Id ) {
    HRESULT _hr = raw_DeleteEntry(p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEIC_UMFMessageWatcher wrapper method implementations
//

#pragma implementation_key(1017)
inline HRESULT EICClientCOMLib::IEIC_UMFMessageWatcher::ResponseReceived ( struct IEIC_UMFMessage * pResponse ) {
    HRESULT _hr = raw_ResponseReceived(pResponse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1018)
inline HRESULT EICClientCOMLib::IEIC_UMFMessageWatcher::Error ( struct IErrorInfo * p_Info ) {
    HRESULT _hr = raw_Error(p_Info);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEIC_UMFMessage wrapper method implementations
//

#pragma implementation_key(1019)
inline HRESULT EICClientCOMLib::IEIC_UMFMessage::Initialize ( long p_dwServerTimeoutMsec ) {
    HRESULT _hr = raw_Initialize(p_dwServerTimeoutMsec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1020)
inline HRESULT EICClientCOMLib::IEIC_UMFMessage::Send ( _bstr_t p_ObjectId, _bstr_t p_EventId, long p_TimeoutSec, struct IEIC_UMFMessageWatcher * p_Responder ) {
    HRESULT _hr = raw_Send(p_ObjectId, p_EventId, p_TimeoutSec, p_Responder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1021)
inline HRESULT EICClientCOMLib::IEIC_UMFMessage::CancelResponseWait ( ) {
    HRESULT _hr = raw_CancelResponseWait();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1022)
inline HRESULT EICClientCOMLib::IEIC_UMFMessage::AddInteger ( long p_Int ) {
    HRESULT _hr = raw_AddInteger(p_Int);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1023)
inline HRESULT EICClientCOMLib::IEIC_UMFMessage::AddString ( _bstr_t p_String ) {
    HRESULT _hr = raw_AddString(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1024)
inline HRESULT EICClientCOMLib::IEIC_UMFMessage::GetInteger ( long * p_Int ) {
    HRESULT _hr = raw_GetInteger(p_Int);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1025)
inline HRESULT EICClientCOMLib::IEIC_UMFMessage::GetString ( BSTR * p_String ) {
    HRESULT _hr = raw_GetString(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1026)
inline HRESULT EICClientCOMLib::IEIC_UMFMessage::Connect ( _bstr_t p_Notifier, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_App ) {
    HRESULT _hr = raw_Connect(p_Notifier, p_User, p_Password, p_App);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1027)
inline void EICClientCOMLib::IEIC_UMFMessage::PutId ( long _arg1 ) {
    HRESULT _hr = put_Id(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEIC_UMFMessage2 wrapper method implementations
//

#pragma implementation_key(1028)
inline HRESULT EICClientCOMLib::IEIC_UMFMessage2::SendMarshalled ( _bstr_t p_ObjectId, _bstr_t p_EventId, long p_TimeoutSec, struct IEIC_UMFMessageWatcher * p_Responder ) {
    HRESULT _hr = raw_SendMarshalled(p_ObjectId, p_EventId, p_TimeoutSec, p_Responder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
