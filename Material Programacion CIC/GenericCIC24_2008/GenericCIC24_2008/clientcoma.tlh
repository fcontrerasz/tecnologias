// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.42 (c3db976f).
//
// c:\documents and settings\rfrez\desktop\generic\release\clientcoma.tlh
//
// C++ source equivalent of Win32 type library C:\Program Files\Interactive Intelligence\ClientCOMA.dll
// compiler-generated file created 10/09/08 at 16:19:28 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace EICClientCOMLib {

//
// Forward references and typedefs
//

struct __declspec(uuid("dcc7ad35-f185-11d1-bffe-00a0c9a79e7c"))
/* LIBID */ __EICClientCOMLib;
struct __declspec(uuid("beffc282-c8d8-11d3-b37e-0050da2c4eb8"))
/* dual interface */ IEICQueue2Watcher;
struct __declspec(uuid("beffc284-c8d8-11d3-b37e-0050da2c4eb8"))
/* dual interface */ IEICQueue2;
struct __declspec(uuid("dcc7ad43-f185-11d1-bffe-00a0c9a79e7c"))
/* dual interface */ IEICQueue;
struct __declspec(uuid("dcc7ad44-f185-11d1-bffe-00a0c9a79e7c"))
/* dual interface */ IEICQueueWatcher;
struct __declspec(uuid("beffc280-c8d8-11d3-b37e-0050da2c4eb8"))
/* dual interface */ IEICQueueObject2;
struct __declspec(uuid("beffc285-c8d8-11d3-b37e-0050da2c4eb8"))
/* interface */ IEICQueueObject2Watcher;
struct __declspec(uuid("beffc286-c8d8-11d3-b37e-0050da2c4eb8"))
/* interface */ IEICChatObject2Watcher;
struct __declspec(uuid("beffc283-c8d8-11d3-b37e-0050da2c4eb8"))
/* dual interface */ IEICChatObject2;
struct __declspec(uuid("beffc287-c8d8-11d3-b37e-0050da2c4eb8"))
/* interface */ IEICCallObject2Watcher;
struct __declspec(uuid("32543bd6-59c8-4c11-9766-1e9e640bbe7f"))
/* interface */ IEICChatObject2Watcher2;
struct __declspec(uuid("0ea36afb-9ba3-4250-9de5-7e55543c7680"))
/* interface */ IEICCallObject2Watcher2;
struct __declspec(uuid("c389e623-3fa6-11d3-b26e-0090272dcf18"))
/* dual interface */ IEICQueueStatWatcher;
struct __declspec(uuid("c389e624-3fa6-11d3-b26e-0090272dcf18"))
/* dual interface */ IEICQueueStats;
struct __declspec(uuid("c389e622-3fa6-11d3-b26e-0090272dcf18"))
/* dual interface */ IEICQueueStatData;
struct __declspec(uuid("c389e626-3fa6-11d3-b26e-0090272dcf18"))
/* dual interface */ IEICWorkgroupStatWatcher;
struct __declspec(uuid("c389e621-3fa6-11d3-b26e-0090272dcf18"))
/* dual interface */ IEICWorkgroupStats;
struct __declspec(uuid("5e0b99c9-623f-48a1-8825-55ae7763a39a"))
/* dual interface */ IEICUserEx2Watcher;
struct __declspec(uuid("f8eb10c9-39ac-49f4-8f48-aef352021716"))
/* dual interface */ IEICUserEx2;
struct __declspec(uuid("1405e8f0-dd23-4d21-973c-96cdca7a66a1"))
/* dual interface */ IEICUserS;
struct __declspec(uuid("dcdd9630-c9f8-11d3-b2a8-0090272dcf18"))
/* dual interface */ IEICUserEx;
struct __declspec(uuid("871962b3-fa2d-11d1-8001-00a0c9a79e7c"))
/* dual interface */ IEICUser;
struct __declspec(uuid("918ebe75-fa5d-11d1-8001-00a0c9a79e7c"))
/* dual interface */ IEICUserWatcher;
struct __declspec(uuid("a6d4728e-4747-11d2-8023-00a0c9a79e7c"))
/* dual interface */ IEICDirectory;
struct __declspec(uuid("8fcdf521-48c0-11d2-8026-00a0c9a79e7c"))
/* dual interface */ IEICDirectoryWatcher;
struct __declspec(uuid("c574f7b5-fede-11d1-8001-00a0c9a79e7c"))
/* dual interface */ IEICWorkgroup;
struct __declspec(uuid("c574f7b7-fede-11d1-8001-00a0c9a79e7c"))
/* dual interface */ IEICWorkgroupWatcher;
struct __declspec(uuid("af435ebc-aad8-4e9d-910c-8e026fcd38a1"))
/* dual interface */ IEICDirectory2Watcher;
struct __declspec(uuid("1180b756-cdf1-4686-b254-782ac4a04307"))
/* dual interface */ IEICDirectory2;
struct __declspec(uuid("a6d47290-4747-11d2-8023-00a0c9a79e7c"))
/* dual interface */ IEICDirectoryEntry;
struct __declspec(uuid("92b72cf1-0040-4dbc-bba0-00ff6405239b"))
/* dual interface */ IEICWorkgroup2Watcher;
struct __declspec(uuid("0176517b-c513-4fa1-a113-704e17ba9b60"))
/* dual interface */ IEICConferenceObject2Watcher;
struct __declspec(uuid("19346537-74a5-4191-b014-82f391ee1cd6"))
/* dual interface */ IEIC_UMFMessageWatcher;
struct __declspec(uuid("9fbb4436-7234-418e-9162-dd7dee97ac0e"))
/* dual interface */ IEIC_UMFMessage;
struct __declspec(uuid("906781a0-f4e0-4bd4-ac7d-bfd0c5275836"))
/* dual interface */ IEICWorkgroup2Watcher2;
struct __declspec(uuid("676f2db0-5486-4cdf-b9df-eae780602bdf"))
/* dual interface */ IACDHelpMonitorCallback;
struct __declspec(uuid("fb3666e0-08a5-4d70-9b4f-57c24523f62e"))
/* dual interface */ IACDHelpRequest;
struct __declspec(uuid("15af3790-98e6-4d83-8735-ee62470739b5"))
/* dual interface */ ISIPPhoneWatcher;
enum EICRecipientOrder;
enum EICObjectTypes;
enum EICQueueTypes;
enum EICConnectErrors;
enum EICQueueObjectStates;
enum EICActionFlags;
enum EICMediaTypes;
enum EICCallDirection;
enum EICDirectoryTypes;
enum EICQueueObjectStates2;
enum CSConnectError;
struct /* coclass */ EICQueue2WatcherAdapter;
struct __declspec(uuid("5d31b94e-d336-4155-953f-ce1f082d4ea5"))
/* dual interface */ IEICQueue2WatcherAdapter;
struct /* coclass */ EICRemoteConnection;
struct __declspec(uuid("63065450-3475-11d3-b264-0090272dcf18"))
/* dual interface */ IEICRemoteConnection;
struct /* coclass */ EICConnection;
struct __declspec(uuid("dcc7ad42-f185-11d1-bffe-00a0c9a79e7c"))
/* dual interface */ IEICConnection;
struct /* coclass */ EICQueue;
struct /* coclass */ EICChatObject;
struct __declspec(uuid("c763670e-1441-11d3-b252-0090272dcf18"))
/* dual interface */ IEICChatObject;
struct __declspec(uuid("02c6d120-1d03-11d3-b25a-0090272dcf18"))
/* dual interface */ IEICChatObjectWatcher;
struct /* coclass */ EICCallObject;
struct __declspec(uuid("ed55b8b5-f4b0-11d1-bffe-00a0c9a79e7c"))
/* dual interface */ IEICCallObject;
struct __declspec(uuid("b638f3b8-f4a4-11d1-bffe-00a0c9a79e7c"))
/* dual interface */ IEICQueueObjectWatcher;
struct /* coclass */ EICUser;
struct /* coclass */ EICUserEx;
struct /* coclass */ EICUserS;
struct /* coclass */ EICWorkgroup;
struct /* coclass */ EICWorkgroupEntry;
struct __declspec(uuid("21a1d340-a536-11d4-a020-00d0b7738aad"))
/* dual interface */ IEICWorkgroupEntry;
struct /* coclass */ EICConferenceObject;
struct __declspec(uuid("661abfe5-0523-11d2-8009-00a0c9a79e7c"))
/* dual interface */ IEICConferenceObject;
struct /* coclass */ EICDirectory;
struct /* coclass */ EICDirectoryEntry;
struct /* coclass */ EICQueueStatData;
struct /* coclass */ EICQueueStatDataS;
struct __declspec(uuid("4b12fc9a-89b9-4eaa-9552-d33492a2759a"))
/* dual interface */ IEICQueueStatDataS;
struct /* coclass */ EICQueueStats;
struct /* coclass */ EICWorkgroupStats;
struct /* coclass */ EICWorkgroupStatsS;
struct __declspec(uuid("5cc138c3-9739-4d16-baca-3c46e6bab9ab"))
/* dual interface */ IEICWorkgroupStatsS;
struct /* coclass */ EICStatistics;
struct __declspec(uuid("c389e620-3fa6-11d3-b26e-0090272dcf18"))
/* dual interface */ IEICStatistics;
struct /* coclass */ EICLogging;
struct __declspec(uuid("f33f3401-9d26-11d3-bfc9-0080c88f546c"))
/* dual interface */ IEICLogging;
struct __declspec(uuid("f33f3402-9d26-11d3-bfc9-0080c88f546c"))
/* dual interface */ IEICLogEvent;
struct /* coclass */ EICQueueObject2;
struct /* coclass */ EICChatObject2;
struct /* coclass */ EICDS;
struct __declspec(uuid("87f324d1-a286-11d3-a4ba-009027bf8377"))
/* dual interface */ IEICDS;
struct __declspec(uuid("87f324d0-a286-11d3-a4ba-009027bf8377"))
/* dual interface */ IEICNames;
struct /* coclass */ EICDS2;
struct __declspec(uuid("0248f33f-bd89-4c8c-acbe-eef61b18de9d"))
/* dual interface */ IEICDS2;
struct __declspec(uuid("51355e50-a2c2-11d3-a4ba-009027bf8377"))
/* dual interface */ IEICDSEntry;
struct __declspec(uuid("63cd66ec-a9af-4f3e-965a-a63a6e2e93c7"))
/* dual interface */ IEICDSCustomEntry;
struct /* coclass */ EICDS3;
struct __declspec(uuid("c9f7f545-bd1e-439a-87f0-bd135c14b83d"))
/* dual interface */ IEICDS3;
struct /* coclass */ EICNames;
struct /* coclass */ EICDSUser;
struct __declspec(uuid("610a19be-a108-11d3-a4b9-009027bf8377"))
/* dual interface */ IEICDSUser;
enum DSPageAccess;
enum DSUserRights;
enum DSAccessControlCategory;
struct /* coclass */ EICDSWorkgroup;
struct __declspec(uuid("610a19c2-a108-11d3-a4b9-009027bf8377"))
/* dual interface */ IEICDSWorkgroup;
struct /* coclass */ EICDSStation;
struct __declspec(uuid("24b55505-d3f7-45f0-8712-41de90c84527"))
/* dual interface */ IEICDSStation;
struct __declspec(uuid("c5d66ebd-08f6-4092-8b82-082ac440fb3b"))
/* dual interface */ IEICDSStationEx;
struct /* coclass */ EICDSCustomEntry;
struct /* coclass */ EICGenericObject2;
struct __declspec(uuid("114340e0-5eec-11d4-b382-0050da2c4eb8"))
/* dual interface */ IEICGenericObject2;
struct /* coclass */ EICUserEx2;
struct /* coclass */ EICUserStatus;
struct __declspec(uuid("4ccb8396-4e17-4fca-b6d2-2b942516d861"))
/* dual interface */ IEICUserStatus;
struct /* coclass */ EICCampMonitor;
struct __declspec(uuid("3dc1217f-bb5d-460b-8fb8-cbd3bba5d7bc"))
/* dual interface */ IEICCampMonitor;
struct __declspec(uuid("3d6d1a1c-87dc-4476-969d-b4e94982ccc6"))
/* dual interface */ IEICCampEvent;
struct /* coclass */ EICDirectory2;
struct /* coclass */ EICQueueObject2WatcherAdapter;
struct __declspec(uuid("880dea54-1503-4fb4-b238-0409592cc307"))
/* dual interface */ IEICQueueObject2WatcherAdapter;
struct /* coclass */ EICChatObject2WatcherAdapter;
struct __declspec(uuid("e58b0d0d-18e2-4560-b315-fe9342a43713"))
/* dual interface */ IEICChatObject2WatcherAdapter;
struct /* coclass */ EICCallObject2WatcherAdapter;
struct __declspec(uuid("b4a48d6a-000b-4ab7-924c-98da4791acf9"))
/* dual interface */ IEICCallObject2WatcherAdapter;
struct /* coclass */ EICWorkgroup2;
struct __declspec(uuid("245174df-1a9d-4e83-ba21-94caee38e89c"))
/* dual interface */ IEICWorkgroup2;
struct /* coclass */ EICConferenceObject2;
struct __declspec(uuid("3bb29ac1-afa7-472d-a30c-aca2fb472934"))
/* dual interface */ IEICConferenceObject2;
struct __declspec(uuid("beffc281-c8d8-11d3-b37e-0050da2c4eb8"))
/* dual interface */ IEICCallObject2;
struct /* coclass */ EICEmailObject2;
struct __declspec(uuid("6be25e0f-ae23-4f8a-ae1a-6b2fcdde5220"))
/* dual interface */ IEICEmailObject2;
struct __declspec(uuid("792ecbbe-e34e-42cb-a9d5-dccf0127038a"))
/* interface */ IEICEmailObject2Response;
struct /* coclass */ EICEmailObject2Ex;
struct __declspec(uuid("b0a552f7-2f8c-41d8-bbbf-bce5fdcad091"))
/* dual interface */ IEICEmailObject2Ex;
struct /* coclass */ EIC_UMFMessage;
struct /* coclass */ EIC_UMFMessage2;
struct __declspec(uuid("ee6a2b1a-7e99-42c5-8867-c18e1069425c"))
/* dual interface */ IEIC_UMFMessage2;
struct /* coclass */ EICQueueObjectWatcherAdapter;
struct __declspec(uuid("7991b5a1-5c61-4db3-8b2a-a2a39d11a4ed"))
/* dual interface */ IEICQueueObjectWatcherAdapter;
struct /* coclass */ EICCallAcoustics;
struct __declspec(uuid("f72011f1-73b3-4dec-9006-79b1e812fcec"))
/* dual interface */ IEICCallAcoustics;
struct /* coclass */ IWebCallbackObject;
struct __declspec(uuid("d78ad44a-4205-41be-b273-0ca0e2a169af"))
/* dual interface */ IIWebCallbackObject;
struct /* coclass */ IWebInstantQuestion;
struct __declspec(uuid("18848869-db8e-4f91-92da-23e1d0bc4594"))
/* dual interface */ IIWebInstantQuestion;
struct /* coclass */ IWebWebSession;
struct __declspec(uuid("26abb663-85f2-4058-ae37-9cd5774ccbe6"))
/* dual interface */ IIWebWebSession;
struct /* coclass */ IWebBrowserSync;
struct __declspec(uuid("dcc1f5b3-104c-466c-9897-51f180a2c12f"))
/* dual interface */ IIWebBrowserSync;
struct /* coclass */ IWebBrowserSync2;
struct __declspec(uuid("c365beeb-7c2a-4181-a766-d3e59c7ac3c4"))
/* dual interface */ IIWebBrowserSync2;
struct /* coclass */ EICNotification;
struct __declspec(uuid("ee04aea2-4f3e-11d2-802b-00a0c9a79e7c"))
/* dual interface */ IEICNotification;
struct /* coclass */ EICNotificationSink;
struct __declspec(uuid("2b9f40b1-5248-11d2-802b-00a0c9a79e7c"))
/* dual interface */ IEICNotificationSink;
struct __declspec(uuid("ee04aea4-4f3e-11d2-802b-00a0c9a79e7c"))
/* dual interface */ IEICServerWatcher;
struct /* coclass */ SwitchoverCoClass;
struct __declspec(uuid("e3578ed4-528d-4c3c-8a76-e7f4e5a13c9c"))
/* dual interface */ ISwitchover;
struct /* coclass */ ACDHelpRequest;
struct /* coclass */ ACDHelpMonitor;
struct __declspec(uuid("1771e6e4-8e04-4ffb-aa47-5615d22b17ab"))
/* dual interface */ IACDHelpMonitor;
struct /* coclass */ EICUser3;
struct __declspec(uuid("d3cda638-634e-438a-aa81-cc196d72b75f"))
/* dual interface */ IEICUser3;
struct __declspec(uuid("0ac6c355-1679-4712-bc13-5f9db1d9fd5d"))
/* dual interface */ IUserForwarding;
enum ForwardingCallResults;
enum ForwardingOptions;
struct /* coclass */ EICQueue3;
struct __declspec(uuid("3f5abaae-2dda-4ba7-a0b0-82222831109e"))
/* dual interface */ IEICQueue3;
struct /* coclass */ UserForwarding;
struct /* coclass */ IWebCallbackObject2;
struct __declspec(uuid("5cbe45dc-357a-4dd9-b3e1-a06b75aaafde"))
/* dual interface */ IIWebCallbackObject2;
struct __declspec(uuid("8fbfaa00-8cb2-11d3-b28d-0090272dcf18"))
/* dual interface */ IEICMarshaller;
struct /* coclass */ EICServer2;
struct __declspec(uuid("520a0ffc-9cd3-11d3-bfc9-0080c88f546c"))
/* dual interface */ IEICServer2;
struct __declspec(uuid("520a0ffe-9cd3-11d3-bfc9-0080c88f546c"))
/* dual interface */ IEICServer2Watcher;
struct /* coclass */ EICCallObject2;
struct /* coclass */ EICQueue2;
struct /* coclass */ EICServer3;
struct __declspec(uuid("36a8bd1f-0abe-41c8-bfc3-2f532b49da1f"))
/* dual interface */ IEICServer3;
struct __declspec(uuid("9bbb68e3-793f-454c-afaf-f755bb58c9b7"))
/* dual interface */ IClientServicesWatcher;
struct /* coclass */ SIPPhone;
struct __declspec(uuid("7054f4f6-ba6a-4d5d-8253-ccaf2294ec3d"))
/* dual interface */ ISIPPhone2;
struct __declspec(uuid("d0e9814b-a68d-41a1-b79a-5efd81ea2618"))
/* dual interface */ ISIPPhone;
struct /* coclass */ CSConnectProfile;
struct __declspec(uuid("484e34f0-54f0-429f-b380-a5af45b04662"))
/* dual interface */ ICSConnectProfile;
struct /* coclass */ RecorderObject;
struct __declspec(uuid("0196b52f-3748-4a3e-b625-4f21422c8fb4"))
/* dual interface */ IRecorderObject;
struct /* coclass */ EICDSAction;
struct __declspec(uuid("530f3274-d7d2-45d8-a40e-1663af4920b1"))
/* dual interface */ IEICDSAction;
struct /* coclass */ EICDirectory2Ex;
struct __declspec(uuid("522265ee-7ef8-4e2a-be44-393fae8d3b12"))
/* dual interface */ IEICDirectory2Ex;
struct /* coclass */ Licensing;
struct __declspec(uuid("d8e9491d-dc62-4267-8559-17c9820d2106"))
/* dual interface */ ILicensing;
enum ACDStatus;
struct /* coclass */ Login;
struct __declspec(uuid("195d252f-79ac-42cd-a2d1-ac5e3295b9ad"))
/* dual interface */ ILogin;
struct /* coclass */ ExtendedDial;
struct __declspec(uuid("b7a19e97-9ca5-460d-8b89-47aa77c9e588"))
/* dual interface */ IExtendedDial;
struct /* coclass */ DialParameters;
struct __declspec(uuid("365a6157-3a27-42d2-8c20-3bd1d18b7bfe"))
/* dual interface */ IDialParameters;
struct /* coclass */ ExtendedDial2;
struct __declspec(uuid("9e5f8c8b-f51c-4689-bd6f-8712300d458b"))
/* dual interface */ IExtendedDial2;
struct /* coclass */ EICClientCOMUpdate;
struct __declspec(uuid("fdb2ac1f-cdd0-4c10-a0c6-4a317c45ecca"))
/* dual interface */ IEICClientCOMUpdate;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IEICQueueWatcher, __uuidof(IEICQueueWatcher));
_COM_SMARTPTR_TYPEDEF(IEICQueue, __uuidof(IEICQueue));
_COM_SMARTPTR_TYPEDEF(IEICQueueObject2, __uuidof(IEICQueueObject2));
_COM_SMARTPTR_TYPEDEF(IEICQueue2, __uuidof(IEICQueue2));
_COM_SMARTPTR_TYPEDEF(IEICQueue2Watcher, __uuidof(IEICQueue2Watcher));
_COM_SMARTPTR_TYPEDEF(IEICQueueObject2Watcher, __uuidof(IEICQueueObject2Watcher));
_COM_SMARTPTR_TYPEDEF(IEICChatObject2, __uuidof(IEICChatObject2));
_COM_SMARTPTR_TYPEDEF(IEICChatObject2Watcher, __uuidof(IEICChatObject2Watcher));
_COM_SMARTPTR_TYPEDEF(IEICCallObject2Watcher, __uuidof(IEICCallObject2Watcher));
_COM_SMARTPTR_TYPEDEF(IEICChatObject2Watcher2, __uuidof(IEICChatObject2Watcher2));
_COM_SMARTPTR_TYPEDEF(IEICCallObject2Watcher2, __uuidof(IEICCallObject2Watcher2));
_COM_SMARTPTR_TYPEDEF(IEICQueueStatData, __uuidof(IEICQueueStatData));
_COM_SMARTPTR_TYPEDEF(IEICQueueStats, __uuidof(IEICQueueStats));
_COM_SMARTPTR_TYPEDEF(IEICQueueStatWatcher, __uuidof(IEICQueueStatWatcher));
_COM_SMARTPTR_TYPEDEF(IEICWorkgroupStats, __uuidof(IEICWorkgroupStats));
_COM_SMARTPTR_TYPEDEF(IEICWorkgroupStatWatcher, __uuidof(IEICWorkgroupStatWatcher));
_COM_SMARTPTR_TYPEDEF(IEICUserWatcher, __uuidof(IEICUserWatcher));
_COM_SMARTPTR_TYPEDEF(IEICUser, __uuidof(IEICUser));
_COM_SMARTPTR_TYPEDEF(IEICUserEx, __uuidof(IEICUserEx));
_COM_SMARTPTR_TYPEDEF(IEICUserS, __uuidof(IEICUserS));
_COM_SMARTPTR_TYPEDEF(IEICWorkgroupWatcher, __uuidof(IEICWorkgroupWatcher));
_COM_SMARTPTR_TYPEDEF(IEICWorkgroup, __uuidof(IEICWorkgroup));
_COM_SMARTPTR_TYPEDEF(IEICWorkgroup2Watcher, __uuidof(IEICWorkgroup2Watcher));
_COM_SMARTPTR_TYPEDEF(IEICConferenceObject2Watcher, __uuidof(IEICConferenceObject2Watcher));
_COM_SMARTPTR_TYPEDEF(IEICWorkgroup2Watcher2, __uuidof(IEICWorkgroup2Watcher2));
_COM_SMARTPTR_TYPEDEF(IACDHelpRequest, __uuidof(IACDHelpRequest));
_COM_SMARTPTR_TYPEDEF(IACDHelpMonitorCallback, __uuidof(IACDHelpMonitorCallback));
_COM_SMARTPTR_TYPEDEF(ISIPPhoneWatcher, __uuidof(ISIPPhoneWatcher));
_COM_SMARTPTR_TYPEDEF(IEICQueue2WatcherAdapter, __uuidof(IEICQueue2WatcherAdapter));
_COM_SMARTPTR_TYPEDEF(IEICRemoteConnection, __uuidof(IEICRemoteConnection));
_COM_SMARTPTR_TYPEDEF(IEICConnection, __uuidof(IEICConnection));
_COM_SMARTPTR_TYPEDEF(IEICChatObjectWatcher, __uuidof(IEICChatObjectWatcher));
_COM_SMARTPTR_TYPEDEF(IEICChatObject, __uuidof(IEICChatObject));
_COM_SMARTPTR_TYPEDEF(IEICQueueObjectWatcher, __uuidof(IEICQueueObjectWatcher));
_COM_SMARTPTR_TYPEDEF(IEICCallObject, __uuidof(IEICCallObject));
_COM_SMARTPTR_TYPEDEF(IEICWorkgroupEntry, __uuidof(IEICWorkgroupEntry));
_COM_SMARTPTR_TYPEDEF(IEICConferenceObject, __uuidof(IEICConferenceObject));
_COM_SMARTPTR_TYPEDEF(IEICQueueStatDataS, __uuidof(IEICQueueStatDataS));
_COM_SMARTPTR_TYPEDEF(IEICWorkgroupStatsS, __uuidof(IEICWorkgroupStatsS));
_COM_SMARTPTR_TYPEDEF(IEICStatistics, __uuidof(IEICStatistics));
_COM_SMARTPTR_TYPEDEF(IEICLogEvent, __uuidof(IEICLogEvent));
_COM_SMARTPTR_TYPEDEF(IEICLogging, __uuidof(IEICLogging));
_COM_SMARTPTR_TYPEDEF(IEICNames, __uuidof(IEICNames));
_COM_SMARTPTR_TYPEDEF(IEICDS, __uuidof(IEICDS));
_COM_SMARTPTR_TYPEDEF(IEICDSEntry, __uuidof(IEICDSEntry));
_COM_SMARTPTR_TYPEDEF(IEICDSCustomEntry, __uuidof(IEICDSCustomEntry));
_COM_SMARTPTR_TYPEDEF(IEICDS2, __uuidof(IEICDS2));
_COM_SMARTPTR_TYPEDEF(IEICDS3, __uuidof(IEICDS3));
_COM_SMARTPTR_TYPEDEF(IEICDSUser, __uuidof(IEICDSUser));
_COM_SMARTPTR_TYPEDEF(IEICDSWorkgroup, __uuidof(IEICDSWorkgroup));
_COM_SMARTPTR_TYPEDEF(IEICDSStation, __uuidof(IEICDSStation));
_COM_SMARTPTR_TYPEDEF(IEICDSStationEx, __uuidof(IEICDSStationEx));
_COM_SMARTPTR_TYPEDEF(IEICGenericObject2, __uuidof(IEICGenericObject2));
_COM_SMARTPTR_TYPEDEF(IEICUserStatus, __uuidof(IEICUserStatus));
_COM_SMARTPTR_TYPEDEF(IEICCampEvent, __uuidof(IEICCampEvent));
_COM_SMARTPTR_TYPEDEF(IEICCampMonitor, __uuidof(IEICCampMonitor));
_COM_SMARTPTR_TYPEDEF(IEICQueueObject2WatcherAdapter, __uuidof(IEICQueueObject2WatcherAdapter));
_COM_SMARTPTR_TYPEDEF(IEICChatObject2WatcherAdapter, __uuidof(IEICChatObject2WatcherAdapter));
_COM_SMARTPTR_TYPEDEF(IEICCallObject2WatcherAdapter, __uuidof(IEICCallObject2WatcherAdapter));
_COM_SMARTPTR_TYPEDEF(IEICWorkgroup2, __uuidof(IEICWorkgroup2));
_COM_SMARTPTR_TYPEDEF(IEICCallObject2, __uuidof(IEICCallObject2));
_COM_SMARTPTR_TYPEDEF(IEICConferenceObject2, __uuidof(IEICConferenceObject2));
_COM_SMARTPTR_TYPEDEF(IEICEmailObject2, __uuidof(IEICEmailObject2));
_COM_SMARTPTR_TYPEDEF(IEICEmailObject2Response, __uuidof(IEICEmailObject2Response));
_COM_SMARTPTR_TYPEDEF(IEICEmailObject2Ex, __uuidof(IEICEmailObject2Ex));
_COM_SMARTPTR_TYPEDEF(IEICQueueObjectWatcherAdapter, __uuidof(IEICQueueObjectWatcherAdapter));
_COM_SMARTPTR_TYPEDEF(IEICCallAcoustics, __uuidof(IEICCallAcoustics));
_COM_SMARTPTR_TYPEDEF(IIWebCallbackObject, __uuidof(IIWebCallbackObject));
_COM_SMARTPTR_TYPEDEF(IIWebInstantQuestion, __uuidof(IIWebInstantQuestion));
_COM_SMARTPTR_TYPEDEF(IIWebWebSession, __uuidof(IIWebWebSession));
_COM_SMARTPTR_TYPEDEF(IIWebBrowserSync, __uuidof(IIWebBrowserSync));
_COM_SMARTPTR_TYPEDEF(IIWebBrowserSync2, __uuidof(IIWebBrowserSync2));
_COM_SMARTPTR_TYPEDEF(IEICNotification, __uuidof(IEICNotification));
_COM_SMARTPTR_TYPEDEF(IEICServerWatcher, __uuidof(IEICServerWatcher));
_COM_SMARTPTR_TYPEDEF(IEICNotificationSink, __uuidof(IEICNotificationSink));
_COM_SMARTPTR_TYPEDEF(ISwitchover, __uuidof(ISwitchover));
_COM_SMARTPTR_TYPEDEF(IACDHelpMonitor, __uuidof(IACDHelpMonitor));
_COM_SMARTPTR_TYPEDEF(IUserForwarding, __uuidof(IUserForwarding));
_COM_SMARTPTR_TYPEDEF(IEICQueue3, __uuidof(IEICQueue3));
_COM_SMARTPTR_TYPEDEF(IIWebCallbackObject2, __uuidof(IIWebCallbackObject2));
_COM_SMARTPTR_TYPEDEF(IEICMarshaller, __uuidof(IEICMarshaller));
_COM_SMARTPTR_TYPEDEF(IEICServer2Watcher, __uuidof(IEICServer2Watcher));
_COM_SMARTPTR_TYPEDEF(IEICServer2, __uuidof(IEICServer2));
_COM_SMARTPTR_TYPEDEF(IClientServicesWatcher, __uuidof(IClientServicesWatcher));
_COM_SMARTPTR_TYPEDEF(IEICServer3, __uuidof(IEICServer3));
_COM_SMARTPTR_TYPEDEF(ISIPPhone, __uuidof(ISIPPhone));
_COM_SMARTPTR_TYPEDEF(ISIPPhone2, __uuidof(ISIPPhone2));
_COM_SMARTPTR_TYPEDEF(ICSConnectProfile, __uuidof(ICSConnectProfile));
_COM_SMARTPTR_TYPEDEF(IRecorderObject, __uuidof(IRecorderObject));
_COM_SMARTPTR_TYPEDEF(IEICDSAction, __uuidof(IEICDSAction));
_COM_SMARTPTR_TYPEDEF(ILicensing, __uuidof(ILicensing));
_COM_SMARTPTR_TYPEDEF(ILogin, __uuidof(ILogin));
_COM_SMARTPTR_TYPEDEF(IExtendedDial, __uuidof(IExtendedDial));
_COM_SMARTPTR_TYPEDEF(IDialParameters, __uuidof(IDialParameters));
_COM_SMARTPTR_TYPEDEF(IExtendedDial2, __uuidof(IExtendedDial2));
_COM_SMARTPTR_TYPEDEF(IEICClientCOMUpdate, __uuidof(IEICClientCOMUpdate));
_COM_SMARTPTR_TYPEDEF(IEICUserEx2Watcher, __uuidof(IEICUserEx2Watcher));
_COM_SMARTPTR_TYPEDEF(IEICUserEx2, __uuidof(IEICUserEx2));
_COM_SMARTPTR_TYPEDEF(IEICUser3, __uuidof(IEICUser3));
_COM_SMARTPTR_TYPEDEF(IEICDirectory, __uuidof(IEICDirectory));
_COM_SMARTPTR_TYPEDEF(IEICDirectoryWatcher, __uuidof(IEICDirectoryWatcher));
_COM_SMARTPTR_TYPEDEF(IEICDirectory2, __uuidof(IEICDirectory2));
_COM_SMARTPTR_TYPEDEF(IEICDirectoryEntry, __uuidof(IEICDirectoryEntry));
_COM_SMARTPTR_TYPEDEF(IEICDirectory2Watcher, __uuidof(IEICDirectory2Watcher));
_COM_SMARTPTR_TYPEDEF(IEICDirectory2Ex, __uuidof(IEICDirectory2Ex));
_COM_SMARTPTR_TYPEDEF(IEIC_UMFMessageWatcher, __uuidof(IEIC_UMFMessageWatcher));
_COM_SMARTPTR_TYPEDEF(IEIC_UMFMessage, __uuidof(IEIC_UMFMessage));
_COM_SMARTPTR_TYPEDEF(IEIC_UMFMessage2, __uuidof(IEIC_UMFMessage2));

//
// Type library items
//

struct __declspec(uuid("dcc7ad44-f185-11d1-bffe-00a0c9a79e7c"))
IEICQueueWatcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ObjectAdded (
        long p_Type,
        long p_Id );
    HRESULT ObjectChanged (
        long p_Type,
        long p_Id );
    HRESULT ObjectRemoved (
        long p_Type,
        long p_Id );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ObjectAdded (
        /*[in]*/ long p_Type,
        /*[in]*/ long p_Id ) = 0;
      virtual HRESULT __stdcall raw_ObjectChanged (
        /*[in]*/ long p_Type,
        /*[in]*/ long p_Id ) = 0;
      virtual HRESULT __stdcall raw_ObjectRemoved (
        /*[in]*/ long p_Type,
        /*[in]*/ long p_Id ) = 0;
};

struct __declspec(uuid("dcc7ad43-f185-11d1-bffe-00a0c9a79e7c"))
IEICQueue : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActiveMonitor,put=PutActiveMonitor))
    VARIANT_BOOL ActiveMonitor;
    __declspec(property(get=GetObjects))
    _variant_t Objects;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Connect (
        long p_Type,
        _bstr_t p_Name );
    HRESULT SetChangeHandler (
        struct IEICQueueWatcher * p_Handler );
    VARIANT_BOOL GetActiveMonitor ( );
    void PutActiveMonitor (
        VARIANT_BOOL pVal );
    _variant_t GetObjects ( );
    long GetType ( );
    _bstr_t GetName ( );
    HRESULT StartObjectsList ( );
    HRESULT GetNextObject (
        long * p_Type,
        long * p_Id );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ long p_Type,
        /*[in]*/ BSTR p_Name ) = 0;
      virtual HRESULT __stdcall raw_SetChangeHandler (
        /*[in]*/ struct IEICQueueWatcher * p_Handler ) = 0;
      virtual HRESULT __stdcall get_ActiveMonitor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ActiveMonitor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Objects (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_StartObjectsList ( ) = 0;
      virtual HRESULT __stdcall raw_GetNextObject (
        /*[out]*/ long * p_Type,
        /*[out]*/ long * p_Id ) = 0;
};

struct __declspec(uuid("beffc280-c8d8-11d3-b37e-0050da2c4eb8"))
IEICQueueObject2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId,put=PutId))
    long Id;
    __declspec(property(get=GetState))
    long State;
    __declspec(property(get=GetStateString,put=PutStateString))
    _bstr_t StateString;
    __declspec(property(get=GetLocalName))
    _bstr_t LocalName;
    __declspec(property(get=GetLocalLocation))
    _bstr_t LocalLocation;
    __declspec(property(get=GetLocalId))
    _bstr_t LocalId;
    __declspec(property(get=GetRemoteName,put=PutRemoteName))
    _bstr_t RemoteName;
    __declspec(property(get=GetRemoteLocation))
    _bstr_t RemoteLocation;
    __declspec(property(get=GetRemoteId))
    _bstr_t RemoteId;
    __declspec(property(get=GetCreationTime))
    DATE CreationTime;
    __declspec(property(get=GetDirection))
    short Direction;
    __declspec(property(get=GetisHeld))
    VARIANT_BOOL isHeld;
    __declspec(property(get=GetisRecording))
    VARIANT_BOOL isRecording;
    __declspec(property(get=GetisPaused))
    VARIANT_BOOL isPaused;
    __declspec(property(get=GetisMuted))
    VARIANT_BOOL isMuted;
    __declspec(property(get=GetisPrivate))
    VARIANT_BOOL isPrivate;
    __declspec(property(get=GetisMonitored))
    VARIANT_BOOL isMonitored;
    __declspec(property(get=GetisParty))
    VARIANT_BOOL isParty;
    __declspec(property(get=GetConferenceId))
    long ConferenceId;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetUserQueueName))
    _bstr_t UserQueueName;
    __declspec(property(get=GetStationName))
    _bstr_t StationName;
    __declspec(property(get=GetLineName))
    _bstr_t LineName;
    __declspec(property(get=GetQueueList))
    _variant_t QueueList;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    void PutId (
        long pVal );
    long GetState ( );
    _bstr_t GetStateString ( );
    void PutStateString (
        _bstr_t pVal );
    _bstr_t GetLocalName ( );
    _bstr_t GetLocalLocation ( );
    _bstr_t GetLocalId ( );
    _bstr_t GetRemoteName ( );
    void PutRemoteName (
        _bstr_t pVal );
    _bstr_t GetRemoteLocation ( );
    _bstr_t GetRemoteId ( );
    DATE GetCreationTime ( );
    short GetDirection ( );
    VARIANT_BOOL GetisHeld ( );
    VARIANT_BOOL GetisRecording ( );
    VARIANT_BOOL GetisPaused ( );
    VARIANT_BOOL GetisMuted ( );
    VARIANT_BOOL GetisPrivate ( );
    VARIANT_BOOL GetisMonitored ( );
    VARIANT_BOOL GetisParty ( );
    long GetConferenceId ( );
    HRESULT Pickup (
        struct IEICQueue * p_IfOnQueue );
    HRESULT Disconnect (
        struct IEICQueue * p_IfOnQueue );
    HRESULT Listen (
        struct IEICQueue * p_IfOnQueue );
    HRESULT Record (
        struct IEICQueue * p_IfOnQueue );
    HRESULT Pause ( );
    HRESULT Mute (
        struct IEICQueue * p_IfOnQueue );
    HRESULT Hold (
        _bstr_t p_ToUserQueue,
        struct IEICQueue * p_IfOnQueue );
    HRESULT Private (
        struct IEICQueue * p_IfOnQueue );
    HRESULT SendToVoiceMail (
        struct IEICQueue * p_IfOnQueue );
    HRESULT BlindTransfer (
        _bstr_t p_ToNumber,
        struct IEICQueue * p_IfOnQueue );
    HRESULT ConsultTransfer (
        long p_WithCall,
        struct IEICQueue * p_IfOnQueue );
    HRESULT GetCreationTime (
        short * hour,
        short * minute,
        short * second );
    HRESULT GetNamedAttribute (
        _bstr_t p_Name,
        BSTR * p_Value );
    HRESULT SetNamedAttribute (
        _bstr_t p_Name,
        _bstr_t p_Value );
    HRESULT GetNameAttributeList (
        const _variant_t & p_Names,
        VARIANT * p_Values );
    HRESULT SetNameAttributeList (
        const _variant_t & p_Names,
        const _variant_t & p_Values );
    HRESULT SetMarshalledCallback (
        IUnknown * p_Watcher );
    HRESULT SetThreadCallback (
        IUnknown * p_Watcher );
    _bstr_t GetUserQueueName ( );
    _bstr_t GetStationName ( );
    _bstr_t GetLineName ( );
    _variant_t GetQueueList ( );
    HRESULT PickupForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        struct IEICQueue * p_IfOnQueue );
    HRESULT DisconnectForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        struct IEICQueue * p_IfOnQueue );
    HRESULT ListenForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        struct IEICQueue * p_IfOnQueue );
    HRESULT RecordForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        struct IEICQueue * p_IfOnQueue );
    HRESULT MuteForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        struct IEICQueue * p_IfOnQueue );
    HRESULT HoldForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        _bstr_t p_ToUserQueue,
        struct IEICQueue * p_IfOnQueue );
    HRESULT PrivateForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        struct IEICQueue * p_IfOnQueue );
    HRESULT SendToVoiceMailForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        struct IEICQueue * p_IfOnQueue );
    HRESULT BlindTransferForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        _bstr_t p_ToNumber,
        struct IEICQueue * p_IfOnQueue );
    HRESULT ConsultTransferForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        long p_WithCall,
        struct IEICQueue * p_IfOnQueue );
    HRESULT PauseForUser (
        _bstr_t p_User,
        _bstr_t p_Station );
    long GetType ( );
    _bstr_t GetNamedAttributeS (
        _bstr_t p_Name );
    _variant_t GetNameAttributeListS (
        const _variant_t & p_Names );
    _variant_t GetCreationTimeS ( );
    long GetValidActions (
        _bstr_t p_User,
        _bstr_t p_Station );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_StateString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StateString (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LocalName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LocalLocation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LocalId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RemoteName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoteName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RemoteLocation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RemoteId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CreationTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_isHeld (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isRecording (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isPaused (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isMuted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isPrivate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isMonitored (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isParty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ConferenceId (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Pickup (
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_Disconnect (
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_Listen (
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_Record (
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Mute (
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_Hold (
        /*[in]*/ BSTR p_ToUserQueue,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_Private (
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_SendToVoiceMail (
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_BlindTransfer (
        /*[in]*/ BSTR p_ToNumber,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_ConsultTransfer (
        /*[in]*/ long p_WithCall,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_GetCreationTime (
        /*[out]*/ short * hour,
        /*[out]*/ short * minute,
        /*[out]*/ short * second ) = 0;
      virtual HRESULT __stdcall raw_GetNamedAttribute (
        /*[in]*/ BSTR p_Name,
        /*[out]*/ BSTR * p_Value ) = 0;
      virtual HRESULT __stdcall raw_SetNamedAttribute (
        /*[in]*/ BSTR p_Name,
        /*[in]*/ BSTR p_Value ) = 0;
      virtual HRESULT __stdcall raw_GetNameAttributeList (
        /*[in]*/ VARIANT p_Names,
        /*[out]*/ VARIANT * p_Values ) = 0;
      virtual HRESULT __stdcall raw_SetNameAttributeList (
        /*[in]*/ VARIANT p_Names,
        /*[in]*/ VARIANT p_Values ) = 0;
      virtual HRESULT __stdcall raw_SetMarshalledCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_SetThreadCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
      virtual HRESULT __stdcall get_UserQueueName (
        /*[out,retval]*/ BSTR * p_UserQueue ) = 0;
      virtual HRESULT __stdcall get_StationName (
        /*[out,retval]*/ BSTR * p_StationName ) = 0;
      virtual HRESULT __stdcall get_LineName (
        /*[out,retval]*/ BSTR * p_LineName ) = 0;
      virtual HRESULT __stdcall get_QueueList (
        /*[out,retval]*/ VARIANT * p_QueueList ) = 0;
      virtual HRESULT __stdcall raw_PickupForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_DisconnectForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_ListenForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_RecordForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_MuteForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_HoldForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ BSTR p_ToUserQueue,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_PrivateForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_SendToVoiceMailForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_BlindTransferForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ BSTR p_ToNumber,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_ConsultTransferForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ long p_WithCall,
        /*[in]*/ struct IEICQueue * p_IfOnQueue ) = 0;
      virtual HRESULT __stdcall raw_PauseForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * p_Type ) = 0;
      virtual HRESULT __stdcall raw_GetNamedAttributeS (
        /*[in]*/ BSTR p_Name,
        /*[out,retval]*/ BSTR * p_Value ) = 0;
      virtual HRESULT __stdcall raw_GetNameAttributeListS (
        /*[in]*/ VARIANT p_Names,
        /*[out,retval]*/ VARIANT * p_Values ) = 0;
      virtual HRESULT __stdcall raw_GetCreationTimeS (
        /*[out,retval]*/ VARIANT * p_Time ) = 0;
      virtual HRESULT __stdcall raw_GetValidActions (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[out,retval]*/ long * p_ActionMask ) = 0;
};

struct __declspec(uuid("beffc284-c8d8-11d3-b37e-0050da2c4eb8"))
IEICQueue2 : IEICQueue
{
    //
    // Property data
    //

    __declspec(property(get=GetQueueObjects))
    _variant_t QueueObjects;
    __declspec(property(get=GetTotalCallsToday))
    long TotalCallsToday;
    __declspec(property(get=GetTotalActiveTimeToday))
    long TotalActiveTimeToday;
    __declspec(property(get=GetLongestCallToday))
    long LongestCallToday;
    __declspec(property(get=GetAvgCallDurationToday))
    long AvgCallDurationToday;
    __declspec(property(get=GetAbandonedCallsToday))
    long AbandonedCallsToday;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetQueueObjects ( );
    IEICQueueObject2Ptr GetNextQueueObject ( );
    HRESULT SetMarshalledCallback (
        IUnknown * p_Watcher );
    HRESULT SetThreadCallback (
        IUnknown * p_Watcher );
    HRESULT ConnectClient (
        _bstr_t p_Name,
        _bstr_t p_Desc );
    HRESULT DisconnectClient (
        _bstr_t p_Name );
    long GetTotalCallsToday ( );
    long GetTotalActiveTimeToday ( );
    long GetLongestCallToday ( );
    long GetAvgCallDurationToday ( );
    long GetAbandonedCallsToday ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_QueueObjects (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNextQueueObject (
        /*[out,retval]*/ struct IEICQueueObject2 * * p_Object ) = 0;
      virtual HRESULT __stdcall raw_SetMarshalledCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_SetThreadCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_ConnectClient (
        /*[in]*/ BSTR p_Name,
        /*[in]*/ BSTR p_Desc ) = 0;
      virtual HRESULT __stdcall raw_DisconnectClient (
        /*[in]*/ BSTR p_Name ) = 0;
      virtual HRESULT __stdcall get_TotalCallsToday (
        /*[out,retval]*/ long * p_Calls ) = 0;
      virtual HRESULT __stdcall get_TotalActiveTimeToday (
        /*[out,retval]*/ long * p_Calls ) = 0;
      virtual HRESULT __stdcall get_LongestCallToday (
        /*[out,retval]*/ long * p_Calls ) = 0;
      virtual HRESULT __stdcall get_AvgCallDurationToday (
        /*[out,retval]*/ long * p_Calls ) = 0;
      virtual HRESULT __stdcall get_AbandonedCallsToday (
        /*[out,retval]*/ long * p_Calls ) = 0;
};

struct __declspec(uuid("beffc282-c8d8-11d3-b37e-0050da2c4eb8"))
IEICQueue2Watcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ObjectAdded (
        struct IEICQueue2 * p_Queue,
        struct IEICQueueObject2 * p_Object );
    HRESULT ObjectChanged (
        struct IEICQueue2 * p_Queue,
        struct IEICQueueObject2 * p_Object );
    HRESULT ObjectRemoved (
        struct IEICQueue2 * p_Queue,
        long p_Id );
    HRESULT StatisticsUpdated (
        struct IEICQueue2 * p_Queue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ObjectAdded (
        /*[in]*/ struct IEICQueue2 * p_Queue,
        /*[in]*/ struct IEICQueueObject2 * p_Object ) = 0;
      virtual HRESULT __stdcall raw_ObjectChanged (
        /*[in]*/ struct IEICQueue2 * p_Queue,
        /*[in]*/ struct IEICQueueObject2 * p_Object ) = 0;
      virtual HRESULT __stdcall raw_ObjectRemoved (
        /*[in]*/ struct IEICQueue2 * p_Queue,
        /*[in]*/ long p_Id ) = 0;
      virtual HRESULT __stdcall raw_StatisticsUpdated (
        /*[in]*/ struct IEICQueue2 * p_Queue ) = 0;
};

struct __declspec(uuid("beffc285-c8d8-11d3-b37e-0050da2c4eb8"))
IEICQueueObject2Watcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StateChanged (
        struct IEICQueueObject2 * p_Object,
        long p_NewState,
        _bstr_t p_StateString );
    HRESULT SubObjectChanged (
        struct IEICQueueObject2 * p_Object,
        struct IEICQueueObject2 * p_SubObject );
    HRESULT ObjectSpecificError (
        struct IEICQueueObject2 * p_Object,
        long p_Error );
    HRESULT ObjectDestroyed (
        struct IEICQueueObject2 * p_Object );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StateChanged (
        /*[in]*/ struct IEICQueueObject2 * p_Object,
        /*[in]*/ long p_NewState,
        /*[in]*/ BSTR p_StateString ) = 0;
      virtual HRESULT __stdcall raw_SubObjectChanged (
        /*[in]*/ struct IEICQueueObject2 * p_Object,
        /*[in]*/ struct IEICQueueObject2 * p_SubObject ) = 0;
      virtual HRESULT __stdcall raw_ObjectSpecificError (
        /*[in]*/ struct IEICQueueObject2 * p_Object,
        /*[in]*/ long p_Error ) = 0;
      virtual HRESULT __stdcall raw_ObjectDestroyed (
        /*[in]*/ struct IEICQueueObject2 * p_Object ) = 0;
};

struct __declspec(uuid("beffc283-c8d8-11d3-b37e-0050da2c4eb8"))
IEICChatObject2 : IEICQueueObject2
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SendString (
        _bstr_t p_String );
    HRESULT SendURL (
        _bstr_t p_URL );
    HRESULT SendFile (
        _bstr_t p_FileName,
        _bstr_t p_FileData );
    HRESULT RequestSession (
        _bstr_t p_RequestingUserName,
        _bstr_t p_RequestingEmail,
        _bstr_t p_RequestingPhone,
        _bstr_t p_RequestingLocation,
        _bstr_t p_DestinationQueueName,
        _bstr_t p_SubjectOfChat );
    HRESULT RequestSessionForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        _bstr_t p_RequestingUserName,
        _bstr_t p_RequestingEmail,
        _bstr_t p_RequestingPhone,
        _bstr_t p_RequestingLocation,
        _bstr_t p_DestinationQueueName,
        _bstr_t p_SubjectOfChat );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SendString (
        /*[in]*/ BSTR p_String ) = 0;
      virtual HRESULT __stdcall raw_SendURL (
        /*[in]*/ BSTR p_URL ) = 0;
      virtual HRESULT __stdcall raw_SendFile (
        /*[in]*/ BSTR p_FileName,
        /*[in]*/ BSTR p_FileData ) = 0;
      virtual HRESULT __stdcall raw_RequestSession (
        /*[in]*/ BSTR p_RequestingUserName,
        /*[in]*/ BSTR p_RequestingEmail,
        /*[in]*/ BSTR p_RequestingPhone,
        /*[in]*/ BSTR p_RequestingLocation,
        /*[in]*/ BSTR p_DestinationQueueName,
        /*[in]*/ BSTR p_SubjectOfChat ) = 0;
      virtual HRESULT __stdcall raw_RequestSessionForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ BSTR p_RequestingUserName,
        /*[in]*/ BSTR p_RequestingEmail,
        /*[in]*/ BSTR p_RequestingPhone,
        /*[in]*/ BSTR p_RequestingLocation,
        /*[in]*/ BSTR p_DestinationQueueName,
        /*[in]*/ BSTR p_SubjectOfChat ) = 0;
};

struct __declspec(uuid("beffc286-c8d8-11d3-b37e-0050da2c4eb8"))
IEICChatObject2Watcher : IEICQueueObject2Watcher
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ReceivedString (
        struct IEICChatObject2 * p_Object,
        _bstr_t p_User,
        _bstr_t p_String );
    HRESULT ReceivedUrl (
        struct IEICChatObject2 * p_Object,
        _bstr_t p_User,
        _bstr_t p_URL );
    HRESULT ReceivedFile (
        struct IEICChatObject2 * p_Object,
        _bstr_t p_User,
        _bstr_t p_FileName,
        _bstr_t p_FileData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ReceivedString (
        /*[in]*/ struct IEICChatObject2 * p_Object,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_String ) = 0;
      virtual HRESULT __stdcall raw_ReceivedUrl (
        /*[in]*/ struct IEICChatObject2 * p_Object,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_URL ) = 0;
      virtual HRESULT __stdcall raw_ReceivedFile (
        /*[in]*/ struct IEICChatObject2 * p_Object,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_FileName,
        /*[in]*/ BSTR p_FileData ) = 0;
};

struct __declspec(uuid("beffc287-c8d8-11d3-b37e-0050da2c4eb8"))
IEICCallObject2Watcher : IEICQueueObject2Watcher
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StatusChange (
        struct IEICQueueObject2 * p_Object );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StatusChange (
        /*[in]*/ struct IEICQueueObject2 * p_Object ) = 0;
};

struct __declspec(uuid("32543bd6-59c8-4c11-9766-1e9e640bbe7f"))
IEICChatObject2Watcher2 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ReceivedString (
        struct IEICChatObject2 * p_Object,
        _bstr_t p_User,
        _bstr_t p_String );
    HRESULT ReceivedUrl (
        struct IEICChatObject2 * p_Object,
        _bstr_t p_User,
        _bstr_t p_URL );
    HRESULT ReceivedFile (
        struct IEICChatObject2 * p_Object,
        _bstr_t p_User,
        _bstr_t p_FileName,
        _bstr_t p_FileData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ReceivedString (
        /*[in]*/ struct IEICChatObject2 * p_Object,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_String ) = 0;
      virtual HRESULT __stdcall raw_ReceivedUrl (
        /*[in]*/ struct IEICChatObject2 * p_Object,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_URL ) = 0;
      virtual HRESULT __stdcall raw_ReceivedFile (
        /*[in]*/ struct IEICChatObject2 * p_Object,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_FileName,
        /*[in]*/ BSTR p_FileData ) = 0;
};

struct __declspec(uuid("0ea36afb-9ba3-4250-9de5-7e55543c7680"))
IEICCallObject2Watcher2 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StatusChange (
        struct IEICQueueObject2 * p_Object );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StatusChange (
        /*[in]*/ struct IEICQueueObject2 * p_Object ) = 0;
};

struct __declspec(uuid("c389e622-3fa6-11d3-b26e-0090272dcf18"))
IEICQueueStatData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPeriodLength))
    long PeriodLength;
    __declspec(property(get=GetNumberOfCalls))
    long NumberOfCalls;
    __declspec(property(get=GetNumberAnswered))
    long NumberAnswered;
    __declspec(property(get=GetNumberCompleted))
    long NumberCompleted;
    __declspec(property(get=GetAverageWaitTime))
    double AverageWaitTime;
    __declspec(property(get=GetAverageTalkTime))
    double AverageTalkTime;

    //
    // Wrapper methods for error-handling
    //

    long GetPeriodLength ( );
    long GetNumberOfCalls ( );
    long GetNumberAnswered ( );
    long GetNumberCompleted ( );
    double GetAverageWaitTime ( );
    double GetAverageTalkTime ( );
    HRESULT GetAbandons (
        short * p_ArraySize,
        VARIANT * p_AbandonList );
    HRESULT GetServiceLevels (
        short * p_ArraySize,
        VARIANT * p_ServiceList );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PeriodLength (
        /*[out,retval]*/ long * p_Seconds ) = 0;
      virtual HRESULT __stdcall get_NumberOfCalls (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_NumberAnswered (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_NumberCompleted (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_AverageWaitTime (
        /*[out,retval]*/ double * p_Seconds ) = 0;
      virtual HRESULT __stdcall get_AverageTalkTime (
        /*[out,retval]*/ double * p_Seconds ) = 0;
      virtual HRESULT __stdcall raw_GetAbandons (
        /*[out]*/ short * p_ArraySize,
        /*[out]*/ VARIANT * p_AbandonList ) = 0;
      virtual HRESULT __stdcall raw_GetServiceLevels (
        /*[out]*/ short * p_ArraySize,
        /*[out]*/ VARIANT * p_ServiceList ) = 0;
};

struct __declspec(uuid("c389e624-3fa6-11d3-b26e-0090272dcf18"))
IEICQueueStats : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCallsWaiting))
    long CallsWaiting;
    __declspec(property(get=GetCallsAnswered))
    long CallsAnswered;
    __declspec(property(get=GetLongestWaiting))
    DATE LongestWaiting;
    __declspec(property(get=GetLongestTalkTime))
    DATE LongestTalkTime;
    __declspec(property(get=GetAgentsLoggedIn))
    long AgentsLoggedIn;
    __declspec(property(get=GetAgentsAvailable))
    long AgentsAvailable;
    __declspec(property(get=GetCurrentPeriod))
    IEICQueueStatDataPtr CurrentPeriod;
    __declspec(property(get=GetPreviousPeriod))
    IEICQueueStatDataPtr PreviousPeriod;
    __declspec(property(get=GetCurrentShift))
    IEICQueueStatDataPtr CurrentShift;
    __declspec(property(get=GetPreviousShift))
    IEICQueueStatDataPtr PreviousShift;

    //
    // Wrapper methods for error-handling
    //

    long GetCallsWaiting ( );
    long GetCallsAnswered ( );
    DATE GetLongestWaiting ( );
    DATE GetLongestTalkTime ( );
    long GetAgentsLoggedIn ( );
    long GetAgentsAvailable ( );
    HRESULT GetAbandonPeriods (
        short * p_ArraySize,
        VARIANT * p_AbandonTimes );
    HRESULT GetServiceLevelPeriods (
        short * p_ArraySize,
        VARIANT * p_ServiceTimes );
    IEICQueueStatDataPtr GetCurrentPeriod ( );
    IEICQueueStatDataPtr GetPreviousPeriod ( );
    IEICQueueStatDataPtr GetCurrentShift ( );
    IEICQueueStatDataPtr GetPreviousShift ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CallsWaiting (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_CallsAnswered (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_LongestWaiting (
        /*[out,retval]*/ DATE * p_StartTime ) = 0;
      virtual HRESULT __stdcall get_LongestTalkTime (
        /*[out,retval]*/ DATE * p_StartTime ) = 0;
      virtual HRESULT __stdcall get_AgentsLoggedIn (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_AgentsAvailable (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall raw_GetAbandonPeriods (
        /*[out]*/ short * p_ArraySize,
        /*[out]*/ VARIANT * p_AbandonTimes ) = 0;
      virtual HRESULT __stdcall raw_GetServiceLevelPeriods (
        /*[out]*/ short * p_ArraySize,
        /*[out]*/ VARIANT * p_ServiceTimes ) = 0;
      virtual HRESULT __stdcall get_CurrentPeriod (
        /*[out,retval]*/ struct IEICQueueStatData * * p_Data ) = 0;
      virtual HRESULT __stdcall get_PreviousPeriod (
        /*[out,retval]*/ struct IEICQueueStatData * * p_Data ) = 0;
      virtual HRESULT __stdcall get_CurrentShift (
        /*[out,retval]*/ struct IEICQueueStatData * * p_Data ) = 0;
      virtual HRESULT __stdcall get_PreviousShift (
        /*[out,retval]*/ struct IEICQueueStatData * * p_Data ) = 0;
};

struct __declspec(uuid("c389e623-3fa6-11d3-b26e-0090272dcf18"))
IEICQueueStatWatcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Change (
        struct IEICQueueStats * p_Data );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Change (
        /*[in]*/ struct IEICQueueStats * p_Data ) = 0;
};

struct __declspec(uuid("c389e621-3fa6-11d3-b26e-0090272dcf18"))
IEICWorkgroupStats : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAgents))
    long Agents;
    __declspec(property(get=GetAgentsLoggedIn))
    long AgentsLoggedIn;
    __declspec(property(get=GetAgentsAvailable))
    long AgentsAvailable;
    __declspec(property(get=GetLongestAvailable))
    DATE LongestAvailable;
    __declspec(property(get=GetNumberOnInbound))
    long NumberOnInbound;
    __declspec(property(get=GetNumberOnInboundInACW))
    long NumberOnInboundInACW;
    __declspec(property(get=GetLongestInbound))
    DATE LongestInbound;
    __declspec(property(get=GetNumberOnOutbound))
    long NumberOnOutbound;
    __declspec(property(get=GetNumberOnOutboundInACW))
    long NumberOnOutboundInACW;
    __declspec(property(get=GetLongestOutbound))
    DATE LongestOutbound;
    __declspec(property(get=GetNumberNonACD))
    long NumberNonACD;
    __declspec(property(get=GetLongestNonACD))
    DATE LongestNonACD;

    //
    // Wrapper methods for error-handling
    //

    long GetAgents ( );
    long GetAgentsLoggedIn ( );
    long GetAgentsAvailable ( );
    DATE GetLongestAvailable ( );
    long GetNumberOnInbound ( );
    long GetNumberOnInboundInACW ( );
    DATE GetLongestInbound ( );
    long GetNumberOnOutbound ( );
    long GetNumberOnOutboundInACW ( );
    DATE GetLongestOutbound ( );
    long GetNumberNonACD ( );
    DATE GetLongestNonACD ( );
    HRESULT GetStatusSummaryInfo (
        short * p_ArraySize,
        VARIANT * p_StatusKeys,
        VARIANT * p_StatusCounts );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Agents (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_AgentsLoggedIn (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_AgentsAvailable (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_LongestAvailable (
        /*[out,retval]*/ DATE * p_StartTime ) = 0;
      virtual HRESULT __stdcall get_NumberOnInbound (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_NumberOnInboundInACW (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_LongestInbound (
        /*[out,retval]*/ DATE * p_StartTime ) = 0;
      virtual HRESULT __stdcall get_NumberOnOutbound (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_NumberOnOutboundInACW (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_LongestOutbound (
        /*[out,retval]*/ DATE * p_StartTime ) = 0;
      virtual HRESULT __stdcall get_NumberNonACD (
        /*[out,retval]*/ long * p_Count ) = 0;
      virtual HRESULT __stdcall get_LongestNonACD (
        /*[out,retval]*/ DATE * p_StartTime ) = 0;
      virtual HRESULT __stdcall raw_GetStatusSummaryInfo (
        /*[out]*/ short * p_ArraySize,
        /*[out]*/ VARIANT * p_StatusKeys,
        /*[out]*/ VARIANT * p_StatusCounts ) = 0;
};

struct __declspec(uuid("c389e626-3fa6-11d3-b26e-0090272dcf18"))
IEICWorkgroupStatWatcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Change (
        struct IEICWorkgroupStats * p_Data );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Change (
        /*[in]*/ struct IEICWorkgroupStats * p_Data ) = 0;
};

struct __declspec(uuid("918ebe75-fa5d-11d1-8001-00a0c9a79e7c"))
IEICUserWatcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StatusChanged (
        _bstr_t p_NewStatus,
        DATE p_UntilDateTime );
    HRESULT UserChanged ( );
    HRESULT UserLoginChanged (
        _bstr_t p_Station,
        VARIANT_BOOL p_Login );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StatusChanged (
        /*[in]*/ BSTR p_NewStatus,
        /*[in]*/ DATE p_UntilDateTime ) = 0;
      virtual HRESULT __stdcall raw_UserChanged ( ) = 0;
      virtual HRESULT __stdcall raw_UserLoginChanged (
        /*[in]*/ BSTR p_Station,
        /*[in]*/ VARIANT_BOOL p_Login ) = 0;
};

struct __declspec(uuid("871962b3-fa2d-11d1-8001-00a0c9a79e7c"))
IEICUser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId,put=PutId))
    _bstr_t Id;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAvailableStatusMessages))
    _variant_t AvailableStatusMessages;
    __declspec(property(get=GetStatusMessage,put=PutStatusMessage))
    _bstr_t StatusMessage;
    __declspec(property(get=GetisDND))
    VARIANT_BOOL isDND;
    __declspec(property(get=GetUntilDateTime,put=PutUntilDateTime))
    DATE UntilDateTime;
    __declspec(property(get=GetisOnPhone))
    VARIANT_BOOL isOnPhone;
    __declspec(property(get=GetExtension))
    _bstr_t Extension;
    __declspec(property(get=GetCanRecord))
    VARIANT_BOOL CanRecord;
    __declspec(property(get=GetCanListen))
    VARIANT_BOOL CanListen;
    __declspec(property(get=GetCanMakePrivate))
    VARIANT_BOOL CanMakePrivate;
    __declspec(property(get=GetLoggedInStations))
    _variant_t LoggedInStations;
    __declspec(property(get=GetIsLoggedIn))
    VARIANT_BOOL IsLoggedIn;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetId ( );
    void PutId (
        _bstr_t pVal );
    _bstr_t GetName ( );
    _variant_t GetAvailableStatusMessages ( );
    _bstr_t GetStatusMessage ( );
    void PutStatusMessage (
        _bstr_t pVal );
    VARIANT_BOOL GetisDND ( );
    DATE GetUntilDateTime ( );
    void PutUntilDateTime (
        DATE pVal );
    HRESULT SetUntilDateTime (
        short year,
        short month,
        short day,
        short hour,
        short minute );
    HRESULT GetUntilDateTime (
        short * year,
        short * month,
        short * day,
        short * hour,
        short * minute );
    VARIANT_BOOL GetisOnPhone ( );
    _bstr_t GetExtension ( );
    HRESULT SetChangeHandler (
        struct IEICUserWatcher * p_Handler );
    HRESULT Call (
        long * p_CallId );
    HRESULT Workgroups (
        VARIANT * p_Workgroups );
    HRESULT ViewableWorkgroups (
        VARIANT * p_Workgroups );
    HRESULT AccessibleQueues (
        VARIANT * p_Queues );
    VARIANT_BOOL GetCanRecord ( );
    VARIANT_BOOL GetCanListen ( );
    VARIANT_BOOL GetCanMakePrivate ( );
    HRESULT StartWorkgroupsList ( );
    HRESULT GetNextWorkgroup (
        BSTR * p_Name );
    HRESULT StartViewableWorkgroupsList ( );
    HRESULT GetNextViewableWorkgroup (
        BSTR * p_Name );
    HRESULT StartAccessibleQueuesList ( );
    HRESULT GetNextAccessibleQueues (
        BSTR * p_Name,
        long * p_Type,
        VARIANT_BOOL * p_Modifiable );
    HRESULT SetNonPersistentStatus (
        _bstr_t p_Status );
    HRESULT StartStatusMessages ( );
    HRESULT GetNextStatusMessage (
        BSTR * p_Text,
        VARIANT_BOOL * p_IsDND,
        VARIANT_BOOL * p_HasDate,
        VARIANT_BOOL * p_HasTime,
        BSTR * p_IconFileName );
    _variant_t GetLoggedInStations ( );
    VARIANT_BOOL GetIsLoggedIn ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableStatusMessages (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StatusMessage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StatusMessage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_isDND (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_UntilDateTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_UntilDateTime (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall raw_SetUntilDateTime (
        /*[in]*/ short year,
        /*[in]*/ short month,
        /*[in]*/ short day,
        /*[in]*/ short hour,
        /*[in]*/ short minute ) = 0;
      virtual HRESULT __stdcall raw_GetUntilDateTime (
        /*[out]*/ short * year,
        /*[out]*/ short * month,
        /*[out]*/ short * day,
        /*[out]*/ short * hour,
        /*[out]*/ short * minute ) = 0;
      virtual HRESULT __stdcall get_isOnPhone (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetChangeHandler (
        /*[in]*/ struct IEICUserWatcher * p_Handler ) = 0;
      virtual HRESULT __stdcall raw_Call (
        /*[out]*/ long * p_CallId ) = 0;
      virtual HRESULT __stdcall raw_Workgroups (
        /*[out]*/ VARIANT * p_Workgroups ) = 0;
      virtual HRESULT __stdcall raw_ViewableWorkgroups (
        /*[out]*/ VARIANT * p_Workgroups ) = 0;
      virtual HRESULT __stdcall raw_AccessibleQueues (
        /*[out]*/ VARIANT * p_Queues ) = 0;
      virtual HRESULT __stdcall get_CanRecord (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanListen (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanMakePrivate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_StartWorkgroupsList ( ) = 0;
      virtual HRESULT __stdcall raw_GetNextWorkgroup (
        /*[out]*/ BSTR * p_Name ) = 0;
      virtual HRESULT __stdcall raw_StartViewableWorkgroupsList ( ) = 0;
      virtual HRESULT __stdcall raw_GetNextViewableWorkgroup (
        /*[out]*/ BSTR * p_Name ) = 0;
      virtual HRESULT __stdcall raw_StartAccessibleQueuesList ( ) = 0;
      virtual HRESULT __stdcall raw_GetNextAccessibleQueues (
        /*[out]*/ BSTR * p_Name,
        /*[out]*/ long * p_Type,
        /*[out]*/ VARIANT_BOOL * p_Modifiable ) = 0;
      virtual HRESULT __stdcall raw_SetNonPersistentStatus (
        /*[in]*/ BSTR p_Status ) = 0;
      virtual HRESULT __stdcall raw_StartStatusMessages ( ) = 0;
      virtual HRESULT __stdcall raw_GetNextStatusMessage (
        /*[out]*/ BSTR * p_Text,
        /*[out]*/ VARIANT_BOOL * p_IsDND,
        /*[out]*/ VARIANT_BOOL * p_HasDate,
        /*[out]*/ VARIANT_BOOL * p_HasTime,
        /*[out]*/ BSTR * p_IconFileName ) = 0;
      virtual HRESULT __stdcall get_LoggedInStations (
        /*[out,retval]*/ VARIANT * p_Stations ) = 0;
      virtual HRESULT __stdcall get_IsLoggedIn (
        /*[out,retval]*/ VARIANT_BOOL * p_LoggedIn ) = 0;
};

struct __declspec(uuid("dcdd9630-c9f8-11d3-b2a8-0090272dcf18"))
IEICUserEx : IEICUser
{
    //
    // Property data
    //

    __declspec(property(get=GetAlertOptionTelephone,put=PutAlertOptionTelephone))
    VARIANT_BOOL AlertOptionTelephone;
    __declspec(property(get=GetAlertOptionComputer,put=PutAlertOptionComputer))
    VARIANT_BOOL AlertOptionComputer;
    __declspec(property(get=GetAlertOptionPopClient,put=PutAlertOptionPopClient))
    VARIANT_BOOL AlertOptionPopClient;
    __declspec(property(get=GetAlertOptionSetFocus,put=PutAlertOptionSetFocus))
    VARIANT_BOOL AlertOptionSetFocus;
    __declspec(property(get=GetNewChatOptionSound,put=PutNewChatOptionSound))
    VARIANT_BOOL NewChatOptionSound;
    __declspec(property(get=GetNewChatOptionPopClient,put=PutNewChatOptionPopClient))
    VARIANT_BOOL NewChatOptionPopClient;
    __declspec(property(get=GetNewChatOptionSetFocus,put=PutNewChatOptionSetFocus))
    VARIANT_BOOL NewChatOptionSetFocus;
    __declspec(property(get=GetNewChatTextOptionSound,put=PutNewChatTextOptionSound))
    VARIANT_BOOL NewChatTextOptionSound;
    __declspec(property(get=GetNewChatTextOptionPopClient,put=PutNewChatTextOptionPopClient))
    VARIANT_BOOL NewChatTextOptionPopClient;
    __declspec(property(get=GetNewChatTextOptionSetFocus,put=PutNewChatTextOptionSetFocus))
    VARIANT_BOOL NewChatTextOptionSetFocus;
    __declspec(property(get=GetIncomingCallsTimeout,put=PutIncomingCallsTimeout))
    long IncomingCallsTimeout;
    __declspec(property(get=GetIncomingCallsForwardNumber,put=PutIncomingCallsForwardNumber))
    _bstr_t IncomingCallsForwardNumber;
    __declspec(property(get=GetActivateOutOfOfficeMessage,put=PutActivateOutOfOfficeMessage))
    VARIANT_BOOL ActivateOutOfOfficeMessage;
    __declspec(property(get=GetChatURLs))
    _variant_t ChatURLs;
    __declspec(property(get=GetChatMessages))
    _variant_t ChatMessages;
    __declspec(property(get=GetChatFiles))
    _variant_t ChatFiles;
    __declspec(property(get=GetStatusKey,put=PutStatusKey))
    _bstr_t StatusKey;
    __declspec(property(get=GetDirectories))
    _variant_t Directories;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAlertOptionTelephone ( );
    void PutAlertOptionTelephone (
        VARIANT_BOOL __MIDL_0011 );
    VARIANT_BOOL GetAlertOptionComputer ( );
    void PutAlertOptionComputer (
        VARIANT_BOOL __MIDL_0013 );
    VARIANT_BOOL GetAlertOptionPopClient ( );
    void PutAlertOptionPopClient (
        VARIANT_BOOL __MIDL_0015 );
    VARIANT_BOOL GetAlertOptionSetFocus ( );
    void PutAlertOptionSetFocus (
        VARIANT_BOOL __MIDL_0017 );
    VARIANT_BOOL GetNewChatOptionSound ( );
    void PutNewChatOptionSound (
        VARIANT_BOOL __MIDL_0019 );
    VARIANT_BOOL GetNewChatOptionPopClient ( );
    void PutNewChatOptionPopClient (
        VARIANT_BOOL __MIDL_0021 );
    VARIANT_BOOL GetNewChatOptionSetFocus ( );
    void PutNewChatOptionSetFocus (
        VARIANT_BOOL __MIDL_0023 );
    VARIANT_BOOL GetNewChatTextOptionSound ( );
    void PutNewChatTextOptionSound (
        VARIANT_BOOL __MIDL_0025 );
    VARIANT_BOOL GetNewChatTextOptionPopClient ( );
    void PutNewChatTextOptionPopClient (
        VARIANT_BOOL __MIDL_0027 );
    VARIANT_BOOL GetNewChatTextOptionSetFocus ( );
    void PutNewChatTextOptionSetFocus (
        VARIANT_BOOL __MIDL_0029 );
    long GetIncomingCallsTimeout ( );
    void PutIncomingCallsTimeout (
        long seconds );
    _bstr_t GetIncomingCallsForwardNumber ( );
    void PutIncomingCallsForwardNumber (
        _bstr_t number );
    VARIANT_BOOL GetActivateOutOfOfficeMessage ( );
    void PutActivateOutOfOfficeMessage (
        VARIANT_BOOL __MIDL_0033 );
    HRESULT HoldUpdates ( );
    HRESULT CommitUpdates ( );
    _variant_t GetChatURLs ( );
    _variant_t GetChatMessages ( );
    _variant_t GetChatFiles ( );
    void PutStatusKey (
        _bstr_t Val );
    _bstr_t GetStatusKey ( );
    _variant_t GetDirectories ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AlertOptionTelephone (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0011 ) = 0;
      virtual HRESULT __stdcall put_AlertOptionTelephone (
        /*[in]*/ VARIANT_BOOL __MIDL_0011 ) = 0;
      virtual HRESULT __stdcall get_AlertOptionComputer (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0013 ) = 0;
      virtual HRESULT __stdcall put_AlertOptionComputer (
        /*[in]*/ VARIANT_BOOL __MIDL_0013 ) = 0;
      virtual HRESULT __stdcall get_AlertOptionPopClient (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0015 ) = 0;
      virtual HRESULT __stdcall put_AlertOptionPopClient (
        /*[in]*/ VARIANT_BOOL __MIDL_0015 ) = 0;
      virtual HRESULT __stdcall get_AlertOptionSetFocus (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0017 ) = 0;
      virtual HRESULT __stdcall put_AlertOptionSetFocus (
        /*[in]*/ VARIANT_BOOL __MIDL_0017 ) = 0;
      virtual HRESULT __stdcall get_NewChatOptionSound (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0019 ) = 0;
      virtual HRESULT __stdcall put_NewChatOptionSound (
        /*[in]*/ VARIANT_BOOL __MIDL_0019 ) = 0;
      virtual HRESULT __stdcall get_NewChatOptionPopClient (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0021 ) = 0;
      virtual HRESULT __stdcall put_NewChatOptionPopClient (
        /*[in]*/ VARIANT_BOOL __MIDL_0021 ) = 0;
      virtual HRESULT __stdcall get_NewChatOptionSetFocus (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0023 ) = 0;
      virtual HRESULT __stdcall put_NewChatOptionSetFocus (
        /*[in]*/ VARIANT_BOOL __MIDL_0023 ) = 0;
      virtual HRESULT __stdcall get_NewChatTextOptionSound (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0025 ) = 0;
      virtual HRESULT __stdcall put_NewChatTextOptionSound (
        /*[in]*/ VARIANT_BOOL __MIDL_0025 ) = 0;
      virtual HRESULT __stdcall get_NewChatTextOptionPopClient (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0027 ) = 0;
      virtual HRESULT __stdcall put_NewChatTextOptionPopClient (
        /*[in]*/ VARIANT_BOOL __MIDL_0027 ) = 0;
      virtual HRESULT __stdcall get_NewChatTextOptionSetFocus (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0029 ) = 0;
      virtual HRESULT __stdcall put_NewChatTextOptionSetFocus (
        /*[in]*/ VARIANT_BOOL __MIDL_0029 ) = 0;
      virtual HRESULT __stdcall get_IncomingCallsTimeout (
        /*[out,retval]*/ long * seconds ) = 0;
      virtual HRESULT __stdcall put_IncomingCallsTimeout (
        /*[in]*/ long seconds ) = 0;
      virtual HRESULT __stdcall get_IncomingCallsForwardNumber (
        /*[out,retval]*/ BSTR * number ) = 0;
      virtual HRESULT __stdcall put_IncomingCallsForwardNumber (
        /*[in]*/ BSTR number ) = 0;
      virtual HRESULT __stdcall get_ActivateOutOfOfficeMessage (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0033 ) = 0;
      virtual HRESULT __stdcall put_ActivateOutOfOfficeMessage (
        /*[in]*/ VARIANT_BOOL __MIDL_0033 ) = 0;
      virtual HRESULT __stdcall raw_HoldUpdates ( ) = 0;
      virtual HRESULT __stdcall raw_CommitUpdates ( ) = 0;
      virtual HRESULT __stdcall get_ChatURLs (
        /*[out,retval]*/ VARIANT * __MIDL_0035 ) = 0;
      virtual HRESULT __stdcall get_ChatMessages (
        /*[out,retval]*/ VARIANT * __MIDL_0036 ) = 0;
      virtual HRESULT __stdcall get_ChatFiles (
        /*[out,retval]*/ VARIANT * __MIDL_0037 ) = 0;
      virtual HRESULT __stdcall put_StatusKey (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_StatusKey (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_Directories (
        /*[out,retval]*/ VARIANT * __MIDL_0038 ) = 0;
};

struct __declspec(uuid("1405e8f0-dd23-4d21-973c-96cdca7a66a1"))
IEICUserS : IEICUserEx
{
    //
    // Property data
    //

    __declspec(property(get=GetAccessibleQueueObjectsS))
    _variant_t AccessibleQueueObjectsS;
    __declspec(property(get=GetViewableWorkgroupsS))
    _variant_t ViewableWorkgroupsS;
    __declspec(property(get=GetWorkgroupsS))
    _variant_t WorkgroupsS;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAccessibleQueueObjectsS ( );
    _variant_t GetViewableWorkgroupsS ( );
    _variant_t GetWorkgroupsS ( );
    long CallS ( );
    _variant_t GetUntilDateTimeS ( );
    void PutUntilDateTimeS (
        VARIANT * p_Date );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AccessibleQueueObjectsS (
        /*[out,retval]*/ VARIANT * p_Queues ) = 0;
      virtual HRESULT __stdcall get_ViewableWorkgroupsS (
        /*[out,retval]*/ VARIANT * p_Workgroups ) = 0;
      virtual HRESULT __stdcall get_WorkgroupsS (
        /*[out,retval]*/ VARIANT * p_Workgroups ) = 0;
      virtual HRESULT __stdcall raw_CallS (
        /*[out,retval]*/ long * p_CallId ) = 0;
      virtual HRESULT __stdcall get_UntilDateTimeS (
        /*[out,retval]*/ VARIANT * p_Date ) = 0;
      virtual HRESULT __stdcall put_UntilDateTimeS (
        /*[in]*/ VARIANT * p_Date ) = 0;
};

struct __declspec(uuid("c574f7b7-fede-11d1-8001-00a0c9a79e7c"))
IEICWorkgroupWatcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT UserAdded (
        _bstr_t p_UserId );
    HRESULT UserChanged (
        _bstr_t p_UserId,
        _bstr_t p_Status,
        DATE p_UntilDateTime );
    HRESULT UserRemoved (
        _bstr_t p_UserId );
    HRESULT UserOnPhone (
        _bstr_t p_UserId,
        VARIANT_BOOL p_OnPhone );
    HRESULT UserLoginChanged (
        _bstr_t p_UserId,
        _bstr_t p_Station,
        VARIANT_BOOL p_Login );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_UserAdded (
        /*[in]*/ BSTR p_UserId ) = 0;
      virtual HRESULT __stdcall raw_UserChanged (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ BSTR p_Status,
        /*[in]*/ DATE p_UntilDateTime ) = 0;
      virtual HRESULT __stdcall raw_UserRemoved (
        /*[in]*/ BSTR p_UserId ) = 0;
      virtual HRESULT __stdcall raw_UserOnPhone (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ VARIANT_BOOL p_OnPhone ) = 0;
      virtual HRESULT __stdcall raw_UserLoginChanged (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ VARIANT_BOOL p_Login ) = 0;
};

struct __declspec(uuid("c574f7b5-fede-11d1-8001-00a0c9a79e7c"))
IEICWorkgroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId,put=PutId))
    _bstr_t Id;
    __declspec(property(get=GetExtension))
    _bstr_t Extension;
    __declspec(property(get=GetWrapupTime))
    short WrapupTime;
    __declspec(property(get=GetWrapupStatus))
    _bstr_t WrapupStatus;
    __declspec(property(get=GetMonitorOnPhone,put=PutMonitorOnPhone))
    VARIANT_BOOL MonitorOnPhone;

    //
    // Wrapper methods for error-handling
    //

    HRESULT GetWorkgroupMembers (
        VARIANT * p_UserIds );
    HRESULT SetChangeHandler (
        struct IEICWorkgroupWatcher * p_Handler,
        VARIANT_BOOL p_MonitorIndividuals );
    _bstr_t GetId ( );
    void PutId (
        _bstr_t pVal );
    _bstr_t GetExtension ( );
    HRESULT StartMembersList ( );
    HRESULT GetNextMember (
        BSTR * p_UserId );
    short GetWrapupTime ( );
    _bstr_t GetWrapupStatus ( );
    void PutMonitorOnPhone (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMonitorOnPhone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetWorkgroupMembers (
        /*[out]*/ VARIANT * p_UserIds ) = 0;
      virtual HRESULT __stdcall raw_SetChangeHandler (
        /*[in]*/ struct IEICWorkgroupWatcher * p_Handler,
        /*[in]*/ VARIANT_BOOL p_MonitorIndividuals ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_StartMembersList ( ) = 0;
      virtual HRESULT __stdcall raw_GetNextMember (
        /*[out]*/ BSTR * p_UserId ) = 0;
      virtual HRESULT __stdcall get_WrapupTime (
        /*[out,retval]*/ short * p_Seconds ) = 0;
      virtual HRESULT __stdcall get_WrapupStatus (
        /*[out,retval]*/ BSTR * p_StatusText ) = 0;
      virtual HRESULT __stdcall put_MonitorOnPhone (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MonitorOnPhone (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("92b72cf1-0040-4dbc-bba0-00ff6405239b"))
IEICWorkgroup2Watcher : IEICWorkgroupWatcher
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT UserStatusChanged (
        _bstr_t p_UserId,
        _bstr_t p_StatusKey,
        DATE p_UntilDateTime,
        VARIANT_BOOL p_HasDate,
        VARIANT_BOOL p_HasTime );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_UserStatusChanged (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ BSTR p_StatusKey,
        /*[in]*/ DATE p_UntilDateTime,
        /*[in]*/ VARIANT_BOOL p_HasDate,
        /*[in]*/ VARIANT_BOOL p_HasTime ) = 0;
};

struct __declspec(uuid("0176517b-c513-4fa1-a113-704e17ba9b60"))
IEICConferenceObject2Watcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT PartyChanged (
        long p_ConfId,
        long p_Type,
        long p_ObjId,
        long p_Event );
    HRESULT ObjectDestroyed (
        long p_ConfId );
    HRESULT TextMessageReceived (
        long p_ConfId,
        _bstr_t p_SenderUserId,
        _bstr_t p_Msg );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_PartyChanged (
        /*[in]*/ long p_ConfId,
        /*[in]*/ long p_Type,
        /*[in]*/ long p_ObjId,
        /*[in]*/ long p_Event ) = 0;
      virtual HRESULT __stdcall raw_ObjectDestroyed (
        /*[in]*/ long p_ConfId ) = 0;
      virtual HRESULT __stdcall raw_TextMessageReceived (
        /*[in]*/ long p_ConfId,
        /*[in]*/ BSTR p_SenderUserId,
        /*[in]*/ BSTR p_Msg ) = 0;
};

struct __declspec(uuid("906781a0-f4e0-4bd4-ac7d-bfd0c5275836"))
IEICWorkgroup2Watcher2 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT UserStatusChanged (
        _bstr_t p_UserId,
        _bstr_t p_StatusKey,
        DATE p_UntilDateTime,
        VARIANT_BOOL p_HasDate,
        VARIANT_BOOL p_HasTime );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_UserStatusChanged (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ BSTR p_StatusKey,
        /*[in]*/ DATE p_UntilDateTime,
        /*[in]*/ VARIANT_BOOL p_HasDate,
        /*[in]*/ VARIANT_BOOL p_HasTime ) = 0;
};

struct __declspec(uuid("fb3666e0-08a5-4d70-9b4f-57c24523f62e"))
IACDHelpRequest : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetInteraction,put=PutInteraction))
    IEICQueueObject2Ptr Interaction;
    __declspec(property(get=GetAgent,put=PutAgent))
    _bstr_t Agent;
    __declspec(property(get=GetWorkgroup,put=PutWorkgroup))
    _bstr_t Workgroup;
    __declspec(property(get=GetStation,put=PutStation))
    _bstr_t Station;
    __declspec(property(get=GetExtension,put=PutExtension))
    _bstr_t Extension;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    IEICQueueObject2Ptr GetInteraction ( );
    void PutInteraction (
        struct IEICQueueObject2 * pVal );
    _bstr_t GetAgent ( );
    void PutAgent (
        _bstr_t pVal );
    _bstr_t GetWorkgroup ( );
    void PutWorkgroup (
        _bstr_t pVal );
    _bstr_t GetStation ( );
    void PutStation (
        _bstr_t pVal );
    _bstr_t GetExtension ( );
    void PutExtension (
        _bstr_t pVal );
    HRESULT Send ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Interaction (
        /*[out,retval]*/ struct IEICQueueObject2 * * pVal ) = 0;
      virtual HRESULT __stdcall put_Interaction (
        /*[in]*/ struct IEICQueueObject2 * pVal ) = 0;
      virtual HRESULT __stdcall get_Agent (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Agent (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Workgroup (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Workgroup (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Station (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Station (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Extension (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Send ( ) = 0;
};

struct __declspec(uuid("676f2db0-5486-4cdf-b9df-eae780602bdf"))
IACDHelpMonitorCallback : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT HelpRequest (
        struct IACDHelpRequest * p_Request );
    HRESULT ResponseReceived (
        struct IACDHelpRequest * p_Request );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_HelpRequest (
        /*[in]*/ struct IACDHelpRequest * p_Request ) = 0;
      virtual HRESULT __stdcall raw_ResponseReceived (
        /*[in]*/ struct IACDHelpRequest * p_Request ) = 0;
};

struct __declspec(uuid("15af3790-98e6-4d83-8735-ee62470739b5"))
ISIPPhoneWatcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnDeviceChanged (
        VARIANT_BOOL bCapableOfAudio );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnDeviceChanged (
        VARIANT_BOOL bCapableOfAudio ) = 0;
};

enum EICRecipientOrder
{
    RO_NAME = 0,
    RO_ADDRESS = 1
};

enum EICObjectTypes
{
    OT_CALL = 2,
    OT_CHAT = 19,
    OT_CONFERENCE = 20,
    OT_EMAIL = 68,
    OT_GENERIC = 70,
    OT_CALLBACK = 84,
    OT_INSTANT_QUESTION = 85,
    OT_WEB_SESSION = 86,
    OT_BROWSER_SYNC = 87,
    OT_DUAL_FORM = 88
};

enum EICQueueTypes
{
    QT_STATION = 3,
    QT_USER = 9,
    QT_WORKGROUP = 10,
    QT_LINE = 15,
    QT_WEBSESSION = 96
};

enum EICConnectErrors
{
    CE_NOTIFIERCONNECT_OK = 0,
    CE_NOTIFIERCONNECT_ALREADY_CONNECTED = 1,
    CE_NOTIFIERCONNECT_NO_SERVER = 2,
    CE_NOTIFIERCONNECT_INACTIVE = 3,
    CE_NOTIFIERCONNECT_COOKIE_OUTOFDATE = 4,
    CE_NOTIFIERCONNECT_AUTHENTICATION = 5,
    CE_NOIFIERCONNECT_ERROR = 6,
    CE_NOTIFIERCONNECT_CANCELLED = 7,
    CE_NOTIFIERCONNECT_EXISTING_REMOTE_SERVER = 8,
    CE_NO_SERVER_INFO = 32000,
    CE_NOTIFIER_RESPONSE_TIMEOUT = 32001,
    CE_INTERNAL_EXCEPTION = 32002,
    CE_LOGIN_FAILED = 32003,
    CE_INVALID_CS_VERSION = 32004,
    CE_CS_LOGIN_FAILED = 32005
};

enum EICQueueObjectStates
{
    QS_NULL = 0,
    QS_ALERTING = 1,
    QS_CONNECTED = 2,
    QS_CLIENT_CONNECT = 3,
    QS_HELD = 4,
    QS_INTERNAL_DISCONNECT = 5,
    QS_EXTERNAL_DISCONNECT = 6,
    QS_ACTIVE = 3,
    QS_INACTIVE = 5,
    QS_REMOVED = 7,
    QS_OBJECT_SPECIFIC = 100,
    QS_OFFERING = 101,
    QS_PROCEEDING = 103,
    QS_PARKED = 80,
    QS_SYSTEM = 83,
    QS_MESSAGING = 77,
    QS_UNKNOWN = 200
};

enum EICActionFlags
{
    EAF_NONE = 0,
    EAF_PICKUP = 1,
    EAF_DISCONNECT = 2,
    EAF_HOLD = 4,
    EAF_TRANSFER = 8,
    EAF_VOICEMAIL = 16,
    EAF_LISTEN = 32,
    EAF_RECORD = 64,
    EAF_PAUSE = 128,
    EAF_MUTE = 256,
    EAF_PRIVATE = 512,
    EAF_SUPERVISOR_HELP = 1024,
    EAF_ALL_TELEPHONY = 1023
};

enum EICMediaTypes
{
    MT_CALL = 1,
    MT_CHAT = 2,
    MT_EMAIL = 4,
    MT_GENERIC = 8,
    MT_BROWSER_SYNC = 16,
    MT_CALLBACK = 32,
    MT_DUAL_FORM = 64,
    MT_INSTANT_QUESTION = 128,
    MT_SMS_MESSAGE = 256,
    MT_ALL = -1
};

enum EICCallDirection
{
    CD_INBOUND = 0,
    CD_OUTBOUND = 1,
    CD_INDETERMINATE = 2
};

enum EICDirectoryTypes
{
    DT_COMPANY_DIR = 1,
    DT_DATASOURCE = 2
};

enum EICQueueObjectStates2
{
    QS2_NULL = 0,
    QS2_ALERTING = 1,
    QS2_HELD = 4,
    QS2_MESSAGING = 77,
    QS2_PARKED = 80,
    QS2_INITIALIZING = 100,
    QS2_OFFERING = 101,
    QS2_PROCEEDING = 104,
    QS2_DIALING = 103,
    QS2_CONNECTED = 105,
    QS2_DISCONNECTED = 106,
    QS2_STATIONAUDIO = 107
};

enum CSConnectError
{
    CSCE_NoError = 0,
    CSCE_RequestRejected = 1001,
    CSCE_RequestTimedOut = 1002,
    CSCE_NoNotifierConnection = 1003,
    CSCE_BadNotifierConnection = 1004,
    CSCE_RequestAbandoned = 1005,
    CSCE_RequestCanceled = 1006,
    CSCE_AsyncOperationPending = 1009,
    CSCE_UnexpectedException = 1010,
    CSCE_UnexpectedError = 1011,
    CSCE_FunctionalityNotActive = 1012,
    CSCE_OperationCancelled = 1013,
    CSCE_InvalidParameters = 1014,
    CSCE_UnknownUser = 1015,
    CSCE_UnknownStat = 1016,
    CSCE_UnknownGroup = 1017,
    CSCE_IncompatibleVersion = 1100,
    CSCE_InvalidUserStatus = 1102,
    CSCE_ClientServicesDown = 1103,
    CSCE_NotInitialized = 1104,
    CSCE_SystemNotUpFully = 1105,
    CSCE_InvalidUserName = 1111,
    CSCE_InvalidStatName = 1113,
    CSCE_InvalidGroupName = 1115,
    CSCE_GroupCacheNotActive = 1116,
    CSCE_InvalidStatus = 1117,
    CSCE_OutOfStationLicenses = 1200,
    CSCE_CannotRemoteLoginLocalStation = 1201,
    CSCE_UmMailboxOnlyUserNotAllowedToLogOnAnyStation = 1202,
    CSCE_UmUserNotAllowedToLogOnAnyWorkstation = 1203,
    CSCE_OnlyStationLoginsAllowedOnThisStation = 1204,
    CSCE_StatAlreadyExisted = 1300,
    CSCE_AgentIsNotLoggedIn = 1301,
    CSCE_StatDoesNotHaveRights = 1302,
    CSCE_StatRightsAlreadyInUse = 1303,
    CSCE_StatNotActive = 1304,
    CSCE_UserDoesNotHaveRights = 1305,
    CSCE_CannotLocalLoginOnRemoteStat = 1306,
    CSCE_UserDoesNotHaveAllowTnChangeRights = 1307,
    CSCE_NoClientLicense = 1308,
    CSCE_UserConnectedOnAnotherStation = 1400,
    CSCE_StationSpecifiedFromAnotherComputer = 1401,
    CSCE_StationInUseByAnotherUser = 1402,
    CSCE_RequiredLicenseNotAvailable = 1403
};

struct __declspec(uuid("a1fcaaa7-14b7-4ba8-85fa-d24bdcfca4cd"))
EICQueue2WatcherAdapter;
    // [ default ] interface IEICQueue2WatcherAdapter

struct __declspec(uuid("5d31b94e-d336-4155-953f-ce1f082d4ea5"))
IEICQueue2WatcherAdapter : IEICQueue2Watcher
{
    //
    // Property data
    //

    __declspec(property(get=GetObjectAddedFunc,put=PutObjectAddedFunc))
    _variant_t ObjectAddedFunc;
    __declspec(property(get=GetObjectChangedFunc,put=PutObjectChangedFunc))
    _variant_t ObjectChangedFunc;
    __declspec(property(get=GetObjectRemovedFunc,put=PutObjectRemovedFunc))
    _variant_t ObjectRemovedFunc;
    __declspec(property(get=GetStatisticsUpdatedFunc,put=PutStatisticsUpdatedFunc))
    _variant_t StatisticsUpdatedFunc;

    //
    // Wrapper methods for error-handling
    //

    void PutObjectAddedFunc (
        const _variant_t & p_Function );
    void PutObjectChangedFunc (
        const _variant_t & p_Function );
    void PutObjectRemovedFunc (
        const _variant_t & p_Function );
    void PutStatisticsUpdatedFunc (
        const _variant_t & p_Function );
    _variant_t GetObjectAddedFunc ( );
    _variant_t GetObjectChangedFunc ( );
    _variant_t GetObjectRemovedFunc ( );
    _variant_t GetStatisticsUpdatedFunc ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ObjectAddedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_ObjectChangedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_ObjectRemovedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_StatisticsUpdatedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall get_ObjectAddedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_ObjectChangedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_ObjectRemovedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_StatisticsUpdatedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
};

struct __declspec(uuid("63065451-3475-11d3-b264-0090272dcf18"))
EICRemoteConnection;
    // [ default ] interface IEICRemoteConnection

struct __declspec(uuid("63065450-3475-11d3-b264-0090272dcf18"))
IEICRemoteConnection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetServer))
    _bstr_t Server;
    __declspec(property(get=GetUser))
    _bstr_t User;
    __declspec(property(get=GetStation))
    _bstr_t Station;
    __declspec(property(get=GetConnectionValid))
    VARIANT_BOOL ConnectionValid;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Connect (
        _bstr_t p_App,
        _bstr_t p_Server,
        _bstr_t p_User,
        _bstr_t p_Password,
        _bstr_t p_Station,
        VARIANT_BOOL p_PersistentConnection,
        VARIANT_BOOL p_AutoDisconnect );
    HRESULT Disconnect (
        VARIANT_BOOL p_DisconnectUserOnly );
    _bstr_t GetServer ( );
    _bstr_t GetUser ( );
    _bstr_t GetStation ( );
    VARIANT_BOOL GetConnectionValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR p_App,
        /*[in]*/ BSTR p_Server,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Password,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ VARIANT_BOOL p_PersistentConnection,
        VARIANT_BOOL p_AutoDisconnect ) = 0;
      virtual HRESULT __stdcall raw_Disconnect (
        /*[in]*/ VARIANT_BOOL p_DisconnectUserOnly ) = 0;
      virtual HRESULT __stdcall get_Server (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_User (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Station (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("1143b9a7-f0bd-11d1-bffe-00a0c9a79e7c"))
EICConnection;
    // [ default ] interface IEICConnection

struct __declspec(uuid("dcc7ad42-f185-11d1-bffe-00a0c9a79e7c"))
IEICConnection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetServer))
    _bstr_t Server;
    __declspec(property(get=GetUser))
    _bstr_t User;
    __declspec(property(get=GetStation))
    _bstr_t Station;
    __declspec(property(get=GetConnectionValid))
    VARIANT_BOOL ConnectionValid;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Connect (
        _bstr_t p_App,
        _bstr_t p_Server,
        _bstr_t p_User,
        _bstr_t p_Password,
        _bstr_t p_Station,
        VARIANT_BOOL p_AutoDisconnect );
    HRESULT Attach (
        _bstr_t p_App,
        _bstr_t p_Server,
        VARIANT_BOOL p_AutoDisconnect );
    HRESULT Disconnect (
        VARIANT_BOOL p_DisconnectUserOnly );
    HRESULT ForceDisconnect (
        _bstr_t p_User,
        _bstr_t p_Station,
        VARIANT_BOOL p_DisconnectUserOnly );
    _bstr_t GetServer ( );
    _bstr_t GetUser ( );
    _bstr_t GetStation ( );
    HRESULT PassiveConnect (
        _bstr_t p_App,
        _bstr_t p_Server,
        _bstr_t p_User,
        _bstr_t p_Password,
        VARIANT_BOOL p_AutoDisconnect );
    VARIANT_BOOL GetConnectionValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR p_App,
        /*[in]*/ BSTR p_Server,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Password,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ VARIANT_BOOL p_AutoDisconnect ) = 0;
      virtual HRESULT __stdcall raw_Attach (
        /*[in]*/ BSTR p_App,
        /*[in]*/ BSTR p_Server,
        /*[in]*/ VARIANT_BOOL p_AutoDisconnect ) = 0;
      virtual HRESULT __stdcall raw_Disconnect (
        /*[in]*/ VARIANT_BOOL p_DisconnectUserOnly ) = 0;
      virtual HRESULT __stdcall raw_ForceDisconnect (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ VARIANT_BOOL p_DisconnectUserOnly ) = 0;
      virtual HRESULT __stdcall get_Server (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_User (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Station (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_PassiveConnect (
        /*[in]*/ BSTR p_App,
        /*[in]*/ BSTR p_Server,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Password,
        /*[in]*/ VARIANT_BOOL p_AutoDisconnect ) = 0;
      virtual HRESULT __stdcall get_ConnectionValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("52344756-d0b4-11d1-bff4-00a0c9a79e7c"))
EICQueue;
    // [ default ] interface IEICQueue

struct __declspec(uuid("c763670f-1441-11d3-b252-0090272dcf18"))
EICChatObject;
    // [ default ] interface IEICChatObject

struct __declspec(uuid("02c6d120-1d03-11d3-b25a-0090272dcf18"))
IEICChatObjectWatcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StateChanged (
        long p_NewState,
        _bstr_t p_StateString );
    HRESULT ObjectSpecificChange ( );
    HRESULT ObjectDestroyed ( );
    HRESULT ObjectSpecificError (
        long p_Error );
    HRESULT SubObjectChanged (
        long p_Type,
        long p_Id,
        long p_Change );
    HRESULT ReceivedString (
        _bstr_t p_User,
        _bstr_t p_String );
    HRESULT ReceivedUrl (
        _bstr_t p_User,
        _bstr_t p_URL );
    HRESULT ReceivedFile (
        _bstr_t p_User,
        _bstr_t p_FileName,
        _bstr_t p_FileData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StateChanged (
        /*[in]*/ long p_NewState,
        /*[in]*/ BSTR p_StateString ) = 0;
      virtual HRESULT __stdcall raw_ObjectSpecificChange ( ) = 0;
      virtual HRESULT __stdcall raw_ObjectDestroyed ( ) = 0;
      virtual HRESULT __stdcall raw_ObjectSpecificError (
        /*[in]*/ long p_Error ) = 0;
      virtual HRESULT __stdcall raw_SubObjectChanged (
        /*[in]*/ long p_Type,
        /*[in]*/ long p_Id,
        /*[in]*/ long p_Change ) = 0;
      virtual HRESULT __stdcall raw_ReceivedString (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_String ) = 0;
      virtual HRESULT __stdcall raw_ReceivedUrl (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_URL ) = 0;
      virtual HRESULT __stdcall raw_ReceivedFile (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_FileName,
        /*[in]*/ BSTR p_FileData ) = 0;
};

struct __declspec(uuid("c763670e-1441-11d3-b252-0090272dcf18"))
IEICChatObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId,put=PutId))
    long Id;
    __declspec(property(get=GetState))
    long State;
    __declspec(property(get=GetStateString,put=PutStateString))
    _bstr_t StateString;
    __declspec(property(get=GetLocalName))
    _bstr_t LocalName;
    __declspec(property(get=GetLocalLocation))
    _bstr_t LocalLocation;
    __declspec(property(get=GetRemoteName,put=PutRemoteName))
    _bstr_t RemoteName;
    __declspec(property(get=GetRemoteLocation))
    _bstr_t RemoteLocation;
    __declspec(property(get=GetLocalId))
    _bstr_t LocalId;
    __declspec(property(get=GetRemoteId))
    _bstr_t RemoteId;
    __declspec(property(get=GetCreationTime))
    DATE CreationTime;
    __declspec(property(get=GetDirection))
    short Direction;
    __declspec(property(get=GetisRecording))
    VARIANT_BOOL isRecording;
    __declspec(property(get=GetisPaused))
    VARIANT_BOOL isPaused;
    __declspec(property(get=GetisPrivate))
    VARIANT_BOOL isPrivate;
    __declspec(property(get=GetisMonitored))
    VARIANT_BOOL isMonitored;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    void PutId (
        long pVal );
    long GetState ( );
    _bstr_t GetStateString ( );
    void PutStateString (
        _bstr_t pVal );
    HRESULT Pickup (
        _bstr_t p_IfOnUserQueue );
    HRESULT Disconnect (
        _bstr_t p_IfOnUserQueue );
    HRESULT SetChangeHandler (
        struct IEICChatObjectWatcher * p_Handler );
    _bstr_t GetLocalName ( );
    _bstr_t GetLocalLocation ( );
    _bstr_t GetRemoteName ( );
    void PutRemoteName (
        _bstr_t pVal );
    _bstr_t GetRemoteLocation ( );
    _bstr_t GetLocalId ( );
    _bstr_t GetRemoteId ( );
    DATE GetCreationTime ( );
    HRESULT GetCreationTime (
        short * hour,
        short * minute,
        short * second );
    short GetDirection ( );
    HRESULT GetNamedAttribute (
        _bstr_t p_Name,
        BSTR * p_Value );
    HRESULT SetNamedAttribute (
        _bstr_t p_Name,
        _bstr_t p_Value );
    HRESULT Listen (
        _bstr_t p_IfOnUserQueue );
    HRESULT Record (
        _bstr_t p_IfOnUserQueue );
    HRESULT Pause ( );
    HRESULT Private (
        _bstr_t p_IfOnUserQueue );
    VARIANT_BOOL GetisRecording ( );
    VARIANT_BOOL GetisPaused ( );
    VARIANT_BOOL GetisPrivate ( );
    VARIANT_BOOL GetisMonitored ( );
    HRESULT PutNameAttributeList (
        const _variant_t & p_Names,
        const _variant_t & p_Values );
    HRESULT GetNameAttributeList (
        const _variant_t & p_Names,
        VARIANT * p_Values );
    HRESULT SendString (
        _bstr_t p_String );
    HRESULT SendURL (
        _bstr_t p_URL );
    HRESULT SendFile (
        _bstr_t p_FileName,
        _bstr_t p_FileData );
    HRESULT BlindTransfer (
        _bstr_t p_UserQueueName,
        _bstr_t p_IfOnUserQueue );
    HRESULT RequestSession (
        _bstr_t p_RequestingUserName,
        _bstr_t p_RequestingEmail,
        _bstr_t p_RequestingPhone,
        _bstr_t p_RequestingLocation,
        _bstr_t p_DestinationQueueName,
        _bstr_t p_SubjectOfChat );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_StateString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StateString (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Pickup (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_Disconnect (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_SetChangeHandler (
        /*[in]*/ struct IEICChatObjectWatcher * p_Handler ) = 0;
      virtual HRESULT __stdcall get_LocalName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LocalLocation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RemoteName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoteName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RemoteLocation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LocalId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RemoteId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CreationTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCreationTime (
        /*[out]*/ short * hour,
        /*[out]*/ short * minute,
        /*[out]*/ short * second ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNamedAttribute (
        /*[in]*/ BSTR p_Name,
        /*[out]*/ BSTR * p_Value ) = 0;
      virtual HRESULT __stdcall raw_SetNamedAttribute (
        /*[in]*/ BSTR p_Name,
        /*[in]*/ BSTR p_Value ) = 0;
      virtual HRESULT __stdcall raw_Listen (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_Record (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Private (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall get_isRecording (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isPaused (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isPrivate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isMonitored (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_PutNameAttributeList (
        /*[in]*/ VARIANT p_Names,
        /*[in]*/ VARIANT p_Values ) = 0;
      virtual HRESULT __stdcall raw_GetNameAttributeList (
        /*[in]*/ VARIANT p_Names,
        /*[out]*/ VARIANT * p_Values ) = 0;
      virtual HRESULT __stdcall raw_SendString (
        /*[in]*/ BSTR p_String ) = 0;
      virtual HRESULT __stdcall raw_SendURL (
        /*[in]*/ BSTR p_URL ) = 0;
      virtual HRESULT __stdcall raw_SendFile (
        /*[in]*/ BSTR p_FileName,
        /*[in]*/ BSTR p_FileData ) = 0;
      virtual HRESULT __stdcall raw_BlindTransfer (
        /*[in]*/ BSTR p_UserQueueName,
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_RequestSession (
        /*[in]*/ BSTR p_RequestingUserName,
        /*[in]*/ BSTR p_RequestingEmail,
        /*[in]*/ BSTR p_RequestingPhone,
        /*[in]*/ BSTR p_RequestingLocation,
        /*[in]*/ BSTR p_DestinationQueueName,
        /*[in]*/ BSTR p_SubjectOfChat ) = 0;
};

struct __declspec(uuid("dcc7ad4c-f185-11d1-bffe-00a0c9a79e7c"))
EICCallObject;
    // [ default ] interface IEICCallObject

struct __declspec(uuid("b638f3b8-f4a4-11d1-bffe-00a0c9a79e7c"))
IEICQueueObjectWatcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StateChanged (
        long p_NewState,
        _bstr_t p_StateString );
    HRESULT ObjectSpecificChange ( );
    HRESULT ObjectDestroyed ( );
    HRESULT ObjectSpecificError (
        long p_Error );
    HRESULT SubObjectChanged (
        long p_Type,
        long p_Id,
        long p_Change );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StateChanged (
        /*[in]*/ long p_NewState,
        /*[in]*/ BSTR p_StateString ) = 0;
      virtual HRESULT __stdcall raw_ObjectSpecificChange ( ) = 0;
      virtual HRESULT __stdcall raw_ObjectDestroyed ( ) = 0;
      virtual HRESULT __stdcall raw_ObjectSpecificError (
        /*[in]*/ long p_Error ) = 0;
      virtual HRESULT __stdcall raw_SubObjectChanged (
        /*[in]*/ long p_Type,
        /*[in]*/ long p_Id,
        /*[in]*/ long p_Change ) = 0;
};

struct __declspec(uuid("ed55b8b5-f4b0-11d1-bffe-00a0c9a79e7c"))
IEICCallObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetisMuted))
    VARIANT_BOOL isMuted;
    __declspec(property(get=GetId,put=PutId))
    long Id;
    __declspec(property(get=GetState))
    long State;
    __declspec(property(get=GetStateString,put=PutStateString))
    _bstr_t StateString;
    __declspec(property(get=GetisPrivate))
    VARIANT_BOOL isPrivate;
    __declspec(property(get=GetisMonitored))
    VARIANT_BOOL isMonitored;
    __declspec(property(get=GetisParty))
    VARIANT_BOOL isParty;
    __declspec(property(get=GetLocalName))
    _bstr_t LocalName;
    __declspec(property(get=GetLocalLocation))
    _bstr_t LocalLocation;
    __declspec(property(get=GetRemoteName,put=PutRemoteName))
    _bstr_t RemoteName;
    __declspec(property(get=GetRemoteLocation))
    _bstr_t RemoteLocation;
    __declspec(property(get=GetLocalId))
    _bstr_t LocalId;
    __declspec(property(get=GetRemoteId))
    _bstr_t RemoteId;
    __declspec(property(get=GetCreationTime))
    DATE CreationTime;
    __declspec(property(get=GetConferenceId))
    long ConferenceId;
    __declspec(property(get=GetDirection))
    short Direction;
    __declspec(property(get=GetisHeld))
    VARIANT_BOOL isHeld;
    __declspec(property(get=GetisRecording))
    VARIANT_BOOL isRecording;
    __declspec(property(get=GetisPaused))
    VARIANT_BOOL isPaused;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    void PutId (
        long pVal );
    long GetState ( );
    _bstr_t GetStateString ( );
    void PutStateString (
        _bstr_t pVal );
    HRESULT Pickup (
        _bstr_t p_IfOnUserQueue );
    HRESULT Disconnect (
        _bstr_t p_IfOnUserQueue );
    HRESULT SetChangeHandler (
        struct IEICQueueObjectWatcher * p_Handler );
    _bstr_t GetLocalName ( );
    _bstr_t GetLocalLocation ( );
    _bstr_t GetRemoteName ( );
    void PutRemoteName (
        _bstr_t pVal );
    _bstr_t GetRemoteLocation ( );
    _bstr_t GetLocalId ( );
    _bstr_t GetRemoteId ( );
    DATE GetCreationTime ( );
    HRESULT GetCreationTime (
        short * hour,
        short * minute,
        short * second );
    short GetDirection ( );
    HRESULT GetNamedAttribute (
        _bstr_t p_Name,
        BSTR * p_Value );
    HRESULT SetNamedAttribute (
        _bstr_t p_Name,
        _bstr_t p_Value );
    HRESULT ExtendedDial (
        _bstr_t p_Number,
        short p_TimeoutSecs,
        VARIANT_BOOL p_CallAnalysis,
        VARIANT_BOOL p_CallHandlerOnSuccess );
    HRESULT Dial (
        _bstr_t p_Number,
        VARIANT_BOOL p_CallHandlerOnSuccess );
    HRESULT Listen (
        _bstr_t p_IfOnUserQueue );
    HRESULT Record (
        _bstr_t p_IfOnUserQueue );
    HRESULT Pause ( );
    HRESULT Mute (
        _bstr_t p_IfOnUserQueue );
    HRESULT Hold (
        _bstr_t p_ToUserQueue,
        _bstr_t p_IfOnUserQueue );
    HRESULT Private (
        _bstr_t p_IfOnUserQueue );
    HRESULT BlindTransfer (
        _bstr_t p_ToNumber,
        _bstr_t p_IfOnUserQueue );
    HRESULT ConsultTransfer (
        long p_WithCall,
        _bstr_t p_IfOnUserQueue );
    HRESULT SendToVoiceMail (
        _bstr_t p_IfOnUserQueue );
    VARIANT_BOOL GetisHeld ( );
    VARIANT_BOOL GetisRecording ( );
    VARIANT_BOOL GetisPaused ( );
    VARIANT_BOOL GetisMuted ( );
    VARIANT_BOOL GetisPrivate ( );
    VARIANT_BOOL GetisMonitored ( );
    HRESULT PlayDigits (
        _bstr_t p_StringOfDigits );
    VARIANT_BOOL GetisParty ( );
    long GetConferenceId ( );
    HRESULT PutNameAttributeList (
        const _variant_t & p_Names,
        const _variant_t & p_Values );
    HRESULT GetNameAttributeList (
        const _variant_t & p_Names,
        VARIANT * p_Values );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_StateString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StateString (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Pickup (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_Disconnect (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_SetChangeHandler (
        /*[in]*/ struct IEICQueueObjectWatcher * p_Handler ) = 0;
      virtual HRESULT __stdcall get_LocalName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LocalLocation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RemoteName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoteName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RemoteLocation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LocalId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RemoteId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CreationTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCreationTime (
        /*[out]*/ short * hour,
        /*[out]*/ short * minute,
        /*[out]*/ short * second ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNamedAttribute (
        /*[in]*/ BSTR p_Name,
        /*[out]*/ BSTR * p_Value ) = 0;
      virtual HRESULT __stdcall raw_SetNamedAttribute (
        /*[in]*/ BSTR p_Name,
        /*[in]*/ BSTR p_Value ) = 0;
      virtual HRESULT __stdcall raw_ExtendedDial (
        /*[in]*/ BSTR p_Number,
        /*[in]*/ short p_TimeoutSecs,
        /*[in]*/ VARIANT_BOOL p_CallAnalysis,
        /*[in]*/ VARIANT_BOOL p_CallHandlerOnSuccess ) = 0;
      virtual HRESULT __stdcall raw_Dial (
        /*[in]*/ BSTR p_Number,
        /*[in]*/ VARIANT_BOOL p_CallHandlerOnSuccess ) = 0;
      virtual HRESULT __stdcall raw_Listen (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_Record (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Mute (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_Hold (
        /*[in]*/ BSTR p_ToUserQueue,
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_Private (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_BlindTransfer (
        /*[in]*/ BSTR p_ToNumber,
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_ConsultTransfer (
        /*[in]*/ long p_WithCall,
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall raw_SendToVoiceMail (
        /*[in]*/ BSTR p_IfOnUserQueue ) = 0;
      virtual HRESULT __stdcall get_isHeld (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isRecording (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isPaused (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isMuted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isPrivate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isMonitored (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_PlayDigits (
        /*[in]*/ BSTR p_StringOfDigits ) = 0;
      virtual HRESULT __stdcall get_isParty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ConferenceId (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_PutNameAttributeList (
        /*[in]*/ VARIANT p_Names,
        /*[in]*/ VARIANT p_Values ) = 0;
      virtual HRESULT __stdcall raw_GetNameAttributeList (
        /*[in]*/ VARIANT p_Names,
        /*[out]*/ VARIANT * p_Values ) = 0;
};

struct __declspec(uuid("871962b4-fa2d-11d1-8001-00a0c9a79e7c"))
EICUser;
    // [ default ] interface IEICUser

struct __declspec(uuid("dcdd9631-c9f8-11d3-b2a8-0090272dcf18"))
EICUserEx;
    // [ default ] interface IEICUserEx

struct __declspec(uuid("e493e782-47f9-4219-9160-3da480af66bc"))
EICUserS;
    // [ default ] interface IEICUserS

struct __declspec(uuid("c574f7b6-fede-11d1-8001-00a0c9a79e7c"))
EICWorkgroup;
    // [ default ] interface IEICWorkgroup

struct __declspec(uuid("39501890-a539-11d4-a020-00d0b7738aad"))
EICWorkgroupEntry;
    // [ default ] interface IEICWorkgroupEntry

struct __declspec(uuid("21a1d340-a536-11d4-a020-00d0b7738aad"))
IEICWorkgroupEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUserId))
    _bstr_t UserId;
    __declspec(property(get=GetLastName))
    _bstr_t LastName;
    __declspec(property(get=GetFirstName))
    _bstr_t FirstName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAddress))
    _bstr_t Address;
    __declspec(property(get=GetCity))
    _bstr_t City;
    __declspec(property(get=GetState))
    _bstr_t State;
    __declspec(property(get=GetZip))
    _bstr_t Zip;
    __declspec(property(get=GetPhone))
    _bstr_t Phone;
    __declspec(property(get=GetCompany))
    _bstr_t Company;
    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetDepartment))
    _bstr_t Department;
    __declspec(property(get=GetBusinessAddress))
    _bstr_t BusinessAddress;
    __declspec(property(get=GetBusinessCity))
    _bstr_t BusinessCity;
    __declspec(property(get=GetBusinessState))
    _bstr_t BusinessState;
    __declspec(property(get=GetBusinessZip))
    _bstr_t BusinessZip;
    __declspec(property(get=GetBusinessCountry))
    _bstr_t BusinessCountry;
    __declspec(property(get=GetBusinessEMail))
    _bstr_t BusinessEMail;
    __declspec(property(get=GetAssistant))
    _bstr_t Assistant;
    __declspec(property(get=GetHomeCountry))
    _bstr_t HomeCountry;
    __declspec(property(get=GetHomeEMail))
    _bstr_t HomeEMail;
    __declspec(property(get=GetBusinessPhone))
    _bstr_t BusinessPhone;
    __declspec(property(get=GetBusinessPhone2))
    _bstr_t BusinessPhone2;
    __declspec(property(get=GetHomePhone2))
    _bstr_t HomePhone2;
    __declspec(property(get=GetMobile))
    _bstr_t Mobile;
    __declspec(property(get=GetFax))
    _bstr_t Fax;
    __declspec(property(get=GetPager))
    _bstr_t Pager;
    __declspec(property(get=GetAssistantPhone))
    _bstr_t AssistantPhone;
    __declspec(property(get=GetUrl))
    _bstr_t Url;
    __declspec(property(get=GetPrimaryNumber))
    _bstr_t PrimaryNumber;
    __declspec(property(get=GetNotes))
    _bstr_t Notes;
    __declspec(property(get=GetStatusMessage))
    _bstr_t StatusMessage;
    __declspec(property(get=GetStatusKey))
    _bstr_t StatusKey;
    __declspec(property(get=GetUntilDateTime))
    _variant_t UntilDateTime;
    __declspec(property(get=GetisDND))
    VARIANT_BOOL isDND;
    __declspec(property(get=GethasDate))
    VARIANT_BOOL hasDate;
    __declspec(property(get=GethasTime))
    VARIANT_BOOL hasTime;
    __declspec(property(get=GetIsLoggedIn))
    VARIANT_BOOL IsLoggedIn;
    __declspec(property(get=GetisOnPhone))
    VARIANT_BOOL isOnPhone;
    __declspec(property(get=GetExtension))
    _bstr_t Extension;
    __declspec(property(get=GetStatusChangeTime))
    _variant_t StatusChangeTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Load (
        _bstr_t pVal );
    _bstr_t GetUserId ( );
    _bstr_t GetLastName ( );
    _bstr_t GetFirstName ( );
    _bstr_t GetName ( );
    _bstr_t GetAddress ( );
    _bstr_t GetCity ( );
    _bstr_t GetState ( );
    _bstr_t GetZip ( );
    _bstr_t GetPhone ( );
    _bstr_t GetCompany ( );
    _bstr_t GetTitle ( );
    _bstr_t GetDepartment ( );
    _bstr_t GetBusinessAddress ( );
    _bstr_t GetBusinessCity ( );
    _bstr_t GetBusinessState ( );
    _bstr_t GetBusinessZip ( );
    _bstr_t GetBusinessCountry ( );
    _bstr_t GetBusinessEMail ( );
    _bstr_t GetAssistant ( );
    _bstr_t GetHomeCountry ( );
    _bstr_t GetHomeEMail ( );
    _bstr_t GetBusinessPhone ( );
    _bstr_t GetBusinessPhone2 ( );
    _bstr_t GetHomePhone2 ( );
    _bstr_t GetMobile ( );
    _bstr_t GetFax ( );
    _bstr_t GetPager ( );
    _bstr_t GetAssistantPhone ( );
    _bstr_t GetUrl ( );
    _bstr_t GetPrimaryNumber ( );
    _bstr_t GetNotes ( );
    _bstr_t GetStatusMessage ( );
    _bstr_t GetStatusKey ( );
    _variant_t GetUntilDateTime ( );
    VARIANT_BOOL GetisDND ( );
    VARIANT_BOOL GethasDate ( );
    VARIANT_BOOL GethasTime ( );
    VARIANT_BOOL GetIsLoggedIn ( );
    VARIANT_BOOL GetisOnPhone ( );
    _bstr_t GetExtension ( );
    _variant_t GetStatusChangeTime ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UserId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LastName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FirstName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_City (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Zip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Phone (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Company (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Department (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessAddress (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessCity (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessState (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessZip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessCountry (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessEMail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_HomeCountry (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_HomeEMail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessPhone (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessPhone2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_HomePhone2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Mobile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Fax (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Pager (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AssistantPhone (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Url (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PrimaryNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Notes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StatusMessage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StatusKey (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UntilDateTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_isDND (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_hasDate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_hasTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsLoggedIn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isOnPhone (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StatusChangeTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
};

struct __declspec(uuid("661abfe6-0523-11d2-8009-00a0c9a79e7c"))
EICConferenceObject;
    // [ default ] interface IEICConferenceObject

struct __declspec(uuid("661abfe5-0523-11d2-8009-00a0c9a79e7c"))
IEICConferenceObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId,put=PutId))
    long Id;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Create (
        struct IEICCallObject * p_Call );
    HRESULT Add (
        struct IEICCallObject * p_Call );
    HRESULT ListMembers (
        VARIANT * p_ArrayOfCallIds );
    HRESULT SetChangeHandler (
        struct IEICQueueObjectWatcher * p_Handler );
    HRESULT DisconnectParty (
        long p_CallId );
    long GetId ( );
    void PutId (
        long pVal );
    HRESULT StartMembersList ( );
    HRESULT GetNextMember (
        long * p_CallId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ struct IEICCallObject * p_Call ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IEICCallObject * p_Call ) = 0;
      virtual HRESULT __stdcall raw_ListMembers (
        /*[out]*/ VARIANT * p_ArrayOfCallIds ) = 0;
      virtual HRESULT __stdcall raw_SetChangeHandler (
        /*[in]*/ struct IEICQueueObjectWatcher * p_Handler ) = 0;
      virtual HRESULT __stdcall raw_DisconnectParty (
        /*[in]*/ long p_CallId ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_StartMembersList ( ) = 0;
      virtual HRESULT __stdcall raw_GetNextMember (
        /*[out]*/ long * p_CallId ) = 0;
};

struct __declspec(uuid("a6d4728f-4747-11d2-8023-00a0c9a79e7c"))
EICDirectory;
    // [ default ] interface IEICDirectory

struct __declspec(uuid("a6d47291-4747-11d2-8023-00a0c9a79e7c"))
EICDirectoryEntry;
    // [ default ] interface IEICDirectoryEntry

struct __declspec(uuid("c389e627-3fa6-11d3-b26e-0090272dcf18"))
EICQueueStatData;
    // [ default ] interface IEICQueueStatData

struct __declspec(uuid("eb4e2c08-cdec-4b20-b5c9-ec525a1b46b8"))
EICQueueStatDataS;
    // [ default ] interface IEICQueueStatDataS

struct __declspec(uuid("4b12fc9a-89b9-4eaa-9552-d33492a2759a"))
IEICQueueStatDataS : IEICQueueStatData
{
    //
    // Property data
    //

    __declspec(property(get=GetAbandons))
    _variant_t Abandons;
    __declspec(property(get=GetServiceLevels))
    _variant_t ServiceLevels;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAbandons ( );
    _variant_t GetServiceLevels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Abandons (
        /*[out,retval]*/ VARIANT * retVal ) = 0;
      virtual HRESULT __stdcall get_ServiceLevels (
        /*[out,retval]*/ VARIANT * retVal ) = 0;
};

struct __declspec(uuid("c389e628-3fa6-11d3-b26e-0090272dcf18"))
EICQueueStats;
    // [ default ] interface IEICQueueStats

struct __declspec(uuid("c389e630-3fa6-11d3-b26e-0090272dcf18"))
EICWorkgroupStats;
    // [ default ] interface IEICWorkgroupStats

struct __declspec(uuid("c04131b9-dfc7-4e35-8d89-38452cecd1cc"))
EICWorkgroupStatsS;
    // [ default ] interface IEICWorkgroupStatsS

struct __declspec(uuid("5cc138c3-9739-4d16-baca-3c46e6bab9ab"))
IEICWorkgroupStatsS : IEICWorkgroupStats
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusSummaryInfo))
    _variant_t StatusSummaryInfo;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStatusSummaryInfo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StatusSummaryInfo (
        /*[out,retval]*/ VARIANT * p_Data ) = 0;
};

struct __declspec(uuid("c389e631-3fa6-11d3-b26e-0090272dcf18"))
EICStatistics;
    // [ default ] interface IEICStatistics

struct __declspec(uuid("c389e620-3fa6-11d3-b26e-0090272dcf18"))
IEICStatistics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetQueueStats))
    IEICQueueStatsPtr QueueStats;
    __declspec(property(get=GetWorkgroupStats))
    IEICWorkgroupStatsPtr WorkgroupStats;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Connect (
        _bstr_t p_Name );
    HRESULT SetQueueChangeHandler (
        IUnknown * p_Handler );
    HRESULT SetWorkgroupChangeHandler (
        IUnknown * p_Handler );
    IEICQueueStatsPtr GetQueueStats ( );
    IEICWorkgroupStatsPtr GetWorkgroupStats ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR p_Name ) = 0;
      virtual HRESULT __stdcall raw_SetQueueChangeHandler (
        /*[in]*/ IUnknown * p_Handler ) = 0;
      virtual HRESULT __stdcall raw_SetWorkgroupChangeHandler (
        /*[in]*/ IUnknown * p_Handler ) = 0;
      virtual HRESULT __stdcall get_QueueStats (
        /*[out,retval]*/ struct IEICQueueStats * * p_Data ) = 0;
      virtual HRESULT __stdcall get_WorkgroupStats (
        /*[out,retval]*/ struct IEICWorkgroupStats * * p_Data ) = 0;
};

struct __declspec(uuid("f33f3400-9d26-11d3-bfc9-0080c88f546c"))
EICLogging;
    // [ default ] interface IEICLogging

struct __declspec(uuid("f33f3402-9d26-11d3-bfc9-0080c88f546c"))
IEICLogEvent : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Log (
        _bstr_t p_String );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Log (
        /*[in]*/ BSTR p_String ) = 0;
};

struct __declspec(uuid("f33f3401-9d26-11d3-bfc9-0080c88f546c"))
IEICLogging : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInternalDebugging,put=PutInternalDebugging))
    VARIANT_BOOL InternalDebugging;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Start (
        struct IEICLogEvent * p_Logger,
        VARIANT_BOOL p_InternalDebugging );
    HRESULT Stop ( );
    HRESULT Log (
        _bstr_t p_String );
    void PutInternalDebugging (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInternalDebugging ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Start (
        /*[in]*/ struct IEICLogEvent * p_Logger,
        /*[in]*/ VARIANT_BOOL p_InternalDebugging ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_Log (
        /*[in]*/ BSTR p_String ) = 0;
      virtual HRESULT __stdcall put_InternalDebugging (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InternalDebugging (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("f66dafe0-cdb3-11d3-b37e-0050da2c4eb8"))
EICQueueObject2;
    // [ default ] interface IEICQueueObject2

struct __declspec(uuid("a03fa949-da7d-42ba-a75e-fafe537372ff"))
EICChatObject2;
    // [ default ] interface IEICChatObject2

struct __declspec(uuid("2f1187f3-a8c7-11d3-a4bb-009027bf8377"))
EICDS;
    // [ default ] interface IEICDS

struct __declspec(uuid("87f324d0-a286-11d3-a4ba-009027bf8377"))
IEICNames : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    _bstr_t GetItem (
        long Index );
    void PutItem (
        long Index,
        _bstr_t pVal );
    long GetCount ( );
    HRESULT Add (
        _bstr_t newVal );
    HRESULT Remove (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ long Index,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("87f324d1-a286-11d3-a4ba-009027bf8377"))
IEICDS : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWorkgroups))
    IEICNamesPtr Workgroups;
    __declspec(property(get=GetUsers))
    IEICNamesPtr Users;
    __declspec(property(get=GetSkills))
    IEICNamesPtr Skills;
    __declspec(property(get=GetNTUsers))
    IEICNamesPtr NTUsers;
    __declspec(property(get=GetActions))
    IEICNamesPtr Actions;
    __declspec(property(get=GetStatusMessages))
    IEICNamesPtr StatusMessages;
    __declspec(property(get=GetWorkstations))
    IEICNamesPtr Workstations;
    __declspec(property(get=GetSMDIPorts))
    IEICNamesPtr SMDIPorts;
    __declspec(property(get=GetPagingCarriers))
    IEICNamesPtr PagingCarriers;

    //
    // Wrapper methods for error-handling
    //

    IEICNamesPtr GetWorkgroups ( );
    IEICNamesPtr GetUsers ( );
    IEICNamesPtr GetSkills ( );
    IEICNamesPtr GetNTUsers ( );
    IEICNamesPtr GetActions ( );
    IEICNamesPtr GetStatusMessages ( );
    IEICNamesPtr GetWorkstations ( );
    IEICNamesPtr GetSMDIPorts ( );
    IEICNamesPtr GetPagingCarriers ( );
    HRESULT BeginTransaction ( );
    HRESULT EndTransaction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Workgroups (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall get_Users (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall get_Skills (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall get_NTUsers (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall get_Actions (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall get_StatusMessages (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall get_Workstations (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall get_SMDIPorts (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall get_PagingCarriers (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall raw_BeginTransaction ( ) = 0;
      virtual HRESULT __stdcall raw_EndTransaction ( ) = 0;
};

struct __declspec(uuid("a36a7726-a04c-42fd-badc-c6d1db164d78"))
EICDS2;
    // [ default ] interface IEICDS2

struct __declspec(uuid("51355e50-a2c2-11d3-a4ba-009027bf8377"))
IEICDSEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId,put=PutId))
    _bstr_t Id;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetId ( );
    void PutId (
        _bstr_t pVal );
    HRESULT Update ( );
    HRESULT Revert ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall raw_Revert ( ) = 0;
};

struct __declspec(uuid("63cd66ec-a9af-4f3e-965a-a63a6e2e93c7"))
IEICDSCustomEntry : IEICDSEntry
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[];
    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetValue (
        _bstr_t p_Attribute );
    void PutValue (
        _bstr_t p_Attribute,
        const _variant_t & p_Value );
    _bstr_t GetPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[in]*/ BSTR p_Attribute,
        /*[out,retval]*/ VARIANT * p_Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR p_Attribute,
        /*[in]*/ VARIANT p_Value ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * p_Value ) = 0;
};

struct __declspec(uuid("0248f33f-bd89-4c8c-acbe-eef61b18de9d"))
IEICDS2 : IEICDS
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT DeleteEntry (
        struct IEICDSEntry * p_Entry );
    IEICDSCustomEntryPtr CreateCustomEntry (
        struct IEICDSEntry * p_Parent,
        _bstr_t p_Attr );
    IEICDSCustomEntryPtr GetCustomEntry (
        struct IEICDSEntry * p_Parent,
        _bstr_t p_Attr );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_DeleteEntry (
        /*[in]*/ struct IEICDSEntry * p_Entry ) = 0;
      virtual HRESULT __stdcall raw_CreateCustomEntry (
        /*[in]*/ struct IEICDSEntry * p_Parent,
        /*[in]*/ BSTR p_Attr,
        /*[out,retval]*/ struct IEICDSCustomEntry * * p_Entry ) = 0;
      virtual HRESULT __stdcall raw_GetCustomEntry (
        /*[in]*/ struct IEICDSEntry * p_Parent,
        /*[in]*/ BSTR p_Attr,
        /*[out,retval]*/ struct IEICDSCustomEntry * * p_Entry ) = 0;
};

struct __declspec(uuid("c1ca63ff-2a55-4f68-91b1-f3b68bfd5f55"))
EICDS3;
    // [ default ] interface IEICDS3

struct __declspec(uuid("c9f7f545-bd1e-439a-87f0-bd135c14b83d"))
IEICDS3 : IEICDS2
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddSkill (
        _bstr_t p_Skill );
    HRESULT DeleteSkill (
        _bstr_t p_Skill );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddSkill (
        /*[in]*/ BSTR p_Skill ) = 0;
      virtual HRESULT __stdcall raw_DeleteSkill (
        /*[in]*/ BSTR p_Skill ) = 0;
};

struct __declspec(uuid("2f1187f0-a8c7-11d3-a4bb-009027bf8377"))
EICNames;
    // [ default ] interface IEICNames

struct __declspec(uuid("2f1187f1-a8c7-11d3-a4bb-009027bf8377"))
EICDSUser;
    // [ default ] interface IEICDSUser

enum __declspec(uuid("a0ba7322-a288-11d3-a4ba-009027bf8377"))
DSPageAccess
{
    dsShowQueuesPage = 0,
    dsShowUsersPage = 1,
    dsShowStationsPage = 2,
    dsShowLinesPage = 3,
    dsShowWorkgroupsPage = 4,
    dsShowReportsPage = 5,
    dsShowStatistics = 6
};

enum __declspec(uuid("a0ba7323-a288-11d3-a4ba-009027bf8377"))
DSUserRights
{
    dsCustomizeClient = 0,
    dsRecordCalls = 1,
    dsListenInOnCalls = 2,
    dsPrivateCalls = 3,
    dsPublishHandlers = 4,
    dsManagerHandlers = 5,
    dsAllowWorkgroupAlerts = 6,
    dsAllowWorkgroupQueueAlerts = 7,
    dsAllowHandlerTriggerAlerts = 8
};

enum __declspec(uuid("a0ba7324-a288-11d3-a4ba-009027bf8377"))
DSAccessControlCategory
{
    dsViewWorkgroupQueue = 0,
    dsModifyWorkgroupQueue = 1,
    dsViewWorkgroup = 2,
    dsViewUserQueue = 3,
    dsModifyUserQueue = 4,
    dsViewStationQueue = 5,
    dsModifyStationQueue = 6,
    dsViewLineQueue = 7,
    dsModifyLineQueue = 8,
    dsViewReports = 9,
    dsChatMessages = 10,
    dsChatURLs = 11,
    dsChatFiles = 12,
    dsTables = 13,
    dsPhoneNumberClassifications = 14
};

struct __declspec(uuid("610a19be-a108-11d3-a4b9-009027bf8377"))
IEICDSUser : IEICDSEntry
{
    //
    // Property data
    //

    __declspec(property(get=GetUserRights,put=PutUserRights))
    VARIANT_BOOL UserRights[];
    __declspec(property(get=GetExtension,put=PutExtension))
    _bstr_t Extension;
    __declspec(property(get=GetMailbox,put=PutMailbox))
    _bstr_t Mailbox;
    __declspec(property(get=GetMailboxDisplayName,put=PutMailboxDisplayName))
    _bstr_t MailboxDisplayName;
    __declspec(property(put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetStatusMessage,put=PutStatusMessage))
    _bstr_t StatusMessage;
    __declspec(property(get=GetDefaultWorkstation,put=PutDefaultWorkstation))
    _bstr_t DefaultWorkstation;
    __declspec(property(get=GetNTDomainName,put=PutNTDomainName))
    _bstr_t NTDomainName;
    __declspec(property(get=GetOfferingCallTimeout,put=PutOfferingCallTimeout))
    long OfferingCallTimeout;
    __declspec(property(get=GetPagingActive,put=PutPagingActive))
    VARIANT_BOOL PagingActive;
    __declspec(property(get=GetWorkgroups))
    IEICNamesPtr Workgroups;
    __declspec(property(get=GetPagingCarrier,put=PutPagingCarrier))
    _bstr_t PagingCarrier;
    __declspec(property(get=GetPagingPIN,put=PutPagingPIN))
    _bstr_t PagingPIN;
    __declspec(property(get=GetAttribute,put=PutAttribute))
    _variant_t Attribute[];
    __declspec(property(get=GetSkills))
    IEICNamesPtr Skills;
    __declspec(property(get=GetPageAccess,put=PutPageAccess))
    VARIANT_BOOL PageAccess[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetExtension ( );
    void PutExtension (
        _bstr_t pVal );
    _bstr_t GetMailbox ( );
    void PutMailbox (
        _bstr_t pVal );
    _bstr_t GetMailboxDisplayName ( );
    void PutMailboxDisplayName (
        _bstr_t pVal );
    void PutPassword (
        _bstr_t _arg1 );
    _bstr_t GetStatusMessage ( );
    void PutStatusMessage (
        _bstr_t pVal );
    _bstr_t GetDefaultWorkstation ( );
    void PutDefaultWorkstation (
        _bstr_t pVal );
    _bstr_t GetNTDomainName ( );
    void PutNTDomainName (
        _bstr_t pVal );
    IEICNamesPtr GetWorkgroups ( );
    HRESULT AddToWorkgroup (
        _bstr_t p_WorkgroupName );
    HRESULT RemoveFromWorkgroup (
        _bstr_t p_WorkgroupName );
    HRESULT GetACDOptions (
        VARIANT * p_Cost,
        VARIANT * p_Attribute1,
        VARIANT * p_Attribute2,
        VARIANT * p_Attribute3,
        VARIANT * p_AutoAnswerCalls );
    HRESULT SetACDOptions (
        const _variant_t & p_Cost = vtMissing,
        const _variant_t & p_Attribute1 = vtMissing,
        const _variant_t & p_Attribute2 = vtMissing,
        const _variant_t & p_Attribute3 = vtMissing,
        const _variant_t & p_AutoAnswerCalls = vtMissing );
    IEICNamesPtr GetSkills ( );
    HRESULT AddSkill (
        _bstr_t p_SkillName );
    HRESULT RemoveSkill (
        _bstr_t p_SkillName );
    HRESULT SetSkill (
        _bstr_t p_Name,
        long p_Proficiency,
        long p_DesireToUse );
    HRESULT GetSkill (
        _bstr_t p_Name,
        long * p_Proficiency,
        long * p_DesireToUse );
    HRESULT GetAgentGreeting (
        VARIANT_BOOL * p_HasAgentGreeting,
        BSTR * pVal );
    HRESULT SetAgentGreeting (
        VARIANT_BOOL p_HasAgentGreeting,
        _bstr_t p_AgentGreeting );
    HRESULT GetSMDI (
        VARIANT * p_MWIEnabled,
        VARIANT * p_MWIPhoneNumber,
        VARIANT * p_SMDIPort );
    HRESULT SetSMDI (
        const _variant_t & p_MWIEnabled = vtMissing,
        const _variant_t & p_MWIPhoneNumber = vtMissing,
        const _variant_t & p_SMDIPort = vtMissing );
    HRESULT GetClientNotification (
        VARIANT * p_RingTelephone,
        VARIANT * p_RingComputer,
        VARIANT * p_PopClientWindow,
        VARIANT * p_SetFocusToClientWindow );
    HRESULT SetClientNotification (
        const _variant_t & p_RingTelephone = vtMissing,
        const _variant_t & p_RingComputer = vtMissing,
        const _variant_t & p_PopClientWindow = vtMissing,
        const _variant_t & p_SetFocusToClientWindow = vtMissing );
    HRESULT GetNewChatOptions (
        VARIANT * p_PlaySound,
        VARIANT * p_PopClientWindow,
        VARIANT * p_SetFocusToClientWindow );
    HRESULT SetNewChatOptions (
        const _variant_t & p_PlaySound = vtMissing,
        const _variant_t & p_PopClientWindow = vtMissing,
        const _variant_t & p_SetFocusToClientWindow = vtMissing );
    HRESULT GetNewChatTextOptions (
        VARIANT * p_PlaySound,
        VARIANT * p_PopClientWindow,
        VARIANT * p_SetFocusToClientWindow );
    HRESULT SetNewChatTextOptions (
        const _variant_t & p_PlaySound = vtMissing,
        const _variant_t & p_PopClientWindow = vtMissing,
        const _variant_t & p_SetFocusToClientWindow = vtMissing );
    long GetOfferingCallTimeout ( );
    void PutOfferingCallTimeout (
        long pVal );
    HRESULT GetActions (
        VARIANT * p_AlertingAction,
        VARIANT * p_DisconnectedAction );
    HRESULT SetActions (
        const _variant_t & p_AlertingAction,
        const _variant_t & p_DisconnectedAction );
    VARIANT_BOOL GetPagingActive ( );
    void PutPagingActive (
        VARIANT_BOOL pVal );
    _bstr_t GetPagingCarrier ( );
    void PutPagingCarrier (
        _bstr_t pVal );
    _bstr_t GetPagingPIN ( );
    void PutPagingPIN (
        _bstr_t pVal );
    VARIANT_BOOL GetPageAccess (
        enum DSPageAccess p_PageAccess );
    void PutPageAccess (
        enum DSPageAccess p_PageAccess,
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUserRights (
        enum DSUserRights p_UserRights );
    void PutUserRights (
        enum DSUserRights p_UserRights,
        VARIANT_BOOL pVal );
    HRESULT GetAccessControl (
        enum DSAccessControlCategory p_Category,
        struct IEICNames * * p_Inherited,
        struct IEICNames * * p_CurrentAvailable,
        struct IEICNames * * p_CurrentSelected );
    HRESULT SetAccessControl (
        enum DSAccessControlCategory p_Category,
        struct IEICNames * p_CurrentSelected );
    _variant_t GetAttribute (
        long p_Attribute );
    void PutAttribute (
        long p_Attribute,
        const _variant_t & p_Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Extension (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Mailbox (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Mailbox (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MailboxDisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MailboxDisplayName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_StatusMessage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StatusMessage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultWorkstation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultWorkstation (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NTDomainName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NTDomainName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Workgroups (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddToWorkgroup (
        /*[in]*/ BSTR p_WorkgroupName ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromWorkgroup (
        /*[in]*/ BSTR p_WorkgroupName ) = 0;
      virtual HRESULT __stdcall raw_GetACDOptions (
        /*[out]*/ VARIANT * p_Cost,
        /*[out]*/ VARIANT * p_Attribute1,
        /*[out]*/ VARIANT * p_Attribute2,
        /*[out]*/ VARIANT * p_Attribute3,
        /*[out]*/ VARIANT * p_AutoAnswerCalls ) = 0;
      virtual HRESULT __stdcall raw_SetACDOptions (
        /*[in]*/ VARIANT p_Cost = vtMissing,
        /*[in]*/ VARIANT p_Attribute1 = vtMissing,
        /*[in]*/ VARIANT p_Attribute2 = vtMissing,
        /*[in]*/ VARIANT p_Attribute3 = vtMissing,
        /*[in]*/ VARIANT p_AutoAnswerCalls = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Skills (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddSkill (
        /*[in]*/ BSTR p_SkillName ) = 0;
      virtual HRESULT __stdcall raw_RemoveSkill (
        /*[in]*/ BSTR p_SkillName ) = 0;
      virtual HRESULT __stdcall raw_SetSkill (
        /*[in]*/ BSTR p_Name,
        /*[in]*/ long p_Proficiency,
        /*[in]*/ long p_DesireToUse ) = 0;
      virtual HRESULT __stdcall raw_GetSkill (
        /*[in]*/ BSTR p_Name,
        /*[out]*/ long * p_Proficiency,
        /*[out]*/ long * p_DesireToUse ) = 0;
      virtual HRESULT __stdcall raw_GetAgentGreeting (
        /*[out]*/ VARIANT_BOOL * p_HasAgentGreeting,
        /*[out]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAgentGreeting (
        /*[in]*/ VARIANT_BOOL p_HasAgentGreeting,
        /*[in]*/ BSTR p_AgentGreeting ) = 0;
      virtual HRESULT __stdcall raw_GetSMDI (
        /*[out]*/ VARIANT * p_MWIEnabled,
        /*[out]*/ VARIANT * p_MWIPhoneNumber,
        /*[out]*/ VARIANT * p_SMDIPort ) = 0;
      virtual HRESULT __stdcall raw_SetSMDI (
        /*[in]*/ VARIANT p_MWIEnabled = vtMissing,
        /*[in]*/ VARIANT p_MWIPhoneNumber = vtMissing,
        /*[in]*/ VARIANT p_SMDIPort = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetClientNotification (
        /*[out]*/ VARIANT * p_RingTelephone,
        /*[out]*/ VARIANT * p_RingComputer,
        /*[out]*/ VARIANT * p_PopClientWindow,
        /*[out]*/ VARIANT * p_SetFocusToClientWindow ) = 0;
      virtual HRESULT __stdcall raw_SetClientNotification (
        /*[in]*/ VARIANT p_RingTelephone = vtMissing,
        /*[in]*/ VARIANT p_RingComputer = vtMissing,
        /*[in]*/ VARIANT p_PopClientWindow = vtMissing,
        /*[in]*/ VARIANT p_SetFocusToClientWindow = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetNewChatOptions (
        /*[out]*/ VARIANT * p_PlaySound,
        /*[out]*/ VARIANT * p_PopClientWindow,
        /*[out]*/ VARIANT * p_SetFocusToClientWindow ) = 0;
      virtual HRESULT __stdcall raw_SetNewChatOptions (
        /*[in]*/ VARIANT p_PlaySound = vtMissing,
        /*[in]*/ VARIANT p_PopClientWindow = vtMissing,
        /*[in]*/ VARIANT p_SetFocusToClientWindow = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetNewChatTextOptions (
        /*[out]*/ VARIANT * p_PlaySound,
        /*[out]*/ VARIANT * p_PopClientWindow,
        /*[out]*/ VARIANT * p_SetFocusToClientWindow ) = 0;
      virtual HRESULT __stdcall raw_SetNewChatTextOptions (
        /*[in]*/ VARIANT p_PlaySound = vtMissing,
        /*[in]*/ VARIANT p_PopClientWindow = vtMissing,
        /*[in]*/ VARIANT p_SetFocusToClientWindow = vtMissing ) = 0;
      virtual HRESULT __stdcall get_OfferingCallTimeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OfferingCallTimeout (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetActions (
        /*[out]*/ VARIANT * p_AlertingAction,
        /*[out]*/ VARIANT * p_DisconnectedAction ) = 0;
      virtual HRESULT __stdcall raw_SetActions (
        /*[in]*/ VARIANT p_AlertingAction,
        /*[in]*/ VARIANT p_DisconnectedAction ) = 0;
      virtual HRESULT __stdcall get_PagingActive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PagingActive (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PagingCarrier (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PagingCarrier (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PagingPIN (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PagingPIN (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageAccess (
        /*[in]*/ enum DSPageAccess p_PageAccess,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PageAccess (
        /*[in]*/ enum DSPageAccess p_PageAccess,
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UserRights (
        /*[in]*/ enum DSUserRights p_UserRights,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UserRights (
        /*[in]*/ enum DSUserRights p_UserRights,
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccessControl (
        /*[in]*/ enum DSAccessControlCategory p_Category,
        /*[out]*/ struct IEICNames * * p_Inherited,
        /*[out]*/ struct IEICNames * * p_CurrentAvailable,
        /*[out]*/ struct IEICNames * * p_CurrentSelected ) = 0;
      virtual HRESULT __stdcall raw_SetAccessControl (
        /*[in]*/ enum DSAccessControlCategory p_Category,
        /*[in]*/ struct IEICNames * p_CurrentSelected ) = 0;
      virtual HRESULT __stdcall get_Attribute (
        /*[in]*/ long p_Attribute,
        /*[out,retval]*/ VARIANT * p_Val ) = 0;
      virtual HRESULT __stdcall put_Attribute (
        /*[in]*/ long p_Attribute,
        /*[in]*/ VARIANT p_Val ) = 0;
};

struct __declspec(uuid("2f1187f2-a8c7-11d3-a4bb-009027bf8377"))
EICDSWorkgroup;
    // [ default ] interface IEICDSWorkgroup

struct __declspec(uuid("610a19c2-a108-11d3-a4b9-009027bf8377"))
IEICDSWorkgroup : IEICDSEntry
{
    //
    // Property data
    //

    __declspec(property(get=GetSkills))
    IEICNamesPtr Skills;
    __declspec(property(get=GetOfferingCallTimeout,put=PutOfferingCallTimeout))
    long OfferingCallTimeout;
    __declspec(property(get=GetExtension,put=PutExtension))
    _bstr_t Extension;
    __declspec(property(get=GetMailbox,put=PutMailbox))
    _bstr_t Mailbox;
    __declspec(property(get=GetMailboxDisplayName,put=PutMailboxDisplayName))
    _bstr_t MailboxDisplayName;
    __declspec(property(get=GetIcon,put=PutIcon))
    _bstr_t Icon;
    __declspec(property(get=GetRingSound,put=PutRingSound))
    _bstr_t RingSound;
    __declspec(property(get=GetChatSound,put=PutChatSound))
    _bstr_t ChatSound;
    __declspec(property(get=GetOnHoldMusic,put=PutOnHoldMusic))
    _bstr_t OnHoldMusic;
    __declspec(property(get=GetHasQueue,put=PutHasQueue))
    VARIANT_BOOL HasQueue;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetPagingActive,put=PutPagingActive))
    VARIANT_BOOL PagingActive;
    __declspec(property(get=GetExecuteTransferActionOnUserTransfer,put=PutExecuteTransferActionOnUserTransfer))
    VARIANT_BOOL ExecuteTransferActionOnUserTransfer;
    __declspec(property(get=GetNoAnswerStatus,put=PutNoAnswerStatus))
    _bstr_t NoAnswerStatus;
    __declspec(property(get=GetOnCallStatus,put=PutOnCallStatus))
    _bstr_t OnCallStatus;
    __declspec(property(get=GetStatisticsShiftStarts,put=PutStatisticsShiftStarts))
    _variant_t StatisticsShiftStarts;
    __declspec(property(get=GetPageAccess,put=PutPageAccess))
    VARIANT_BOOL PageAccess[];
    __declspec(property(get=GetUserRights,put=PutUserRights))
    VARIANT_BOOL UserRights[];
    __declspec(property(get=GetUsers))
    IEICNamesPtr Users;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetExtension ( );
    void PutExtension (
        _bstr_t pVal );
    _bstr_t GetMailbox ( );
    void PutMailbox (
        _bstr_t pVal );
    _bstr_t GetMailboxDisplayName ( );
    void PutMailboxDisplayName (
        _bstr_t pVal );
    _bstr_t GetIcon ( );
    void PutIcon (
        _bstr_t pVal );
    _bstr_t GetRingSound ( );
    void PutRingSound (
        _bstr_t pVal );
    _bstr_t GetChatSound ( );
    void PutChatSound (
        _bstr_t pVal );
    _bstr_t GetOnHoldMusic ( );
    void PutOnHoldMusic (
        _bstr_t pVal );
    VARIANT_BOOL GetHasQueue ( );
    void PutHasQueue (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL pVal );
    IEICNamesPtr GetUsers ( );
    HRESULT AddUser (
        _bstr_t p_Id );
    HRESULT RemoveUser (
        _bstr_t p_Id );
    IEICNamesPtr GetSkills ( );
    HRESULT AddSkill (
        _bstr_t p_SkillName );
    HRESULT RemoveSkill (
        _bstr_t p_SkillName );
    HRESULT SetSkill (
        _bstr_t p_Name,
        long p_Proficiency,
        long p_DesireToUse );
    HRESULT GetSkill (
        _bstr_t p_Name,
        long * p_Proficiency,
        long * p_DesireToUse );
    HRESULT GetACDActions (
        VARIANT * p_AlertingAction,
        VARIANT * p_DisconnectedAction,
        VARIANT * p_TransferAction,
        VARIANT * p_IncomingTransferAction );
    HRESULT SetACDActions (
        const _variant_t & p_AlertingAction,
        const _variant_t & p_DisconnectedAction,
        const _variant_t & p_TransferAction,
        const _variant_t & p_IncomingTransferAction );
    VARIANT_BOOL GetExecuteTransferActionOnUserTransfer ( );
    void PutExecuteTransferActionOnUserTransfer (
        VARIANT_BOOL pVal );
    _bstr_t GetNoAnswerStatus ( );
    void PutNoAnswerStatus (
        _bstr_t pVal );
    _bstr_t GetOnCallStatus ( );
    void PutOnCallStatus (
        _bstr_t pVal );
    HRESULT GetWrapup (
        long * p_WrapupTime,
        BSTR * p_WrapupStatus );
    HRESULT SetWrapup (
        long p_WrapupTime,
        _bstr_t p_WrapupStatus );
    HRESULT GetActions (
        VARIANT * p_AlertingAction,
        VARIANT * p_DisconnectedAction );
    HRESULT SetActions (
        const _variant_t & p_AlertingAction,
        const _variant_t & p_DisconnectedAction );
    long GetOfferingCallTimeout ( );
    void PutOfferingCallTimeout (
        long pVal );
    VARIANT_BOOL GetPagingActive ( );
    void PutPagingActive (
        VARIANT_BOOL pVal );
    HRESULT GetCallStatistics (
        VARIANT * p_StatisticsPeriod,
        VARIANT * p_EstimatedCallTimeInterval );
    HRESULT SetCallStatistics (
        const _variant_t & p_StatisticsPeriod,
        const _variant_t & p_EstimatedCallTimeInterval );
    _variant_t GetStatisticsShiftStarts ( );
    void PutStatisticsShiftStarts (
        const _variant_t & pVal );
    VARIANT_BOOL GetPageAccess (
        enum DSPageAccess p_PageAccess );
    void PutPageAccess (
        enum DSPageAccess p_PageAccess,
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUserRights (
        enum DSUserRights p_UserRights );
    void PutUserRights (
        enum DSUserRights p_UserRights,
        VARIANT_BOOL pVal );
    HRESULT GetAccessControl (
        enum DSAccessControlCategory p_Category,
        struct IEICNames * * p_Inherited,
        struct IEICNames * * p_CurrentAvailable,
        struct IEICNames * * p_CurrentSelected );
    HRESULT SetAccessControl (
        enum DSAccessControlCategory p_Category,
        struct IEICNames * p_CurrentSelected );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Extension (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Mailbox (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Mailbox (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MailboxDisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MailboxDisplayName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Icon (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Icon (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RingSound (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RingSound (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ChatSound (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ChatSound (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnHoldMusic (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnHoldMusic (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasQueue (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasQueue (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Users (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddUser (
        /*[in]*/ BSTR p_Id ) = 0;
      virtual HRESULT __stdcall raw_RemoveUser (
        /*[in]*/ BSTR p_Id ) = 0;
      virtual HRESULT __stdcall get_Skills (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddSkill (
        /*[in]*/ BSTR p_SkillName ) = 0;
      virtual HRESULT __stdcall raw_RemoveSkill (
        /*[in]*/ BSTR p_SkillName ) = 0;
      virtual HRESULT __stdcall raw_SetSkill (
        /*[in]*/ BSTR p_Name,
        /*[in]*/ long p_Proficiency,
        /*[in]*/ long p_DesireToUse ) = 0;
      virtual HRESULT __stdcall raw_GetSkill (
        /*[in]*/ BSTR p_Name,
        /*[out]*/ long * p_Proficiency,
        /*[out]*/ long * p_DesireToUse ) = 0;
      virtual HRESULT __stdcall raw_GetACDActions (
        /*[out]*/ VARIANT * p_AlertingAction,
        /*[out]*/ VARIANT * p_DisconnectedAction,
        /*[out]*/ VARIANT * p_TransferAction,
        /*[out]*/ VARIANT * p_IncomingTransferAction ) = 0;
      virtual HRESULT __stdcall raw_SetACDActions (
        /*[in]*/ VARIANT p_AlertingAction,
        /*[in]*/ VARIANT p_DisconnectedAction,
        /*[in]*/ VARIANT p_TransferAction,
        /*[in]*/ VARIANT p_IncomingTransferAction ) = 0;
      virtual HRESULT __stdcall get_ExecuteTransferActionOnUserTransfer (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExecuteTransferActionOnUserTransfer (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_NoAnswerStatus (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NoAnswerStatus (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OnCallStatus (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OnCallStatus (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWrapup (
        /*[out]*/ long * p_WrapupTime,
        /*[out]*/ BSTR * p_WrapupStatus ) = 0;
      virtual HRESULT __stdcall raw_SetWrapup (
        /*[in]*/ long p_WrapupTime,
        /*[in]*/ BSTR p_WrapupStatus ) = 0;
      virtual HRESULT __stdcall raw_GetActions (
        /*[out]*/ VARIANT * p_AlertingAction,
        /*[out]*/ VARIANT * p_DisconnectedAction ) = 0;
      virtual HRESULT __stdcall raw_SetActions (
        /*[in]*/ VARIANT p_AlertingAction,
        /*[in]*/ VARIANT p_DisconnectedAction ) = 0;
      virtual HRESULT __stdcall get_OfferingCallTimeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OfferingCallTimeout (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PagingActive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PagingActive (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCallStatistics (
        /*[out]*/ VARIANT * p_StatisticsPeriod,
        /*[out]*/ VARIANT * p_EstimatedCallTimeInterval ) = 0;
      virtual HRESULT __stdcall raw_SetCallStatistics (
        /*[in]*/ VARIANT p_StatisticsPeriod,
        /*[in]*/ VARIANT p_EstimatedCallTimeInterval ) = 0;
      virtual HRESULT __stdcall get_StatisticsShiftStarts (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StatisticsShiftStarts (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_PageAccess (
        /*[in]*/ enum DSPageAccess p_PageAccess,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PageAccess (
        /*[in]*/ enum DSPageAccess p_PageAccess,
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UserRights (
        /*[in]*/ enum DSUserRights p_UserRights,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UserRights (
        /*[in]*/ enum DSUserRights p_UserRights,
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccessControl (
        /*[in]*/ enum DSAccessControlCategory p_Category,
        /*[out]*/ struct IEICNames * * p_Inherited,
        /*[out]*/ struct IEICNames * * p_CurrentAvailable,
        /*[out]*/ struct IEICNames * * p_CurrentSelected ) = 0;
      virtual HRESULT __stdcall raw_SetAccessControl (
        /*[in]*/ enum DSAccessControlCategory p_Category,
        /*[in]*/ struct IEICNames * p_CurrentSelected ) = 0;
};

struct __declspec(uuid("dfb4c8f3-e578-43ce-9c85-00088769901b"))
EICDSStation;
    // [ default ] interface IEICDSStation
    // interface IEICDSStationEx

struct __declspec(uuid("24b55505-d3f7-45f0-8712-41de90c84527"))
IEICDSStation : IEICDSEntry
{
    //
    // Property data
    //

    __declspec(property(get=GetExtension,put=PutExtension))
    _bstr_t Extension;
    __declspec(property(get=GetType,put=PutType))
    _bstr_t Type;
    __declspec(property(get=GetPortNumber,put=PutPortNumber))
    int PortNumber;
    __declspec(property(get=GetBoardNumber,put=PutBoardNumber))
    int BoardNumber;
    __declspec(property(get=GetChannel,put=PutChannel))
    _bstr_t Channel;
    __declspec(property(get=GetDriver,put=PutDriver))
    _bstr_t Driver;
    __declspec(property(get=GetActive,put=PutActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetRingAlways,put=PutRingAlways))
    VARIANT_BOOL RingAlways;
    __declspec(property(get=GetRemotePhone,put=PutRemotePhone))
    _bstr_t RemotePhone;
    __declspec(property(get=GetRemoteLineGroup,put=PutRemoteLineGroup))
    _bstr_t RemoteLineGroup;
    __declspec(property(get=GetNode,put=PutNode))
    _bstr_t Node;
    __declspec(property(get=GetVoiceResource,put=PutVoiceResource))
    int VoiceResource;
    __declspec(property(get=GetADSI,put=PutADSI))
    _bstr_t ADSI;
    __declspec(property(get=GetFSKType,put=PutFSKType))
    _bstr_t FSKType;
    __declspec(property(get=GetConnectionType,put=PutConnectionType))
    _bstr_t ConnectionType;
    __declspec(property(get=GetLine,put=PutLine))
    _bstr_t Line;
    __declspec(property(get=GetIPAddress,put=PutIPAddress))
    _bstr_t IPAddress;
    __declspec(property(get=GetAccess,put=PutAccess))
    IEICNamesPtr Access;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetExtension ( );
    void PutExtension (
        _bstr_t pVal );
    _bstr_t GetType ( );
    void PutType (
        _bstr_t pVal );
    int GetPortNumber ( );
    void PutPortNumber (
        int pVal );
    int GetBoardNumber ( );
    void PutBoardNumber (
        int pVal );
    _bstr_t GetChannel ( );
    void PutChannel (
        _bstr_t pVal );
    _bstr_t GetDriver ( );
    void PutDriver (
        _bstr_t pVal );
    VARIANT_BOOL GetActive ( );
    void PutActive (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRingAlways ( );
    void PutRingAlways (
        VARIANT_BOOL pVal );
    _bstr_t GetRemotePhone ( );
    void PutRemotePhone (
        _bstr_t pVal );
    _bstr_t GetRemoteLineGroup ( );
    void PutRemoteLineGroup (
        _bstr_t pVal );
    _bstr_t GetNode ( );
    void PutNode (
        _bstr_t pVal );
    int GetVoiceResource ( );
    void PutVoiceResource (
        int pVal );
    _bstr_t GetADSI ( );
    void PutADSI (
        _bstr_t pVal );
    _bstr_t GetFSKType ( );
    void PutFSKType (
        _bstr_t pVal );
    _bstr_t GetConnectionType ( );
    void PutConnectionType (
        _bstr_t pVal );
    _bstr_t GetLine ( );
    void PutLine (
        _bstr_t pVal );
    _bstr_t GetIPAddress ( );
    void PutIPAddress (
        _bstr_t pVal );
    IEICNamesPtr GetAccess ( );
    void PutAccess (
        struct IEICNames * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Extension (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Extension (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PortNumber (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_PortNumber (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_BoardNumber (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_BoardNumber (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_Channel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Channel (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Driver (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Driver (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RingAlways (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RingAlways (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RemotePhone (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RemotePhone (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RemoteLineGroup (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoteLineGroup (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Node (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Node (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VoiceResource (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_VoiceResource (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_ADSI (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ADSI (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FSKType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FSKType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectionType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Line (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IPAddress (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IPAddress (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Access (
        /*[out,retval]*/ struct IEICNames * * pVal ) = 0;
      virtual HRESULT __stdcall put_Access (
        /*[in]*/ struct IEICNames * pVal ) = 0;
};

struct __declspec(uuid("c5d66ebd-08f6-4092-8b82-082ac440fb3b"))
IEICDSStationEx : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SaveAttributesAndSetLicenses ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SaveAttributesAndSetLicenses ( ) = 0;
};

struct __declspec(uuid("13a4c8af-a1ed-4b3c-8d4b-9306b3c1c6fe"))
EICDSCustomEntry;
    // [ default ] interface IEICDSCustomEntry

struct __declspec(uuid("6b6bd742-a43a-43dc-9163-804db42da4ef"))
EICGenericObject2;
    // [ default ] interface IEICGenericObject2

struct __declspec(uuid("114340e0-5eec-11d4-b382-0050da2c4eb8"))
IEICGenericObject2 : IEICQueueObject2
{
    //
    // Wrapper methods for error-handling
    //

    int CreateNew (
        _bstr_t p_QueueName,
        int p_QueueType,
        enum EICQueueObjectStates p_State,
        int p_Direction,
        int p_RemotePartyType,
        int p_LocalPartyType,
        _bstr_t p_RemoteName,
        _bstr_t p_RemoteId,
        _bstr_t p_LocalLocation );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateNew (
        /*[in]*/ BSTR p_QueueName,
        /*[in]*/ int p_QueueType,
        /*[in]*/ enum EICQueueObjectStates p_State,
        /*[in]*/ int p_Direction,
        /*[in]*/ int p_RemotePartyType,
        /*[in]*/ int p_LocalPartyType,
        /*[in]*/ BSTR p_RemoteName,
        /*[in]*/ BSTR p_RemoteId,
        /*[in]*/ BSTR p_LocalLocation,
        /*[out,retval]*/ int * p_NewId ) = 0;
};

struct __declspec(uuid("0fd32b55-87bf-48ce-8dd4-d10a6f00b761"))
EICUserEx2;
    // [ default ] interface IEICUserEx2

struct __declspec(uuid("aa801a81-2407-438e-ae26-2de0f70d5fd2"))
EICUserStatus;
    // [ default ] interface IEICUserStatus

struct __declspec(uuid("4ccb8396-4e17-4fca-b6d2-2b942516d861"))
IEICUserStatus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusMessage))
    _bstr_t StatusMessage[];
    __declspec(property(get=GetStatusKey))
    _bstr_t StatusKey[];
    __declspec(property(get=GetUntilDateTime))
    DATE UntilDateTime[];
    __declspec(property(get=GetisDND))
    VARIANT_BOOL isDND[];
    __declspec(property(get=GethasDate))
    VARIANT_BOOL hasDate[];
    __declspec(property(get=GethasTime))
    VARIANT_BOOL hasTime[];
    __declspec(property(get=GetIsLoggedIn))
    VARIANT_BOOL IsLoggedIn[];
    __declspec(property(get=GetisOnPhone))
    VARIANT_BOOL isOnPhone[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStatusMessage (
        _bstr_t p_User );
    _bstr_t GetStatusKey (
        _bstr_t p_User );
    DATE GetUntilDateTime (
        _bstr_t p_User );
    VARIANT_BOOL GetisDND (
        _bstr_t p_User );
    VARIANT_BOOL GethasDate (
        _bstr_t p_User );
    VARIANT_BOOL GethasTime (
        _bstr_t p_User );
    VARIANT_BOOL GetIsLoggedIn (
        _bstr_t p_User );
    VARIANT_BOOL GetisOnPhone (
        _bstr_t p_User );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StatusMessage (
        /*[in]*/ BSTR p_User,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StatusKey (
        /*[in]*/ BSTR p_User,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UntilDateTime (
        /*[in]*/ BSTR p_User,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_isDND (
        /*[in]*/ BSTR p_User,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_hasDate (
        /*[in]*/ BSTR p_User,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_hasTime (
        /*[in]*/ BSTR p_User,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsLoggedIn (
        /*[in]*/ BSTR p_User,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isOnPhone (
        /*[in]*/ BSTR p_User,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("a0bd2efe-bd45-4ac0-882a-8b3394192c4b"))
EICCampMonitor;
    // [ default ] interface IEICCampMonitor

struct __declspec(uuid("3d6d1a1c-87dc-4476-969d-b4e94982ccc6"))
IEICCampEvent : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT CampEvent (
        _bstr_t p_UserId,
        long p_EventId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CampEvent (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ long p_EventId ) = 0;
};

struct __declspec(uuid("3dc1217f-bb5d-460b-8fb8-cbd3bba5d7bc"))
IEICCampMonitor : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StartCamp (
        _bstr_t p_UserId );
    HRESULT EndCamp (
        _bstr_t p_UserId );
    HRESULT EndAllCamp ( );
    HRESULT SetMarshalledCallback (
        struct IEICCampEvent * p_Handler );
    HRESULT SetThreadCallback (
        struct IEICCampEvent * p_Handler );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StartCamp (
        /*[in]*/ BSTR p_UserId ) = 0;
      virtual HRESULT __stdcall raw_EndCamp (
        /*[in]*/ BSTR p_UserId ) = 0;
      virtual HRESULT __stdcall raw_EndAllCamp ( ) = 0;
      virtual HRESULT __stdcall raw_SetMarshalledCallback (
        /*[in]*/ struct IEICCampEvent * p_Handler ) = 0;
      virtual HRESULT __stdcall raw_SetThreadCallback (
        /*[in]*/ struct IEICCampEvent * p_Handler ) = 0;
};

struct __declspec(uuid("3ca6f21d-c3d1-4dbb-af47-3470562e2dfd"))
EICDirectory2;
    // [ default ] interface IEICDirectory2

struct __declspec(uuid("2304fc63-3212-4475-a8b5-1433053a3e4d"))
EICQueueObject2WatcherAdapter;
    // [ default ] interface IEICQueueObject2WatcherAdapter

struct __declspec(uuid("880dea54-1503-4fb4-b238-0409592cc307"))
IEICQueueObject2WatcherAdapter : IEICQueueObject2Watcher
{
    //
    // Property data
    //

    __declspec(property(get=GetStateChangedFunc,put=PutStateChangedFunc))
    _variant_t StateChangedFunc;
    __declspec(property(get=GetSubObjectChangedFunc,put=PutSubObjectChangedFunc))
    _variant_t SubObjectChangedFunc;
    __declspec(property(get=GetObjectSpecificErrorFunc,put=PutObjectSpecificErrorFunc))
    _variant_t ObjectSpecificErrorFunc;
    __declspec(property(get=GetObjectDestroyedFunc,put=PutObjectDestroyedFunc))
    _variant_t ObjectDestroyedFunc;

    //
    // Wrapper methods for error-handling
    //

    void PutStateChangedFunc (
        const _variant_t & p_Function );
    void PutSubObjectChangedFunc (
        const _variant_t & p_Function );
    void PutObjectSpecificErrorFunc (
        const _variant_t & p_Function );
    void PutObjectDestroyedFunc (
        const _variant_t & p_Function );
    _variant_t GetStateChangedFunc ( );
    _variant_t GetSubObjectChangedFunc ( );
    _variant_t GetObjectSpecificErrorFunc ( );
    _variant_t GetObjectDestroyedFunc ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_StateChangedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_SubObjectChangedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_ObjectSpecificErrorFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_ObjectDestroyedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall get_StateChangedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_SubObjectChangedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_ObjectSpecificErrorFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_ObjectDestroyedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
};

struct __declspec(uuid("cd3b5e75-cafc-431f-9c97-a5a748b2eca3"))
EICChatObject2WatcherAdapter;
    // [ default ] interface IEICChatObject2WatcherAdapter

struct __declspec(uuid("e58b0d0d-18e2-4560-b315-fe9342a43713"))
IEICChatObject2WatcherAdapter : IEICChatObject2Watcher
{
    //
    // Property data
    //

    __declspec(property(get=GetStateChangedFunc,put=PutStateChangedFunc))
    _variant_t StateChangedFunc;
    __declspec(property(get=GetSubObjectChangedFunc,put=PutSubObjectChangedFunc))
    _variant_t SubObjectChangedFunc;
    __declspec(property(get=GetObjectSpecificErrorFunc,put=PutObjectSpecificErrorFunc))
    _variant_t ObjectSpecificErrorFunc;
    __declspec(property(get=GetObjectDestroyedFunc,put=PutObjectDestroyedFunc))
    _variant_t ObjectDestroyedFunc;
    __declspec(property(get=GetReceivedStringFunc,put=PutReceivedStringFunc))
    _variant_t ReceivedStringFunc;
    __declspec(property(get=GetReceivedUrlFunc,put=PutReceivedUrlFunc))
    _variant_t ReceivedUrlFunc;
    __declspec(property(get=GetReceivedFileFunc,put=PutReceivedFileFunc))
    _variant_t ReceivedFileFunc;

    //
    // Wrapper methods for error-handling
    //

    void PutStateChangedFunc (
        const _variant_t & p_Function );
    void PutSubObjectChangedFunc (
        const _variant_t & p_Function );
    void PutObjectSpecificErrorFunc (
        const _variant_t & p_Function );
    void PutObjectDestroyedFunc (
        const _variant_t & p_Function );
    void PutReceivedStringFunc (
        const _variant_t & p_Function );
    void PutReceivedUrlFunc (
        const _variant_t & p_Function );
    void PutReceivedFileFunc (
        const _variant_t & p_Function );
    _variant_t GetStateChangedFunc ( );
    _variant_t GetSubObjectChangedFunc ( );
    _variant_t GetObjectSpecificErrorFunc ( );
    _variant_t GetObjectDestroyedFunc ( );
    _variant_t GetReceivedStringFunc ( );
    _variant_t GetReceivedUrlFunc ( );
    _variant_t GetReceivedFileFunc ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_StateChangedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_SubObjectChangedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_ObjectSpecificErrorFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_ObjectDestroyedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_ReceivedStringFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_ReceivedUrlFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_ReceivedFileFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall get_StateChangedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_SubObjectChangedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_ObjectSpecificErrorFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_ObjectDestroyedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_ReceivedStringFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_ReceivedUrlFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_ReceivedFileFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
};

struct __declspec(uuid("bbb6c733-660b-4d0d-a29b-6ee0d26efbbb"))
EICCallObject2WatcherAdapter;
    // [ default ] interface IEICCallObject2WatcherAdapter

struct __declspec(uuid("b4a48d6a-000b-4ab7-924c-98da4791acf9"))
IEICCallObject2WatcherAdapter : IEICCallObject2Watcher
{
    //
    // Property data
    //

    __declspec(property(get=GetStateChangedFunc,put=PutStateChangedFunc))
    _variant_t StateChangedFunc;
    __declspec(property(get=GetSubObjectChangedFunc,put=PutSubObjectChangedFunc))
    _variant_t SubObjectChangedFunc;
    __declspec(property(get=GetObjectSpecificErrorFunc,put=PutObjectSpecificErrorFunc))
    _variant_t ObjectSpecificErrorFunc;
    __declspec(property(get=GetObjectDestroyedFunc,put=PutObjectDestroyedFunc))
    _variant_t ObjectDestroyedFunc;
    __declspec(property(get=GetStatusChangeFunc,put=PutStatusChangeFunc))
    _variant_t StatusChangeFunc;

    //
    // Wrapper methods for error-handling
    //

    void PutStateChangedFunc (
        const _variant_t & p_Function );
    void PutSubObjectChangedFunc (
        const _variant_t & p_Function );
    void PutObjectSpecificErrorFunc (
        const _variant_t & p_Function );
    void PutObjectDestroyedFunc (
        const _variant_t & p_Function );
    void PutStatusChangeFunc (
        const _variant_t & p_Function );
    _variant_t GetStateChangedFunc ( );
    _variant_t GetSubObjectChangedFunc ( );
    _variant_t GetObjectSpecificErrorFunc ( );
    _variant_t GetObjectDestroyedFunc ( );
    _variant_t GetStatusChangeFunc ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_StateChangedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_SubObjectChangedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_ObjectSpecificErrorFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_ObjectDestroyedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall put_StatusChangeFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall get_StateChangedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_SubObjectChangedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_ObjectSpecificErrorFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_ObjectDestroyedFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
      virtual HRESULT __stdcall get_StatusChangeFunc (
        /*[out,retval]*/ VARIANT * p_Function ) = 0;
};

struct __declspec(uuid("7cff04d5-31b6-4dc1-95bb-d9e30fb0674f"))
EICWorkgroup2;
    // [ default ] interface IEICWorkgroup2

struct __declspec(uuid("245174df-1a9d-4e83-ba21-94caee38e89c"))
IEICWorkgroup2 : IEICWorkgroup
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetMarshalledCallback (
        IUnknown * p_Watcher,
        VARIANT_BOOL p_WatchIndividuals );
    HRESULT SetThreadCallback (
        IUnknown * p_Watcher,
        VARIANT_BOOL p_WatchIndividuals );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetMarshalledCallback (
        /*[in]*/ IUnknown * p_Watcher,
        /*[in]*/ VARIANT_BOOL p_WatchIndividuals ) = 0;
      virtual HRESULT __stdcall raw_SetThreadCallback (
        /*[in]*/ IUnknown * p_Watcher,
        /*[in]*/ VARIANT_BOOL p_WatchIndividuals ) = 0;
};

struct __declspec(uuid("fc20cb34-222c-45dd-90ff-9072409a87a8"))
EICConferenceObject2;
    // [ default ] interface IEICConferenceObject2

struct __declspec(uuid("beffc281-c8d8-11d3-b37e-0050da2c4eb8"))
IEICCallObject2 : IEICQueueObject2
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT PlayDigits (
        _bstr_t p_StringOfDigits );
    HRESULT ExtendedDial (
        _bstr_t p_Number,
        short p_TimeoutSecs,
        VARIANT_BOOL p_CallAnalysis,
        VARIANT_BOOL p_CallHandlerOnSuccess );
    HRESULT Dial (
        _bstr_t p_Number,
        VARIANT_BOOL p_CallHandlerOnSuccess );
    HRESULT ExtendedDialForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        _bstr_t p_Number,
        short p_TimeoutSecs,
        VARIANT_BOOL p_CallAnalysis,
        VARIANT_BOOL p_CallHandlerOnSuccess );
    HRESULT DialForUser (
        _bstr_t p_User,
        _bstr_t p_Station,
        _bstr_t p_Number,
        VARIANT_BOOL p_CallHandlerOnSuccess );
    HRESULT DialError (
        long p_Error );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_PlayDigits (
        /*[in]*/ BSTR p_StringOfDigits ) = 0;
      virtual HRESULT __stdcall raw_ExtendedDial (
        /*[in]*/ BSTR p_Number,
        /*[in]*/ short p_TimeoutSecs,
        /*[in]*/ VARIANT_BOOL p_CallAnalysis,
        /*[in]*/ VARIANT_BOOL p_CallHandlerOnSuccess ) = 0;
      virtual HRESULT __stdcall raw_Dial (
        /*[in]*/ BSTR p_Number,
        /*[in]*/ VARIANT_BOOL p_CallHandlerOnSuccess ) = 0;
      virtual HRESULT __stdcall raw_ExtendedDialForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ BSTR p_Number,
        /*[in]*/ short p_TimeoutSecs,
        /*[in]*/ VARIANT_BOOL p_CallAnalysis,
        /*[in]*/ VARIANT_BOOL p_CallHandlerOnSuccess ) = 0;
      virtual HRESULT __stdcall raw_DialForUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ BSTR p_Number,
        /*[in]*/ VARIANT_BOOL p_CallHandlerOnSuccess ) = 0;
      virtual HRESULT __stdcall raw_DialError (
        /*[in]*/ long p_Error ) = 0;
};

struct __declspec(uuid("3bb29ac1-afa7-472d-a30c-aca2fb472934"))
IEICConferenceObject2 : IEICConferenceObject
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetMarshalledCallback (
        IUnknown * p_Watcher );
    HRESULT SetThreadCallback (
        IUnknown * p_Watcher );
    HRESULT SendTextMessage (
        _bstr_t p_Msg );
    HRESULT SendTextMessageForUser (
        _bstr_t p_UserId,
        _bstr_t p_Msg );
    HRESULT GetCurrentText (
        BSTR * p_Msgs );
    HRESULT Create (
        struct IEICCallObject2 * p_Call );
    HRESULT Add (
        struct IEICCallObject2 * p_Call );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetMarshalledCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_SetThreadCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_SendTextMessage (
        /*[in]*/ BSTR p_Msg ) = 0;
      virtual HRESULT __stdcall raw_SendTextMessageForUser (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ BSTR p_Msg ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentText (
        /*[out]*/ BSTR * p_Msgs ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ struct IEICCallObject2 * p_Call ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IEICCallObject2 * p_Call ) = 0;
};

struct __declspec(uuid("4422dee4-dd47-4e9a-abb4-ca049e5c3d2e"))
EICEmailObject2;
    // [ default ] interface IEICEmailObject2
    // interface IEICEmailObject2Response

struct __declspec(uuid("6be25e0f-ae23-4f8a-ae1a-6b2fcdde5220"))
IEICEmailObject2 : IEICQueueObject2
{
    //
    // Property data
    //

    __declspec(property(get=GetFrom))
    _bstr_t From;
    __declspec(property(get=GetToList))
    _variant_t ToList;
    __declspec(property(get=GetCCList))
    _variant_t CCList;
    __declspec(property(get=GetBCCList))
    _variant_t BCCList;
    __declspec(property(get=GetReplyList))
    _variant_t ReplyList;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;
    __declspec(property(get=GetTextBody))
    _bstr_t TextBody;
    __declspec(property(get=GetImportance))
    _bstr_t Importance;
    __declspec(property(get=GetContentType))
    _bstr_t ContentType;
    __declspec(property(get=GetDate))
    _variant_t Date;
    __declspec(property(get=GetSenderName))
    _bstr_t SenderName;
    __declspec(property(get=GetNumAttachments))
    int NumAttachments;
    __declspec(property(get=GetAttachmentName))
    _bstr_t AttachmentName[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFrom ( );
    _bstr_t GetSenderName ( );
    _variant_t GetToList ( );
    _variant_t GetCCList ( );
    _variant_t GetBCCList ( );
    _variant_t GetReplyList ( );
    _bstr_t GetSubject ( );
    _bstr_t GetTextBody ( );
    _bstr_t GetImportance ( );
    _bstr_t GetContentType ( );
    _variant_t GetDate ( );
    HRESULT SaveAttachment (
        _bstr_t attachmentFilePath,
        long Index );
    int GetNumAttachments ( );
    _bstr_t GetAttachmentName (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_SenderName (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ToList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_CCList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_BCCList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_ReplyList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_TextBody (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_Importance (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ContentType (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_Date (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall raw_SaveAttachment (
        /*[in]*/ BSTR attachmentFilePath,
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_NumAttachments (
        /*[out,retval]*/ int * Val ) = 0;
      virtual HRESULT __stdcall get_AttachmentName (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * Val ) = 0;
};

struct __declspec(uuid("792ecbbe-e34e-42cb-a9d5-dccf0127038a"))
IEICEmailObject2Response : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetResponseFrom,put=PutResponseFrom))
    _bstr_t ResponseFrom;
    __declspec(property(get=GetResponseToList,put=PutResponseToList))
    _variant_t ResponseToList;
    __declspec(property(get=GetResponseCCList,put=PutResponseCCList))
    _variant_t ResponseCCList;
    __declspec(property(get=GetResponseBCCList,put=PutResponseBCCList))
    _variant_t ResponseBCCList;
    __declspec(property(get=GetResponseReplyList,put=PutResponseReplyList))
    _variant_t ResponseReplyList;
    __declspec(property(get=GetResponseSubject,put=PutResponseSubject))
    _bstr_t ResponseSubject;
    __declspec(property(get=GetResponseTextBody,put=PutResponseTextBody))
    _bstr_t ResponseTextBody;
    __declspec(property(get=GetResponseImportance,put=PutResponseImportance))
    _bstr_t ResponseImportance;
    __declspec(property(get=GetResponseContentType,put=PutResponseContentType))
    _bstr_t ResponseContentType;
    __declspec(property(get=GetResponseDate,put=PutResponseDate))
    _variant_t ResponseDate;
    __declspec(property(get=GetResponseDirty))
    VARIANT_BOOL ResponseDirty;
    __declspec(property(get=GetResponseSenderName,put=PutResponseSenderName))
    _bstr_t ResponseSenderName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetResponseFrom ( );
    _bstr_t GetResponseSenderName ( );
    _variant_t GetResponseToList ( );
    _variant_t GetResponseCCList ( );
    _variant_t GetResponseBCCList ( );
    _variant_t GetResponseReplyList ( );
    _bstr_t GetResponseSubject ( );
    _bstr_t GetResponseTextBody ( );
    _bstr_t GetResponseImportance ( );
    _bstr_t GetResponseContentType ( );
    _variant_t GetResponseDate ( );
    VARIANT_BOOL GetResponseDirty ( );
    void PutResponseFrom (
        _bstr_t Val );
    void PutResponseSenderName (
        _bstr_t Val );
    void PutResponseToList (
        const _variant_t & Val );
    void PutResponseCCList (
        const _variant_t & Val );
    void PutResponseBCCList (
        const _variant_t & Val );
    void PutResponseReplyList (
        const _variant_t & Val );
    void PutResponseSubject (
        _bstr_t Val );
    void PutResponseTextBody (
        _bstr_t Val );
    void PutResponseImportance (
        _bstr_t Val );
    void PutResponseContentType (
        _bstr_t Val );
    void PutResponseDate (
        const _variant_t & Val );
    HRESULT SaveResponse ( );
    HRESULT SendResponse ( );
    HRESULT ClearResponse ( );
    HRESULT RemoveResponseAttachment (
        long Index );
    HRESULT InsertResponseAttachment (
        _bstr_t Name,
        _bstr_t Path,
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ResponseFrom (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseSenderName (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseToList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseCCList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseBCCList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseReplyList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseSubject (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseTextBody (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseImportance (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseContentType (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseDate (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseDirty (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_ResponseFrom (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseSenderName (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseToList (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall put_ResponseCCList (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall put_ResponseBCCList (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall put_ResponseReplyList (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall put_ResponseSubject (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseTextBody (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseImportance (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseContentType (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseDate (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall raw_SaveResponse ( ) = 0;
      virtual HRESULT __stdcall raw_SendResponse ( ) = 0;
      virtual HRESULT __stdcall raw_ClearResponse ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveResponseAttachment (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_InsertResponseAttachment (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Path,
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("2868dbeb-e676-4254-9628-88daa06542cf"))
EICEmailObject2Ex;
    // [ default ] interface IEICEmailObject2Ex

struct __declspec(uuid("b0a552f7-2f8c-41d8-bbbf-bce5fdcad091"))
IEICEmailObject2Ex : IEICEmailObject2
{
    //
    // Property data
    //

    __declspec(property(get=GetResponseFrom,put=PutResponseFrom))
    _bstr_t ResponseFrom;
    __declspec(property(get=GetResponseToList,put=PutResponseToList))
    _variant_t ResponseToList;
    __declspec(property(get=GetResponseCCList,put=PutResponseCCList))
    _variant_t ResponseCCList;
    __declspec(property(get=GetResponseBCCList,put=PutResponseBCCList))
    _variant_t ResponseBCCList;
    __declspec(property(get=GetResponseReplyList,put=PutResponseReplyList))
    _variant_t ResponseReplyList;
    __declspec(property(get=GetResponseSubject,put=PutResponseSubject))
    _bstr_t ResponseSubject;
    __declspec(property(get=GetResponseTextBody,put=PutResponseTextBody))
    _bstr_t ResponseTextBody;
    __declspec(property(get=GetResponseImportance,put=PutResponseImportance))
    _bstr_t ResponseImportance;
    __declspec(property(get=GetResponseContentType,put=PutResponseContentType))
    _bstr_t ResponseContentType;
    __declspec(property(get=GetResponseDirty))
    VARIANT_BOOL ResponseDirty;
    __declspec(property(get=GetResponseSenderName,put=PutResponseSenderName))
    _bstr_t ResponseSenderName;
    __declspec(property(get=GetResponseDate,put=PutResponseDate))
    _variant_t ResponseDate;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetResponseFrom ( );
    _bstr_t GetResponseSenderName ( );
    _variant_t GetResponseToList ( );
    _variant_t GetResponseCCList ( );
    _variant_t GetResponseBCCList ( );
    _variant_t GetResponseReplyList ( );
    _bstr_t GetResponseSubject ( );
    _bstr_t GetResponseTextBody ( );
    _bstr_t GetResponseImportance ( );
    _bstr_t GetResponseContentType ( );
    _variant_t GetResponseDate ( );
    VARIANT_BOOL GetResponseDirty ( );
    void PutResponseFrom (
        _bstr_t Val );
    void PutResponseSenderName (
        _bstr_t Val );
    void PutResponseToList (
        const _variant_t & Val );
    void PutResponseCCList (
        const _variant_t & Val );
    void PutResponseBCCList (
        const _variant_t & Val );
    void PutResponseReplyList (
        const _variant_t & Val );
    void PutResponseSubject (
        _bstr_t Val );
    void PutResponseTextBody (
        _bstr_t Val );
    void PutResponseImportance (
        _bstr_t Val );
    void PutResponseContentType (
        _bstr_t Val );
    void PutResponseDate (
        const _variant_t & Val );
    HRESULT SaveResponse ( );
    HRESULT SendResponse ( );
    HRESULT ClearResponse ( );
    HRESULT RemoveResponseAttachment (
        long Index );
    HRESULT InsertResponseAttachment (
        _bstr_t Name,
        _bstr_t Path,
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ResponseFrom (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseSenderName (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseToList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseCCList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseBCCList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseReplyList (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseSubject (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseTextBody (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseImportance (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseContentType (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseDate (
        /*[out,retval]*/ VARIANT * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseDirty (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_ResponseFrom (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseSenderName (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseToList (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall put_ResponseCCList (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall put_ResponseBCCList (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall put_ResponseReplyList (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall put_ResponseSubject (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseTextBody (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseImportance (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseContentType (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseDate (
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall raw_SaveResponse ( ) = 0;
      virtual HRESULT __stdcall raw_SendResponse ( ) = 0;
      virtual HRESULT __stdcall raw_ClearResponse ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveResponseAttachment (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_InsertResponseAttachment (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Path,
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("090c4ecc-7073-47ee-84f2-f73d93c93250"))
EIC_UMFMessage;
    // [ default ] interface IEIC_UMFMessage

struct __declspec(uuid("55cb08fd-6b8b-4a3c-acf9-ab4471ace17a"))
EIC_UMFMessage2;
    // [ default ] interface IEIC_UMFMessage2

struct __declspec(uuid("9a76b3c4-647a-4fb9-b496-14ce0587acc7"))
EICQueueObjectWatcherAdapter;
    // [ default ] interface IEICQueueObjectWatcherAdapter

struct __declspec(uuid("7991b5a1-5c61-4db3-8b2a-a2a39d11a4ed"))
IEICQueueObjectWatcherAdapter : IEICQueueObjectWatcher
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StateChangedFunc (
        const _variant_t & p_Function );
    HRESULT ObjectSpecificChangeFunc (
        const _variant_t & p_Function );
    HRESULT ObjectDestroyedFunc (
        const _variant_t & p_Function );
    HRESULT ObjectSpecificErrorFunc (
        const _variant_t & p_Function );
    HRESULT SubObjectChangedFunc (
        const _variant_t & p_Function );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StateChangedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall raw_ObjectSpecificChangeFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall raw_ObjectDestroyedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall raw_ObjectSpecificErrorFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
      virtual HRESULT __stdcall raw_SubObjectChangedFunc (
        /*[in]*/ VARIANT p_Function ) = 0;
};

struct __declspec(uuid("5b0ace34-1cab-4b91-8ef0-6b00948b70a3"))
EICCallAcoustics;
    // [ default ] interface IEICCallAcoustics

struct __declspec(uuid("f72011f1-73b3-4dec-9006-79b1e812fcec"))
IEICCallAcoustics : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT PlayTone (
        struct IEICCallObject2 * p_Call,
        short p_Frequency,
        short p_Amplitude,
        short p_Duration );
    HRESULT PlayWav (
        struct IEICCallObject2 * p_Call,
        _bstr_t p_WavFile );
    HRESULT PlayString (
        struct IEICCallObject2 * p_Call,
        _bstr_t p_Text );
    HRESULT PlayDigits (
        struct IEICCallObject2 * p_Call,
        _bstr_t p_Digits );
    HRESULT GetDigits (
        struct IEICCallObject2 * p_Call,
        IUnknown * p_Callback );
    HRESULT GetTone (
        struct IEICCallObject2 * p_Call,
        IUnknown * p_Callback );
    HRESULT PlayDualTone (
        struct IEICCallObject2 * p_Call,
        short p_Freq1,
        short p_Amp1,
        short p_Freq2,
        short p_Amp2,
        short p_Duration );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_PlayTone (
        /*[in]*/ struct IEICCallObject2 * p_Call,
        /*[in]*/ short p_Frequency,
        /*[in]*/ short p_Amplitude,
        /*[in]*/ short p_Duration ) = 0;
      virtual HRESULT __stdcall raw_PlayWav (
        /*[in]*/ struct IEICCallObject2 * p_Call,
        /*[in]*/ BSTR p_WavFile ) = 0;
      virtual HRESULT __stdcall raw_PlayString (
        /*[in]*/ struct IEICCallObject2 * p_Call,
        /*[in]*/ BSTR p_Text ) = 0;
      virtual HRESULT __stdcall raw_PlayDigits (
        /*[in]*/ struct IEICCallObject2 * p_Call,
        /*[in]*/ BSTR p_Digits ) = 0;
      virtual HRESULT __stdcall raw_GetDigits (
        /*[in]*/ struct IEICCallObject2 * p_Call,
        /*[in]*/ IUnknown * p_Callback ) = 0;
      virtual HRESULT __stdcall raw_GetTone (
        /*[in]*/ struct IEICCallObject2 * p_Call,
        /*[in]*/ IUnknown * p_Callback ) = 0;
      virtual HRESULT __stdcall raw_PlayDualTone (
        /*[in]*/ struct IEICCallObject2 * p_Call,
        /*[in]*/ short p_Freq1,
        /*[in]*/ short p_Amp1,
        /*[in]*/ short p_Freq2,
        /*[in]*/ short p_Amp2,
        /*[in]*/ short p_Duration ) = 0;
};

struct __declspec(uuid("db39eeb6-8959-4b74-8c0b-d866fc389aa9"))
IWebCallbackObject;
    // [ default ] interface IIWebCallbackObject

struct __declspec(uuid("d78ad44a-4205-41be-b273-0ca0e2a169af"))
IIWebCallbackObject : IEICQueueObject2
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    _bstr_t StartTime;
    __declspec(property(get=GetStopTime))
    _bstr_t StopTime;
    __declspec(property(get=GetConnectTime))
    _bstr_t ConnectTime;
    __declspec(property(get=GetPhoneNumber))
    _bstr_t PhoneNumber;
    __declspec(property(get=GetQueue))
    IEICQueue2Ptr Queue;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStartTime ( );
    _bstr_t GetStopTime ( );
    _bstr_t GetConnectTime ( );
    _bstr_t GetPhoneNumber ( );
    IEICQueue2Ptr GetQueue ( );
    _bstr_t GetSubject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PhoneNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Queue (
        /*[out,retval]*/ struct IEICQueue2 * * pVal ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("65a4f55d-8d99-4e96-98bc-e8e6b5fc4be0"))
IWebInstantQuestion;
    // [ default ] interface IIWebInstantQuestion

struct __declspec(uuid("18848869-db8e-4f91-92da-23e1d0bc4594"))
IIWebInstantQuestion : IEICQueueObject2
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    _bstr_t StartTime;
    __declspec(property(get=GetStopTime))
    _bstr_t StopTime;
    __declspec(property(get=GetConnectTime))
    _bstr_t ConnectTime;
    __declspec(property(get=GetUrl))
    _bstr_t Url;
    __declspec(property(get=GetQueue))
    IEICQueue2Ptr Queue;
    __declspec(property(get=GetQuestion))
    _bstr_t Question;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStartTime ( );
    _bstr_t GetStopTime ( );
    _bstr_t GetConnectTime ( );
    _bstr_t GetUrl ( );
    IEICQueue2Ptr GetQueue ( );
    _bstr_t GetQuestion ( );
    HRESULT Answer (
        _bstr_t p_UserId,
        _bstr_t p_strMessage );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Url (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Queue (
        /*[out,retval]*/ struct IEICQueue2 * * pVal ) = 0;
      virtual HRESULT __stdcall get_Question (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Answer (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ BSTR p_strMessage ) = 0;
};

struct __declspec(uuid("6a4819a9-edad-4ba7-90ee-0c6bd6cfc9e6"))
IWebWebSession;
    // [ default ] interface IIWebWebSession

struct __declspec(uuid("26abb663-85f2-4058-ae37-9cd5774ccbe6"))
IIWebWebSession : IEICQueueObject2
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    _bstr_t StartTime;
    __declspec(property(get=GetStopTime))
    _bstr_t StopTime;
    __declspec(property(get=GetConnectTime))
    _bstr_t ConnectTime;
    __declspec(property(get=GetGuid))
    _bstr_t Guid;
    __declspec(property(get=GetQueue))
    IEICQueue2Ptr Queue;
    __declspec(property(get=GetUrlHistory))
    _variant_t UrlHistory;
    __declspec(property(get=GetRegistrationInfo))
    _bstr_t RegistrationInfo[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStartTime ( );
    _bstr_t GetStopTime ( );
    _bstr_t GetConnectTime ( );
    _bstr_t GetGuid ( );
    IEICQueue2Ptr GetQueue ( );
    _variant_t GetUrlHistory ( );
    _bstr_t GetRegistrationInfo (
        _bstr_t p_Tag );
    HRESULT SendPopupMessage (
        _bstr_t p_UserId,
        _bstr_t p_strMessage );
    HRESULT SendURL (
        _bstr_t p_UserId,
        _bstr_t p_strUrl );
    HRESULT RequestChat (
        _bstr_t p_UserId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Guid (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Queue (
        /*[out,retval]*/ struct IEICQueue2 * * pVal ) = 0;
      virtual HRESULT __stdcall get_UrlHistory (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_RegistrationInfo (
        /*[in]*/ BSTR p_Tag,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SendPopupMessage (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ BSTR p_strMessage ) = 0;
      virtual HRESULT __stdcall raw_SendURL (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ BSTR p_strUrl ) = 0;
      virtual HRESULT __stdcall raw_RequestChat (
        /*[in]*/ BSTR p_UserId ) = 0;
};

struct __declspec(uuid("feb7f0ef-56a4-427b-a1b0-fb000f9e72e5"))
IWebBrowserSync;
    // [ default ] interface IIWebBrowserSync

struct __declspec(uuid("dcc1f5b3-104c-466c-9897-51f180a2c12f"))
IIWebBrowserSync : IEICQueueObject2
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    _bstr_t StartTime;
    __declspec(property(get=GetStopTime))
    _bstr_t StopTime;
    __declspec(property(get=GetConnectTime))
    _bstr_t ConnectTime;
    __declspec(property(get=GetUrl))
    _bstr_t Url;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStartTime ( );
    _bstr_t GetStopTime ( );
    _bstr_t GetConnectTime ( );
    _bstr_t GetUrl ( );
    HRESULT SendURL (
        _bstr_t p_UserId,
        _bstr_t p_URL );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Url (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SendURL (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ BSTR p_URL ) = 0;
};

struct __declspec(uuid("e2e0ca25-f59b-415c-9367-88dabfe1e819"))
IWebBrowserSync2;
    // [ default ] interface IIWebBrowserSync2

struct __declspec(uuid("c365beeb-7c2a-4181-a766-d3e59c7ac3c4"))
IIWebBrowserSync2 : IIWebBrowserSync
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT LaunchCoBrowser (
        _bstr_t p_User,
        _bstr_t p_Password );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LaunchCoBrowser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Password ) = 0;
};

struct __declspec(uuid("ee04aea3-4f3e-11d2-802b-00a0c9a79e7c"))
EICNotification;
    // [ default ] interface IEICNotification

struct __declspec(uuid("ee04aea2-4f3e-11d2-802b-00a0c9a79e7c"))
IEICNotification : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetObjectType,put=PutObjectType))
    _bstr_t ObjectType;
    __declspec(property(get=GetObjectName,put=PutObjectName))
    _bstr_t ObjectName;
    __declspec(property(get=GetEventName,put=PutEventName))
    _bstr_t EventName;
    __declspec(property(get=GetIsResponse))
    VARIANT_BOOL IsResponse;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Send ( );
    HRESULT SendRequest (
        struct IEICNotification * * p_RetVal,
        long p_TimeoutMilliseconds );
    HRESULT SendResponse (
        struct IEICNotification * p_NotificationData );
    HRESULT PopStringData (
        BSTR * pVal );
    HRESULT PopLongData (
        long * pVal );
    HRESULT PopShortData (
        short * pVal );
    HRESULT PushStringData (
        _bstr_t pVal );
    HRESULT PushLongData (
        long pVal );
    HRESULT PushShortData (
        short pVal );
    _bstr_t GetObjectType ( );
    void PutObjectType (
        _bstr_t pVal );
    _bstr_t GetObjectName ( );
    void PutObjectName (
        _bstr_t pVal );
    _bstr_t GetEventName ( );
    void PutEventName (
        _bstr_t pVal );
    VARIANT_BOOL GetIsResponse ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Send ( ) = 0;
      virtual HRESULT __stdcall raw_SendRequest (
        /*[out]*/ struct IEICNotification * * p_RetVal,
        /*[in]*/ long p_TimeoutMilliseconds ) = 0;
      virtual HRESULT __stdcall raw_SendResponse (
        /*[in]*/ struct IEICNotification * p_NotificationData ) = 0;
      virtual HRESULT __stdcall raw_PopStringData (
        /*[out]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_PopLongData (
        /*[out]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_PopShortData (
        /*[out]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall raw_PushStringData (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_PushLongData (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_PushShortData (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EventName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EventName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsResponse (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("2b9f40b2-5248-11d2-802b-00a0c9a79e7c"))
EICNotificationSink;
    // [ default ] interface IEICNotificationSink

struct __declspec(uuid("ee04aea4-4f3e-11d2-802b-00a0c9a79e7c"))
IEICServerWatcher : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ReceivedNotification (
        struct IEICNotification * p_Notification );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ReceivedNotification (
        /*[in]*/ struct IEICNotification * p_Notification ) = 0;
};

struct __declspec(uuid("2b9f40b1-5248-11d2-802b-00a0c9a79e7c"))
IEICNotificationSink : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetWatcher (
        struct IEICServerWatcher * p_Watcher,
        VARIANT_BOOL p_InOwnThread );
    HRESULT AddEventWatch (
        _bstr_t p_Type,
        _bstr_t p_ObjectName,
        _bstr_t p_Event );
    HRESULT RemoveEventWatch (
        _bstr_t p_Type,
        _bstr_t p_ObjectName,
        _bstr_t p_Event );
    HRESULT AddObjectWatch (
        _bstr_t p_Type,
        _bstr_t p_ObjectName );
    HRESULT RemoveObjectWatch (
        _bstr_t p_Type,
        _bstr_t p_ObjectName );
    HRESULT RemoveAllWatches ( );
    HRESULT SuspendAllWatches ( );
    HRESULT ResumeAllWatches ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetWatcher (
        /*[in]*/ struct IEICServerWatcher * p_Watcher,
        /*[in]*/ VARIANT_BOOL p_InOwnThread ) = 0;
      virtual HRESULT __stdcall raw_AddEventWatch (
        /*[in]*/ BSTR p_Type,
        /*[in]*/ BSTR p_ObjectName,
        /*[in]*/ BSTR p_Event ) = 0;
      virtual HRESULT __stdcall raw_RemoveEventWatch (
        /*[in]*/ BSTR p_Type,
        /*[in]*/ BSTR p_ObjectName,
        /*[in]*/ BSTR p_Event ) = 0;
      virtual HRESULT __stdcall raw_AddObjectWatch (
        /*[in]*/ BSTR p_Type,
        /*[in]*/ BSTR p_ObjectName ) = 0;
      virtual HRESULT __stdcall raw_RemoveObjectWatch (
        /*[in]*/ BSTR p_Type,
        /*[in]*/ BSTR p_ObjectName ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllWatches ( ) = 0;
      virtual HRESULT __stdcall raw_SuspendAllWatches ( ) = 0;
      virtual HRESULT __stdcall raw_ResumeAllWatches ( ) = 0;
};

struct __declspec(uuid("2ba2635f-f5eb-424d-8d8a-8d5637d255da"))
SwitchoverCoClass;
    // [ default ] interface ISwitchover

struct __declspec(uuid("e3578ed4-528d-4c3c-8a76-e7f4e5a13c9c"))
ISwitchover : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBackupName))
    _bstr_t BackupName;
    __declspec(property(get=GetBackupServer))
    VARIANT_BOOL BackupServer;
    __declspec(property(get=GetRunning))
    VARIANT_BOOL Running;
    __declspec(property(get=GetInstalled))
    VARIANT_BOOL Installed;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetBackupName ( );
    VARIANT_BOOL GetBackupServer ( );
    VARIANT_BOOL GetRunning ( );
    VARIANT_BOOL GetInstalled ( );
    HRESULT GetSwitchoverInformation (
        BSTR * pBackupMachine,
        VARIANT_BOOL * pIsBackup );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BackupName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BackupServer (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Running (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Installed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSwitchoverInformation (
        /*[out]*/ BSTR * pBackupMachine,
        /*[out]*/ VARIANT_BOOL * pIsBackup ) = 0;
};

struct __declspec(uuid("69b7850c-73bd-4feb-8f64-21cb992483e5"))
ACDHelpRequest;
    // [ default ] interface IACDHelpRequest

struct __declspec(uuid("6082a0ea-7c71-4083-be82-ee261120b97e"))
ACDHelpMonitor;
    // [ default ] interface IACDHelpMonitor

struct __declspec(uuid("1771e6e4-8e04-4ffb-aa47-5615d22b17ab"))
IACDHelpMonitor : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetMarshalledCallback (
        IUnknown * p_Watcher );
    HRESULT SetThreadCallback (
        IUnknown * p_Watcher );
    HRESULT SendResponse (
        struct IACDHelpRequest * p_Watcher );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetMarshalledCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_SetThreadCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_SendResponse (
        /*[in]*/ struct IACDHelpRequest * p_Watcher ) = 0;
};

struct __declspec(uuid("d92348bd-241c-45ad-be55-21daff6101d7"))
EICUser3;
    // [ default ] interface IEICUser3

enum __declspec(uuid("ce8b71ac-a43f-4305-b936-b121881c9e48"))
ForwardingCallResults
{
    FCR_ALL_CALLS = 0,
    FCR_DND = 1,
    FCR_ON_PHONE = 2,
    FCR_NO_ANSWER = 3
};

enum __declspec(uuid("c2b1fadb-1a76-4e4f-97ce-3ebd18ef4328"))
ForwardingOptions
{
    FO_NO_CALLS = 0,
    FO_ALL_CALLS = 1,
    FO_EXTERNAL_CALLS = 2,
    FO_INTERNAL_CALLS = 3,
    FO_UNKNOWN_CALLS = 4
};

struct __declspec(uuid("0ac6c355-1679-4712-bc13-5f9db1d9fd5d"))
IUserForwarding : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetForwardNumber,put=PutForwardNumber))
    _bstr_t ForwardNumber;
    __declspec(property(get=GetForwardVoicemail,put=PutForwardVoicemail))
    _bstr_t ForwardVoicemail;
    __declspec(property(get=GetForward,put=PutForward))
    enum ForwardingOptions Forward[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetForwardNumber ( );
    void PutForwardNumber (
        _bstr_t pVal );
    _bstr_t GetForwardVoicemail ( );
    void PutForwardVoicemail (
        _bstr_t pVal );
    enum ForwardingOptions GetForward (
        enum ForwardingCallResults result );
    void PutForward (
        enum ForwardingCallResults result,
        enum ForwardingOptions pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ForwardNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ForwardNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ForwardVoicemail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ForwardVoicemail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Forward (
        /*[in]*/ enum ForwardingCallResults result,
        /*[out,retval]*/ enum ForwardingOptions * pVal ) = 0;
      virtual HRESULT __stdcall put_Forward (
        /*[in]*/ enum ForwardingCallResults result,
        /*[in]*/ enum ForwardingOptions pVal ) = 0;
};

struct __declspec(uuid("99167870-ecbb-4553-9c38-2fb9993bd2e8"))
EICQueue3;
    // [ default ] interface IEICQueue3

struct __declspec(uuid("3f5abaae-2dda-4ba7-a0b0-82222831109e"))
IEICQueue3 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Activate (
        enum EICQueueTypes Type,
        _bstr_t Name );
    HRESULT Deactivate ( );
    HRESULT RequestAttributeUpdateCallback (
        const _variant_t & p_attrs );
    VARIANT_BOOL Contains (
        const _variant_t & InteractionId );
    HRESULT SetMarshalledCallback (
        IUnknown * p_Watcher );
    HRESULT SetThreadCallback (
        IUnknown * p_Watcher );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Activate (
        /*[in]*/ enum EICQueueTypes Type,
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_RequestAttributeUpdateCallback (
        /*[in]*/ VARIANT p_attrs ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ VARIANT InteractionId,
        /*[out,retval]*/ VARIANT_BOOL * p_Result ) = 0;
      virtual HRESULT __stdcall raw_SetMarshalledCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_SetThreadCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
};

struct __declspec(uuid("0a05b4ef-d908-4669-bf32-b73ef5a93ebd"))
UserForwarding;
    // [ default ] interface IUserForwarding

struct __declspec(uuid("a3ff42d1-a6b8-4ddc-a094-1a95066369ea"))
IWebCallbackObject2;
    // [ default ] interface IIWebCallbackObject2

struct __declspec(uuid("5cbe45dc-357a-4dd9-b3e1-a06b75aaafde"))
IIWebCallbackObject2 : IIWebCallbackObject
{
    //
    // Property data
    //

    __declspec(property(get=GetSuccessful,put=PutSuccessful))
    VARIANT_BOOL Successful;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetSuccessful ( );
    void PutSuccessful (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Successful (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Successful (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("8fbfaa00-8cb2-11d3-b28d-0090272dcf18"))
IEICMarshaller : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT CallBack ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CallBack ( ) = 0;
};

struct __declspec(uuid("520a0ffd-9cd3-11d3-bfc9-0080c88f546c"))
EICServer2;
    // [ default ] interface IEICServer2

struct __declspec(uuid("520a0ffe-9cd3-11d3-bfc9-0080c88f546c"))
IEICServer2Watcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SwitchOver ( );
    HRESULT ConnectionLost ( );
    HRESULT CSRequestedShutDown ( );
    HRESULT CSShutDown ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SwitchOver ( ) = 0;
      virtual HRESULT __stdcall raw_ConnectionLost ( ) = 0;
      virtual HRESULT __stdcall raw_CSRequestedShutDown ( ) = 0;
      virtual HRESULT __stdcall raw_CSShutDown ( ) = 0;
};

struct __declspec(uuid("520a0ffc-9cd3-11d3-bfc9-0080c88f546c"))
IEICServer2 : IEICConnection
{
    //
    // Property data
    //

    __declspec(property(get=GetRemote))
    VARIANT_BOOL Remote;
    __declspec(property(get=GetPersistentRemoteConnection))
    VARIANT_BOOL PersistentRemoteConnection;

    //
    // Wrapper methods for error-handling
    //

    long FullConnect (
        _bstr_t p_App,
        _bstr_t p_Server,
        _bstr_t p_User,
        _bstr_t p_Password,
        _bstr_t p_Station,
        VARIANT_BOOL p_AutoDisconnect,
        long p_MediaTypes );
    long RemoteConnect (
        _bstr_t p_App,
        _bstr_t p_Server,
        _bstr_t p_User,
        _bstr_t p_Password,
        _bstr_t p_Station,
        VARIANT_BOOL p_PersistentConnection,
        VARIANT_BOOL p_AutoDisconnect,
        long p_MediaTypes );
    long NotifierLogin (
        _bstr_t p_App,
        _bstr_t p_Server,
        _bstr_t p_User,
        _bstr_t p_Password,
        VARIANT_BOOL p_AutoDisconnect );
    long NotifierLoginCheck (
        _bstr_t p_User,
        _bstr_t p_Password );
    long CSLogin (
        _bstr_t p_User,
        _bstr_t p_Password,
        _bstr_t p_Station,
        _bstr_t p_InitialStatus,
        VARIANT_BOOL p_Remote,
        VARIANT_BOOL p_Persistent,
        long p_MediaTypes );
    HRESULT CSLogout (
        _bstr_t p_User,
        _bstr_t p_Station );
    VARIANT_BOOL GetRemote ( );
    VARIANT_BOOL GetPersistentRemoteConnection ( );
    HRESULT SetMarshalledCallback (
        struct IEICServer2Watcher * p_Watcher );
    HRESULT SetThreadCallback (
        struct IEICServer2Watcher * p_Watcher );
    _bstr_t ServerParameter (
        _bstr_t p_Param );
    _variant_t ServerParameterList (
        const _variant_t & p_Params );
    HRESULT GetTimeStamp (
        short * p_Day,
        short * p_Month,
        short * p_Year,
        short * p_Hour,
        short * p_Minute,
        short * p_Second );
    HRESULT ForceLoginOnError ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FullConnect (
        /*[in]*/ BSTR p_App,
        /*[in]*/ BSTR p_Server,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Password,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ VARIANT_BOOL p_AutoDisconnect,
        /*[in]*/ long p_MediaTypes,
        /*[out,retval]*/ long * p_Error ) = 0;
      virtual HRESULT __stdcall raw_RemoteConnect (
        /*[in]*/ BSTR p_App,
        /*[in]*/ BSTR p_Server,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Password,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ VARIANT_BOOL p_PersistentConnection,
        VARIANT_BOOL p_AutoDisconnect,
        /*[in]*/ long p_MediaTypes,
        /*[out,retval]*/ long * p_Error ) = 0;
      virtual HRESULT __stdcall raw_NotifierLogin (
        /*[in]*/ BSTR p_App,
        /*[in]*/ BSTR p_Server,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Password,
        /*[in]*/ VARIANT_BOOL p_AutoDisconnect,
        /*[out,retval]*/ long * p_Error ) = 0;
      virtual HRESULT __stdcall raw_NotifierLoginCheck (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Password,
        /*[out,retval]*/ long * p_Error ) = 0;
      virtual HRESULT __stdcall raw_CSLogin (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Password,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ BSTR p_InitialStatus,
        /*[in]*/ VARIANT_BOOL p_Remote,
        /*[in]*/ VARIANT_BOOL p_Persistent,
        /*[in]*/ long p_MediaTypes,
        /*[out,retval]*/ long * p_Error ) = 0;
      virtual HRESULT __stdcall raw_CSLogout (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Station ) = 0;
      virtual HRESULT __stdcall get_Remote (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_PersistentRemoteConnection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetMarshalledCallback (
        /*[in]*/ struct IEICServer2Watcher * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_SetThreadCallback (
        /*[in]*/ struct IEICServer2Watcher * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_ServerParameter (
        /*[in]*/ BSTR p_Param,
        /*[out,retval]*/ BSTR * p_Value ) = 0;
      virtual HRESULT __stdcall raw_ServerParameterList (
        /*[in]*/ VARIANT p_Params,
        /*[out,retval]*/ VARIANT * p_Values ) = 0;
      virtual HRESULT __stdcall raw_GetTimeStamp (
        /*[out]*/ short * p_Day,
        /*[out]*/ short * p_Month,
        /*[out]*/ short * p_Year,
        /*[out]*/ short * p_Hour,
        /*[out]*/ short * p_Minute,
        /*[out]*/ short * p_Second ) = 0;
      virtual HRESULT __stdcall raw_ForceLoginOnError ( ) = 0;
};

struct __declspec(uuid("11bc10b8-d1b9-428f-bbd7-ae283df57857"))
EICCallObject2;
    // [ default ] interface IEICCallObject2

struct __declspec(uuid("beffc288-c8d8-11d3-b37e-0050da2c4eb8"))
EICQueue2;
    // [ default ] interface IEICQueue2

struct __declspec(uuid("f6a0e878-9762-453e-8e70-fa67b2e881b8"))
EICServer3;
    // [ default ] interface IEICServer3

struct __declspec(uuid("9bbb68e3-793f-454c-afaf-f755bb58c9b7"))
IClientServicesWatcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT LicenseRevoked (
        _bstr_t p_StatName,
        _bstr_t p_License );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LicenseRevoked (
        /*[in]*/ BSTR p_StatName,
        /*[in]*/ BSTR p_License ) = 0;
};

struct __declspec(uuid("36a8bd1f-0abe-41c8-bfc3-2f532b49da1f"))
IEICServer3 : IEICServer2
{
    //
    // Wrapper methods for error-handling
    //

    long DoesStationHaveRightsToRun (
        _bstr_t p_Station,
        _bstr_t p_License,
        VARIANT_BOOL p_BootOffOtherInstanceIfInUse );
    _bstr_t GetLoginCookie ( );
    long NotifierLoginWithCookie (
        _bstr_t p_App,
        _bstr_t p_Server,
        _bstr_t p_User,
        _bstr_t p_Cookie );
    HRESULT SetClientServicesCallback (
        struct IClientServicesWatcher * p_Watcher,
        VARIANT_BOOL p_Marshalled );
    HRESULT SetPassword (
        _bstr_t p_Password );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_DoesStationHaveRightsToRun (
        /*[in]*/ BSTR p_Station,
        /*[in]*/ BSTR p_License,
        /*[in]*/ VARIANT_BOOL p_BootOffOtherInstanceIfInUse,
        /*[out,retval]*/ long * p_Result ) = 0;
      virtual HRESULT __stdcall raw_GetLoginCookie (
        /*[out,retval]*/ BSTR * p_Cookie ) = 0;
      virtual HRESULT __stdcall raw_NotifierLoginWithCookie (
        /*[in]*/ BSTR p_App,
        /*[in]*/ BSTR p_Server,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Cookie,
        /*[out,retval]*/ long * p_Error ) = 0;
      virtual HRESULT __stdcall raw_SetClientServicesCallback (
        /*[in]*/ struct IClientServicesWatcher * p_Watcher,
        /*[in]*/ VARIANT_BOOL p_Marshalled ) = 0;
      virtual HRESULT __stdcall raw_SetPassword (
        /*[in]*/ BSTR p_Password ) = 0;
};

struct __declspec(uuid("3210fcad-1f83-46b0-8266-97836035ab4b"))
SIPPhone;
    // [ default ] interface ISIPPhone2

struct __declspec(uuid("d0e9814b-a68d-41a1-b79a-5efd81ea2618"))
ISIPPhone : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Activate ( );
    HRESULT Deactivate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
};

struct __declspec(uuid("7054f4f6-ba6a-4d5d-8253-ccaf2294ec3d"))
ISIPPhone2 : ISIPPhone
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetWatcher (
        struct ISIPPhoneWatcher * pWatcher );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetWatcher (
        struct ISIPPhoneWatcher * pWatcher ) = 0;
};

struct __declspec(uuid("5e4491fe-0068-4533-a52f-03864befc17d"))
CSConnectProfile;
    // [ default ] interface ICSConnectProfile

struct __declspec(uuid("484e34f0-54f0-429f-b380-a5af45b04662"))
ICSConnectProfile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUserId,put=PutUserId))
    _bstr_t UserId;
    __declspec(property(get=GetRemotePhoneNumber,put=PutRemotePhoneNumber))
    _bstr_t RemotePhoneNumber;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetStatus,put=PutStatus))
    _bstr_t Status;
    __declspec(property(get=GetRemote,put=PutRemote))
    VARIANT_BOOL Remote;
    __declspec(property(get=GetPersistent,put=PutPersistent))
    VARIANT_BOOL Persistent;
    __declspec(property(get=GetMediaFlags,put=PutMediaFlags))
    long MediaFlags;
    __declspec(property(get=GetSecondsNoAnswer,put=PutSecondsNoAnswer))
    long SecondsNoAnswer;
    __declspec(property(get=GetStationID,put=PutStationID))
    _bstr_t StationID;
    __declspec(property(get=GetServer,put=PutServer))
    _bstr_t Server;
    __declspec(property(get=GetForceLoginOnError,put=PutForceLoginOnError))
    VARIANT_BOOL ForceLoginOnError;
    __declspec(property(get=GetAutoDisconnect,put=PutAutoDisconnect))
    VARIANT_BOOL AutoDisconnect;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUserId ( );
    void PutUserId (
        _bstr_t pVal );
    _bstr_t GetRemotePhoneNumber ( );
    void PutRemotePhoneNumber (
        _bstr_t pVal );
    _bstr_t GetPassword ( );
    void PutPassword (
        _bstr_t pVal );
    _bstr_t GetStatus ( );
    void PutStatus (
        _bstr_t pVal );
    VARIANT_BOOL GetRemote ( );
    void PutRemote (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPersistent ( );
    void PutPersistent (
        VARIANT_BOOL pVal );
    long GetMediaFlags ( );
    void PutMediaFlags (
        long pVal );
    long GetSecondsNoAnswer ( );
    void PutSecondsNoAnswer (
        long pVal );
    _bstr_t GetStationID ( );
    void PutStationID (
        _bstr_t pVal );
    _bstr_t GetServer ( );
    void PutServer (
        _bstr_t pVal );
    VARIANT_BOOL GetForceLoginOnError ( );
    void PutForceLoginOnError (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAutoDisconnect ( );
    void PutAutoDisconnect (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UserId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserId (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RemotePhoneNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RemotePhoneNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Status (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Remote (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Remote (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Persistent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Persistent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MediaFlags (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MediaFlags (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SecondsNoAnswer (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SecondsNoAnswer (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StationID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_StationID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Server (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Server (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ForceLoginOnError (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ForceLoginOnError (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoDisconnect (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoDisconnect (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("dbe06ff3-6832-4e1f-b429-4d3c3ce0ee44"))
RecorderObject;
    // [ default ] interface IRecorderObject

struct __declspec(uuid("0196b52f-3748-4a3e-b625-4f21422c8fb4"))
IRecorderObject : IEICQueueObject2
{};

struct __declspec(uuid("ed40e6c3-1450-45a5-b33c-698635db2664"))
EICDSAction;
    // [ default ] interface IEICDSAction

struct __declspec(uuid("530f3274-d7d2-45d8-a40e-1663af4920b1"))
IEICDSAction : IEICDSEntry
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _bstr_t Application;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("078e00cd-e724-45c8-8649-5fc8012ee99f"))
EICDirectory2Ex;
    // [ default ] interface IEICDirectory2Ex

struct __declspec(uuid("16be54d3-0c4e-4f84-91ce-b9b786fec14b"))
Licensing;
    // [ default ] interface ILicensing

enum __declspec(uuid("83d89c7b-dbab-44b4-b2a2-fe6db2b099d7"))
ACDStatus
{
    NotRequired = 0,
    Active = 1,
    FailInsufficientLicense = 2,
    WarningMedia1Only = 3,
    WarningMedia2Only = 4
};

struct __declspec(uuid("d8e9491d-dc62-4267-8559-17c9820d2106"))
ILicensing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetACDStatus))
    enum ACDStatus _ACDStatus;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL QuerySpecificLicense (
        _bstr_t StationName,
        _bstr_t userName,
        _bstr_t licenseName );
    VARIANT_BOOL AcquireLicense (
        _bstr_t StationName,
        _bstr_t licenseName,
        VARIANT_BOOL bRevokeIfNecessary,
        VARIANT_BOOL bOptional );
    enum ACDStatus GetACDStatus ( );
    VARIANT_BOOL AcquireProxyLicense (
        _bstr_t UserId,
        _bstr_t StationName,
        _bstr_t machineName,
        long p_Cookie,
        _bstr_t licenseName,
        VARIANT_BOOL bRevokeIfNecessary,
        VARIANT_BOOL bOptional );
    VARIANT_BOOL ReleaseProxyLicenses (
        _bstr_t UserId,
        _bstr_t StationName,
        _bstr_t machineName,
        long p_Cookie );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_QuerySpecificLicense (
        /*[in]*/ BSTR StationName,
        /*[in]*/ BSTR userName,
        /*[in]*/ BSTR licenseName,
        /*[out,retval]*/ VARIANT_BOOL * hasLicense ) = 0;
      virtual HRESULT __stdcall raw_AcquireLicense (
        /*[in]*/ BSTR StationName,
        /*[in]*/ BSTR licenseName,
        /*[in]*/ VARIANT_BOOL bRevokeIfNecessary,
        /*[in]*/ VARIANT_BOOL bOptional,
        /*[out,retval]*/ VARIANT_BOOL * bAcquired ) = 0;
      virtual HRESULT __stdcall get_ACDStatus (
        /*[out,retval]*/ enum ACDStatus * p_Status ) = 0;
      virtual HRESULT __stdcall raw_AcquireProxyLicense (
        /*[in]*/ BSTR UserId,
        /*[in]*/ BSTR StationName,
        /*[in]*/ BSTR machineName,
        /*[in]*/ long p_Cookie,
        /*[in]*/ BSTR licenseName,
        /*[in]*/ VARIANT_BOOL bRevokeIfNecessary,
        /*[in]*/ VARIANT_BOOL bOptional,
        /*[out,retval]*/ VARIANT_BOOL * bAcquired ) = 0;
      virtual HRESULT __stdcall raw_ReleaseProxyLicenses (
        /*[in]*/ BSTR UserId,
        /*[in]*/ BSTR StationName,
        /*[in]*/ BSTR machineName,
        /*[in]*/ long p_Cookie,
        /*[out,retval]*/ VARIANT_BOOL * pReleased ) = 0;
};

struct __declspec(uuid("761be7a6-a5dc-44a2-8fd1-6297ba660db4"))
Login;
    // [ default ] interface ILogin

struct __declspec(uuid("195d252f-79ac-42cd-a2d1-ac5e3295b9ad"))
ILogin : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long ClientLoginWithProfile (
        _bstr_t p_App,
        struct ICSConnectProfile * p_Profile );
    long NotifierLoginWithProfile (
        _bstr_t p_App,
        struct ICSConnectProfile * p_Profile );
    long CSLoginWithProfile (
        struct ICSConnectProfile * p_Profile );
    long CSProxyLoginWithProfile (
        struct ICSConnectProfile * p_Profile,
        _bstr_t p_MachineName,
        VARIANT_BOOL p_AuthenticationRequired,
        long * p_Cookie );
    long CSProxyLogoutWithProfile (
        _bstr_t p_UserId,
        _bstr_t p_StationId,
        long p_Cookie );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ClientLoginWithProfile (
        /*[in]*/ BSTR p_App,
        /*[in]*/ struct ICSConnectProfile * p_Profile,
        /*[out,retval]*/ long * p_Error ) = 0;
      virtual HRESULT __stdcall raw_NotifierLoginWithProfile (
        /*[in]*/ BSTR p_App,
        /*[in]*/ struct ICSConnectProfile * p_Profile,
        /*[out,retval]*/ long * p_Error ) = 0;
      virtual HRESULT __stdcall raw_CSLoginWithProfile (
        /*[in]*/ struct ICSConnectProfile * p_Profile,
        /*[out,retval]*/ long * p_Error ) = 0;
      virtual HRESULT __stdcall raw_CSProxyLoginWithProfile (
        /*[in]*/ struct ICSConnectProfile * p_Profile,
        /*[in]*/ BSTR p_MachineName,
        /*[in]*/ VARIANT_BOOL p_AuthenticationRequired,
        /*[out]*/ long * p_Cookie,
        /*[out,retval]*/ long * p_Error ) = 0;
      virtual HRESULT __stdcall raw_CSProxyLogoutWithProfile (
        /*[in]*/ BSTR p_UserId,
        /*[in]*/ BSTR p_StationId,
        /*[in]*/ long p_Cookie,
        /*[out,retval]*/ long * p_Error ) = 0;
};

struct __declspec(uuid("e4a42362-4ab8-4e92-b3fe-c0989c9d832c"))
ExtendedDial;
    // [ default ] interface IExtendedDial

struct __declspec(uuid("b7a19e97-9ca5-460d-8b89-47aa77c9e588"))
IExtendedDial : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT DialFromWorkgroup (
        _bstr_t p_Number,
        _bstr_t p_Workgroup );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_DialFromWorkgroup (
        /*[in]*/ BSTR p_Number,
        /*[in]*/ BSTR p_Workgroup ) = 0;
};

struct __declspec(uuid("a06d2aea-e67f-4409-82a2-3981c1dec7ff"))
DialParameters;
    // [ default ] interface IDialParameters

struct __declspec(uuid("365a6157-3a27-42d2-8c20-3bd1d18b7bfe"))
IDialParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUser,put=PutUser))
    _bstr_t User;
    __declspec(property(get=GetStation,put=PutStation))
    _bstr_t Station;
    __declspec(property(get=Getnumber,put=Putnumber))
    _bstr_t number;
    __declspec(property(get=GetTimeoutInSeconds,put=PutTimeoutInSeconds))
    short TimeoutInSeconds;
    __declspec(property(get=GetPerformCallAnalysis,put=PutPerformCallAnalysis))
    VARIANT_BOOL PerformCallAnalysis;
    __declspec(property(get=GetCallHandlerOnSuccess,put=PutCallHandlerOnSuccess))
    VARIANT_BOOL CallHandlerOnSuccess;
    __declspec(property(get=GetWorkgroup,put=PutWorkgroup))
    _bstr_t Workgroup;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUser ( );
    void PutUser (
        _bstr_t pVal );
    _bstr_t GetStation ( );
    void PutStation (
        _bstr_t pVal );
    _bstr_t Getnumber ( );
    void Putnumber (
        _bstr_t pVal );
    short GetTimeoutInSeconds ( );
    void PutTimeoutInSeconds (
        short pVal );
    VARIANT_BOOL GetPerformCallAnalysis ( );
    void PutPerformCallAnalysis (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCallHandlerOnSuccess ( );
    void PutCallHandlerOnSuccess (
        VARIANT_BOOL pVal );
    _bstr_t GetWorkgroup ( );
    void PutWorkgroup (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_User (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_User (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Station (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Station (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_number (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_number (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TimeoutInSeconds (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeoutInSeconds (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_PerformCallAnalysis (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PerformCallAnalysis (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CallHandlerOnSuccess (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CallHandlerOnSuccess (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Workgroup (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Workgroup (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("231bd903-c6a2-489d-9079-de0c8febde6a"))
ExtendedDial2;
    // [ default ] interface IExtendedDial2

struct __declspec(uuid("9e5f8c8b-f51c-4689-bd6f-8712300d458b"))
IExtendedDial2 : IExtendedDial
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT DialWithParameters (
        struct IDialParameters * p_DialParameters );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_DialWithParameters (
        /*[in]*/ struct IDialParameters * p_DialParameters ) = 0;
};

struct __declspec(uuid("c793a707-bdc7-4d0b-bec4-ae49084fac2b"))
EICClientCOMUpdate;
    // [ default ] interface IEICClientCOMUpdate

struct __declspec(uuid("fdb2ac1f-cdd0-4c10-a0c6-4a317c45ecca"))
IEICClientCOMUpdate : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StartMonitor (
        _bstr_t p_strCommandLine,
        _bstr_t p_strCurrentDir );
    HRESULT StopMonitor ( );
    HRESULT SetICUserInfo (
        _bstr_t p_strServer,
        _bstr_t p_strUser,
        _bstr_t p_strPasswd );
    VARIANT_BOOL DownloadUpdates ( );
    HRESULT ApplyUpdatesAfterShutdown ( );
    HRESULT SetRestartMsg (
        _bstr_t p_strMessage );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StartMonitor (
        /*[in]*/ BSTR p_strCommandLine,
        /*[in]*/ BSTR p_strCurrentDir ) = 0;
      virtual HRESULT __stdcall raw_StopMonitor ( ) = 0;
      virtual HRESULT __stdcall raw_SetICUserInfo (
        /*[in]*/ BSTR p_strServer,
        /*[in]*/ BSTR p_strUser,
        /*[in]*/ BSTR p_strPasswd ) = 0;
      virtual HRESULT __stdcall raw_DownloadUpdates (
        /*[out,retval]*/ VARIANT_BOOL * pbUpdatesAvailable ) = 0;
      virtual HRESULT __stdcall raw_ApplyUpdatesAfterShutdown ( ) = 0;
      virtual HRESULT __stdcall raw_SetRestartMsg (
        /*[in]*/ BSTR p_strMessage ) = 0;
};

struct __declspec(uuid("5e0b99c9-623f-48a1-8825-55ae7763a39a"))
IEICUserEx2Watcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT StatusChanged (
        struct IEICUserEx2 * p_User,
        _bstr_t p_StatusKey,
        VARIANT_BOOL p_IsDND,
        DATE p_UntilDateTime,
        VARIANT_BOOL p_HasDate,
        VARIANT_BOOL p_HasTime );
    HRESULT UserChanged (
        struct IEICUserEx2 * p_User );
    HRESULT UserLoginChanged (
        struct IEICUserEx2 * p_User,
        _bstr_t p_Station,
        VARIANT_BOOL p_Login );
    HRESULT UserOnPhoneChanged (
        struct IEICUserEx2 * p_User,
        VARIANT_BOOL p_OnPhone );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StatusChanged (
        /*[in]*/ struct IEICUserEx2 * p_User,
        /*[in]*/ BSTR p_StatusKey,
        /*[in]*/ VARIANT_BOOL p_IsDND,
        /*[in]*/ DATE p_UntilDateTime,
        /*[in]*/ VARIANT_BOOL p_HasDate,
        /*[in]*/ VARIANT_BOOL p_HasTime ) = 0;
      virtual HRESULT __stdcall raw_UserChanged (
        /*[in]*/ struct IEICUserEx2 * p_User ) = 0;
      virtual HRESULT __stdcall raw_UserLoginChanged (
        /*[in]*/ struct IEICUserEx2 * p_User,
        /*[in]*/ BSTR p_Station,
        /*[in]*/ VARIANT_BOOL p_Login ) = 0;
      virtual HRESULT __stdcall raw_UserOnPhoneChanged (
        /*[in]*/ struct IEICUserEx2 * p_User,
        /*[in]*/ VARIANT_BOOL p_OnPhone ) = 0;
};

struct __declspec(uuid("f8eb10c9-39ac-49f4-8f48-aef352021716"))
IEICUserEx2 : IEICUserS
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusHasDate))
    VARIANT_BOOL StatusHasDate;
    __declspec(property(get=GetStatusHasTime))
    VARIANT_BOOL StatusHasTime;
    __declspec(property(get=GetDirectoryList))
    _variant_t DirectoryList;
    __declspec(property(get=GetAvailableActions))
    long AvailableActions;
    __declspec(property(get=GetStationVolume,put=PutStationVolume))
    long StationVolume;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetMarshalledCallback (
        IUnknown * p_Handler );
    HRESULT SetThreadCallback (
        IUnknown * p_Handler );
    VARIANT_BOOL GetStatusHasDate ( );
    VARIANT_BOOL GetStatusHasTime ( );
    HRESULT SetUntilDateTimeEx (
        const _variant_t & dateTime,
        VARIANT_BOOL hasDate,
        VARIANT_BOOL hasTime );
    _variant_t GetNextStatusMessageV ( );
    _variant_t GetDirectoryList ( );
    IEICDirectoryPtr GetDirectory (
        _bstr_t p_SourceName,
        long p_Type );
    IEICWorkgroupPtr GetWorkgroup (
        _bstr_t p_Name );
    IEICQueuePtr GetQueue (
        _bstr_t p_Name,
        long p_Type );
    long GetAvailableActions ( );
    long GetStationVolume ( );
    void PutStationVolume (
        long p_Volume );
    VARIANT_BOOL isOnPhoneForUser (
        _bstr_t p_User );
    VARIANT_BOOL isLoggedInForUser (
        _bstr_t p_User );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetMarshalledCallback (
        /*[in]*/ IUnknown * p_Handler ) = 0;
      virtual HRESULT __stdcall raw_SetThreadCallback (
        /*[in]*/ IUnknown * p_Handler ) = 0;
      virtual HRESULT __stdcall get_StatusHasDate (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall get_StatusHasTime (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall raw_SetUntilDateTimeEx (
        /*[in]*/ VARIANT dateTime,
        /*[in]*/ VARIANT_BOOL hasDate,
        /*[in]*/ VARIANT_BOOL hasTime ) = 0;
      virtual HRESULT __stdcall raw_GetNextStatusMessageV (
        /*[out,retval]*/ VARIANT * p_MessageInfo ) = 0;
      virtual HRESULT __stdcall get_DirectoryList (
        /*[out,retval]*/ VARIANT * p_Directories ) = 0;
      virtual HRESULT __stdcall raw_GetDirectory (
        /*[in]*/ BSTR p_SourceName,
        /*[in]*/ long p_Type,
        /*[out,retval]*/ struct IEICDirectory * * p_Dir ) = 0;
      virtual HRESULT __stdcall raw_GetWorkgroup (
        /*[in]*/ BSTR p_Name,
        /*[out,retval]*/ struct IEICWorkgroup * * p_Workgroup ) = 0;
      virtual HRESULT __stdcall raw_GetQueue (
        /*[in]*/ BSTR p_Name,
        /*[in]*/ long p_Type,
        /*[out,retval]*/ struct IEICQueue * * p_Queue ) = 0;
      virtual HRESULT __stdcall get_AvailableActions (
        /*[out,retval]*/ long * p_Actions ) = 0;
      virtual HRESULT __stdcall get_StationVolume (
        /*[out,retval]*/ long * p_Volume ) = 0;
      virtual HRESULT __stdcall put_StationVolume (
        /*[in]*/ long p_Volume ) = 0;
      virtual HRESULT __stdcall raw_isOnPhoneForUser (
        /*[in]*/ BSTR p_User,
        /*[out,retval]*/ VARIANT_BOOL * p_Val ) = 0;
      virtual HRESULT __stdcall raw_isLoggedInForUser (
        /*[in]*/ BSTR p_User,
        /*[out,retval]*/ VARIANT_BOOL * p_Val ) = 0;
};

struct __declspec(uuid("d3cda638-634e-438a-aa81-cc196d72b75f"))
IEICUser3 : IEICUserEx2
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstName))
    _bstr_t FirstName;
    __declspec(property(get=GetLastName))
    _bstr_t LastName;
    __declspec(property(get=GetisACD))
    VARIANT_BOOL isACD;
    __declspec(property(get=GetForwarding,put=PutForwarding))
    IUserForwardingPtr Forwarding;
    __declspec(property(get=GetExcludeFromDirectory))
    VARIANT_BOOL ExcludeFromDirectory;
    __declspec(property(get=GetDepartmentName))
    _bstr_t DepartmentName;
    __declspec(property(get=GetMediaSupportFlags))
    unsigned long MediaSupportFlags;
    __declspec(property(get=GetPeerServerNames))
    _variant_t PeerServerNames;
    __declspec(property(get=GetStatusChangeTime))
    DATE StatusChangeTime;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFirstName ( );
    _bstr_t GetLastName ( );
    VARIANT_BOOL GetisACD ( );
    IUserForwardingPtr GetForwarding ( );
    void PutForwarding (
        struct IUserForwarding * pVal );
    VARIANT_BOOL GetExcludeFromDirectory ( );
    _bstr_t GetDepartmentName ( );
    unsigned long GetMediaSupportFlags ( );
    _variant_t GetPeerServerNames ( );
    DATE GetStatusChangeTime ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LastName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_isACD (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Forwarding (
        /*[out,retval]*/ struct IUserForwarding * * pVal ) = 0;
      virtual HRESULT __stdcall put_Forwarding (
        /*[in]*/ struct IUserForwarding * pVal ) = 0;
      virtual HRESULT __stdcall get_ExcludeFromDirectory (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_DepartmentName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_MediaSupportFlags (
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall get_PeerServerNames (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StatusChangeTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
};

struct __declspec(uuid("a6d4728e-4747-11d2-8023-00a0c9a79e7c"))
IEICDirectory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsPublic))
    VARIANT_BOOL IsPublic;

    //
    // Wrapper methods for error-handling
    //

    HRESULT StartMemberList ( );
    HRESULT GetNextMember (
        long * p_Id );
    HRESULT Connect (
        _bstr_t p_SourceName,
        long p_Type );
    VARIANT_BOOL GetIsPublic ( );
    HRESULT SetChangeHandler (
        struct IEICDirectoryWatcher * p_Watcher );
    HRESULT SetUser (
        _bstr_t p_User,
        _bstr_t p_Password );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StartMemberList ( ) = 0;
      virtual HRESULT __stdcall raw_GetNextMember (
        /*[out]*/ long * p_Id ) = 0;
      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR p_SourceName,
        /*[in]*/ long p_Type ) = 0;
      virtual HRESULT __stdcall get_IsPublic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetChangeHandler (
        /*[in]*/ struct IEICDirectoryWatcher * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_SetUser (
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Password ) = 0;
};

struct __declspec(uuid("8fcdf521-48c0-11d2-8026-00a0c9a79e7c"))
IEICDirectoryWatcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT MemberChanged (
        struct IEICDirectory * p_Directory,
        long p_Id );
    HRESULT MemberRemoved (
        struct IEICDirectory * p_Directory,
        long p_Id );
    HRESULT MemberAdded (
        struct IEICDirectory * p_Directory,
        long p_Id );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MemberChanged (
        /*[in]*/ struct IEICDirectory * p_Directory,
        /*[in]*/ long p_Id ) = 0;
      virtual HRESULT __stdcall raw_MemberRemoved (
        /*[in]*/ struct IEICDirectory * p_Directory,
        /*[in]*/ long p_Id ) = 0;
      virtual HRESULT __stdcall raw_MemberAdded (
        /*[in]*/ struct IEICDirectory * p_Directory,
        /*[in]*/ long p_Id ) = 0;
};

struct __declspec(uuid("1180b756-cdf1-4686-b254-782ac4a04307"))
IEICDirectory2 : IEICDirectory
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    long Type;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetMarshalledCallback (
        IUnknown * p_Watcher );
    HRESULT SetThreadCallback (
        IUnknown * p_Watcher );
    _bstr_t GetName ( );
    long GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetMarshalledCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
      virtual HRESULT __stdcall raw_SetThreadCallback (
        /*[in]*/ IUnknown * p_Watcher ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * p_Val ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * p_Val ) = 0;
};

struct __declspec(uuid("a6d47290-4747-11d2-8023-00a0c9a79e7c"))
IEICDirectoryEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUserId))
    _bstr_t UserId;
    __declspec(property(get=GetStatus))
    _bstr_t Status;
    __declspec(property(get=GetLastName,put=PutLastName))
    _bstr_t LastName;
    __declspec(property(get=GetFirstName,put=PutFirstName))
    _bstr_t FirstName;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetCity,put=PutCity))
    _bstr_t City;
    __declspec(property(get=GetState,put=PutState))
    _bstr_t State;
    __declspec(property(get=GetZip,put=PutZip))
    _bstr_t Zip;
    __declspec(property(get=GetPhone,put=PutPhone))
    _bstr_t Phone;
    __declspec(property(get=GetCompany,put=PutCompany))
    _bstr_t Company;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetDepartment,put=PutDepartment))
    _bstr_t Department;
    __declspec(property(get=GetBusinessAddress,put=PutBusinessAddress))
    _bstr_t BusinessAddress;
    __declspec(property(get=GetBusinessCity,put=PutBusinessCity))
    _bstr_t BusinessCity;
    __declspec(property(get=GetBusinessState,put=PutBusinessState))
    _bstr_t BusinessState;
    __declspec(property(get=GetBusinessZip,put=PutBusinessZip))
    _bstr_t BusinessZip;
    __declspec(property(get=GetBusinessCountry,put=PutBusinessCountry))
    _bstr_t BusinessCountry;
    __declspec(property(get=GetBusinessEMail,put=PutBusinessEMail))
    _bstr_t BusinessEMail;
    __declspec(property(get=GetAssistant,put=PutAssistant))
    _bstr_t Assistant;
    __declspec(property(get=GetHomeCountry,put=PutHomeCountry))
    _bstr_t HomeCountry;
    __declspec(property(get=GetHomeEMail,put=PutHomeEMail))
    _bstr_t HomeEMail;
    __declspec(property(get=GetBusinessPhone,put=PutBusinessPhone))
    _bstr_t BusinessPhone;
    __declspec(property(get=GetBusinessPhone2,put=PutBusinessPhone2))
    _bstr_t BusinessPhone2;
    __declspec(property(get=GetHomePhone2,put=PutHomePhone2))
    _bstr_t HomePhone2;
    __declspec(property(get=GetMobile,put=PutMobile))
    _bstr_t Mobile;
    __declspec(property(get=GetFax,put=PutFax))
    _bstr_t Fax;
    __declspec(property(get=GetPager,put=PutPager))
    _bstr_t Pager;
    __declspec(property(get=GetAssistantPhone,put=PutAssistantPhone))
    _bstr_t AssistantPhone;
    __declspec(property(get=GetUrl,put=PutUrl))
    _bstr_t Url;
    __declspec(property(get=GetPrimaryNumber,put=PutPrimaryNumber))
    _bstr_t PrimaryNumber;
    __declspec(property(get=GetNotes,put=PutNotes))
    _bstr_t Notes;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Load (
        struct IEICDirectory * p_Directory,
        long p_Id );
    HRESULT Create (
        struct IEICDirectory * p_Directory );
    HRESULT Commit ( );
    HRESULT Rollback ( );
    _bstr_t GetUserId ( );
    _bstr_t GetStatus ( );
    _bstr_t GetLastName ( );
    void PutLastName (
        _bstr_t pVal );
    _bstr_t GetFirstName ( );
    void PutFirstName (
        _bstr_t pVal );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetName ( );
    void PutAddress (
        _bstr_t pVal );
    _bstr_t GetAddress ( );
    void PutCity (
        _bstr_t pVal );
    _bstr_t GetCity ( );
    void PutState (
        _bstr_t pVal );
    _bstr_t GetState ( );
    void PutZip (
        _bstr_t pVal );
    _bstr_t GetZip ( );
    void PutPhone (
        _bstr_t pVal );
    _bstr_t GetPhone ( );
    void PutCompany (
        _bstr_t pVal );
    _bstr_t GetCompany ( );
    void PutTitle (
        _bstr_t pVal );
    _bstr_t GetTitle ( );
    void PutDepartment (
        _bstr_t pVal );
    _bstr_t GetDepartment ( );
    void PutBusinessAddress (
        _bstr_t pVal );
    _bstr_t GetBusinessAddress ( );
    void PutBusinessCity (
        _bstr_t pVal );
    _bstr_t GetBusinessCity ( );
    void PutBusinessState (
        _bstr_t pVal );
    _bstr_t GetBusinessState ( );
    void PutBusinessZip (
        _bstr_t pVal );
    _bstr_t GetBusinessZip ( );
    void PutBusinessCountry (
        _bstr_t pVal );
    _bstr_t GetBusinessCountry ( );
    void PutBusinessEMail (
        _bstr_t pVal );
    _bstr_t GetBusinessEMail ( );
    void PutAssistant (
        _bstr_t pVal );
    _bstr_t GetAssistant ( );
    void PutHomeCountry (
        _bstr_t pVal );
    _bstr_t GetHomeCountry ( );
    void PutHomeEMail (
        _bstr_t pVal );
    _bstr_t GetHomeEMail ( );
    void PutBusinessPhone (
        _bstr_t pVal );
    _bstr_t GetBusinessPhone ( );
    void PutBusinessPhone2 (
        _bstr_t pVal );
    _bstr_t GetBusinessPhone2 ( );
    void PutHomePhone2 (
        _bstr_t pVal );
    _bstr_t GetHomePhone2 ( );
    void PutMobile (
        _bstr_t pVal );
    _bstr_t GetMobile ( );
    void PutFax (
        _bstr_t pVal );
    _bstr_t GetFax ( );
    void PutPager (
        _bstr_t pVal );
    _bstr_t GetPager ( );
    void PutAssistantPhone (
        _bstr_t pVal );
    _bstr_t GetAssistantPhone ( );
    void PutUrl (
        _bstr_t pVal );
    _bstr_t GetUrl ( );
    void PutPrimaryNumber (
        _bstr_t pVal );
    _bstr_t GetPrimaryNumber ( );
    void PutNotes (
        _bstr_t pVal );
    _bstr_t GetNotes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ struct IEICDirectory * p_Directory,
        /*[in]*/ long p_Id ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ struct IEICDirectory * p_Directory ) = 0;
      virtual HRESULT __stdcall raw_Commit ( ) = 0;
      virtual HRESULT __stdcall raw_Rollback ( ) = 0;
      virtual HRESULT __stdcall get_UserId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LastName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LastName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FirstName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Address (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_City (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_City (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Zip (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Zip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Phone (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Phone (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Company (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Company (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Department (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Department (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BusinessAddress (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessAddress (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BusinessCity (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessCity (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BusinessState (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessState (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BusinessZip (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessZip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BusinessCountry (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessCountry (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BusinessEMail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessEMail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Assistant (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HomeCountry (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HomeCountry (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HomeEMail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HomeEMail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BusinessPhone (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessPhone (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BusinessPhone2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BusinessPhone2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HomePhone2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HomePhone2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Mobile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Mobile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Fax (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Fax (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Pager (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Pager (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AssistantPhone (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AssistantPhone (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Url (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Url (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PrimaryNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PrimaryNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Notes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Notes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("af435ebc-aad8-4e9d-910c-8e026fcd38a1"))
IEICDirectory2Watcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT MemberChanged (
        struct IEICDirectory2 * p_Directory,
        struct IEICDirectoryEntry * p_Entry,
        long p_Id );
    HRESULT MemberRemoved (
        struct IEICDirectory2 * p_Directory,
        struct IEICDirectoryEntry * p_Entry,
        long p_Id );
    HRESULT MemberAdded (
        struct IEICDirectory2 * p_Directory,
        struct IEICDirectoryEntry * p_Entry,
        long p_Id );
    HRESULT MemberDisplayChanged (
        struct IEICDirectory2 * p_Directory,
        struct IEICDirectoryEntry * p_Entry,
        long p_Id );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MemberChanged (
        /*[in]*/ struct IEICDirectory2 * p_Directory,
        /*[in]*/ struct IEICDirectoryEntry * p_Entry,
        /*[in]*/ long p_Id ) = 0;
      virtual HRESULT __stdcall raw_MemberRemoved (
        /*[in]*/ struct IEICDirectory2 * p_Directory,
        /*[in]*/ struct IEICDirectoryEntry * p_Entry,
        /*[in]*/ long p_Id ) = 0;
      virtual HRESULT __stdcall raw_MemberAdded (
        /*[in]*/ struct IEICDirectory2 * p_Directory,
        /*[in]*/ struct IEICDirectoryEntry * p_Entry,
        /*[in]*/ long p_Id ) = 0;
      virtual HRESULT __stdcall raw_MemberDisplayChanged (
        /*[in]*/ struct IEICDirectory2 * p_Directory,
        /*[in]*/ struct IEICDirectoryEntry * p_Entry,
        /*[in]*/ long p_Id ) = 0;
};

struct __declspec(uuid("522265ee-7ef8-4e2a-be44-393fae8d3b12"))
IEICDirectory2Ex : IEICDirectory2
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT DeleteEntry (
        long p_Id );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_DeleteEntry (
        /*[in]*/ long p_Id ) = 0;
};

struct __declspec(uuid("19346537-74a5-4191-b014-82f391ee1cd6"))
IEIC_UMFMessageWatcher : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ResponseReceived (
        struct IEIC_UMFMessage * pResponse );
    HRESULT Error (
        struct IErrorInfo * p_Info );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ResponseReceived (
        /*[in]*/ struct IEIC_UMFMessage * pResponse ) = 0;
      virtual HRESULT __stdcall raw_Error (
        /*[in]*/ struct IErrorInfo * p_Info ) = 0;
};

struct __declspec(uuid("9fbb4436-7234-418e-9162-dd7dee97ac0e"))
IEIC_UMFMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutId))
    long Id;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Initialize (
        long p_dwServerTimeoutMsec );
    HRESULT Send (
        _bstr_t p_ObjectId,
        _bstr_t p_EventId,
        long p_TimeoutSec,
        struct IEIC_UMFMessageWatcher * p_Responder );
    HRESULT CancelResponseWait ( );
    HRESULT AddInteger (
        long p_Int );
    HRESULT AddString (
        _bstr_t p_String );
    HRESULT GetInteger (
        long * p_Int );
    HRESULT GetString (
        BSTR * p_String );
    HRESULT Connect (
        _bstr_t p_Notifier,
        _bstr_t p_User,
        _bstr_t p_Password,
        _bstr_t p_App );
    void PutId (
        long _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ long p_dwServerTimeoutMsec ) = 0;
      virtual HRESULT __stdcall raw_Send (
        /*[in]*/ BSTR p_ObjectId,
        /*[in]*/ BSTR p_EventId,
        /*[in]*/ long p_TimeoutSec,
        /*[in]*/ struct IEIC_UMFMessageWatcher * p_Responder ) = 0;
      virtual HRESULT __stdcall raw_CancelResponseWait ( ) = 0;
      virtual HRESULT __stdcall raw_AddInteger (
        /*[in]*/ long p_Int ) = 0;
      virtual HRESULT __stdcall raw_AddString (
        /*[in]*/ BSTR p_String ) = 0;
      virtual HRESULT __stdcall raw_GetInteger (
        /*[out]*/ long * p_Int ) = 0;
      virtual HRESULT __stdcall raw_GetString (
        /*[out]*/ BSTR * p_String ) = 0;
      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR p_Notifier,
        /*[in]*/ BSTR p_User,
        /*[in]*/ BSTR p_Password,
        /*[in]*/ BSTR p_App ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ long _arg1 ) = 0;
};

struct __declspec(uuid("ee6a2b1a-7e99-42c5-8867-c18e1069425c"))
IEIC_UMFMessage2 : IEIC_UMFMessage
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SendMarshalled (
        _bstr_t p_ObjectId,
        _bstr_t p_EventId,
        long p_TimeoutSec,
        struct IEIC_UMFMessageWatcher * p_Responder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SendMarshalled (
        /*[in]*/ BSTR p_ObjectId,
        /*[in]*/ BSTR p_EventId,
        /*[in]*/ long p_TimeoutSec,
        /*[in]*/ struct IEIC_UMFMessageWatcher * p_Responder ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_EICClientCOMLib =
    {0xdcc7ad35,0xf185,0x11d1,{0xbf,0xfe,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICQueueWatcher =
    {0xdcc7ad44,0xf185,0x11d1,{0xbf,0xfe,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICQueue =
    {0xdcc7ad43,0xf185,0x11d1,{0xbf,0xfe,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICQueueObject2 =
    {0xbeffc280,0xc8d8,0x11d3,{0xb3,0x7e,0x00,0x50,0xda,0x2c,0x4e,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IEICQueue2 =
    {0xbeffc284,0xc8d8,0x11d3,{0xb3,0x7e,0x00,0x50,0xda,0x2c,0x4e,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IEICQueue2Watcher =
    {0xbeffc282,0xc8d8,0x11d3,{0xb3,0x7e,0x00,0x50,0xda,0x2c,0x4e,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IEICQueueObject2Watcher =
    {0xbeffc285,0xc8d8,0x11d3,{0xb3,0x7e,0x00,0x50,0xda,0x2c,0x4e,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IEICChatObject2 =
    {0xbeffc283,0xc8d8,0x11d3,{0xb3,0x7e,0x00,0x50,0xda,0x2c,0x4e,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IEICChatObject2Watcher =
    {0xbeffc286,0xc8d8,0x11d3,{0xb3,0x7e,0x00,0x50,0xda,0x2c,0x4e,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IEICCallObject2Watcher =
    {0xbeffc287,0xc8d8,0x11d3,{0xb3,0x7e,0x00,0x50,0xda,0x2c,0x4e,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IEICChatObject2Watcher2 =
    {0x32543bd6,0x59c8,0x4c11,{0x97,0x66,0x1e,0x9e,0x64,0x0b,0xbe,0x7f}};
extern "C" const GUID __declspec(selectany) IID_IEICCallObject2Watcher2 =
    {0x0ea36afb,0x9ba3,0x4250,{0x9d,0xe5,0x7e,0x55,0x54,0x3c,0x76,0x80}};
extern "C" const GUID __declspec(selectany) IID_IEICQueueStatData =
    {0xc389e622,0x3fa6,0x11d3,{0xb2,0x6e,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) IID_IEICQueueStats =
    {0xc389e624,0x3fa6,0x11d3,{0xb2,0x6e,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) IID_IEICQueueStatWatcher =
    {0xc389e623,0x3fa6,0x11d3,{0xb2,0x6e,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) IID_IEICWorkgroupStats =
    {0xc389e621,0x3fa6,0x11d3,{0xb2,0x6e,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) IID_IEICWorkgroupStatWatcher =
    {0xc389e626,0x3fa6,0x11d3,{0xb2,0x6e,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) IID_IEICUserWatcher =
    {0x918ebe75,0xfa5d,0x11d1,{0x80,0x01,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICUser =
    {0x871962b3,0xfa2d,0x11d1,{0x80,0x01,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICUserEx =
    {0xdcdd9630,0xc9f8,0x11d3,{0xb2,0xa8,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) IID_IEICUserS =
    {0x1405e8f0,0xdd23,0x4d21,{0x97,0x3c,0x96,0xcd,0xca,0x7a,0x66,0xa1}};
extern "C" const GUID __declspec(selectany) IID_IEICWorkgroupWatcher =
    {0xc574f7b7,0xfede,0x11d1,{0x80,0x01,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICWorkgroup =
    {0xc574f7b5,0xfede,0x11d1,{0x80,0x01,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICWorkgroup2Watcher =
    {0x92b72cf1,0x0040,0x4dbc,{0xbb,0xa0,0x00,0xff,0x64,0x05,0x23,0x9b}};
extern "C" const GUID __declspec(selectany) IID_IEICConferenceObject2Watcher =
    {0x0176517b,0xc513,0x4fa1,{0xa1,0x13,0x70,0x4e,0x17,0xba,0x9b,0x60}};
extern "C" const GUID __declspec(selectany) IID_IEICWorkgroup2Watcher2 =
    {0x906781a0,0xf4e0,0x4bd4,{0xac,0x7d,0xbf,0xd0,0xc5,0x27,0x58,0x36}};
extern "C" const GUID __declspec(selectany) IID_IACDHelpRequest =
    {0xfb3666e0,0x08a5,0x4d70,{0x9b,0x4f,0x57,0xc2,0x45,0x23,0xf6,0x2e}};
extern "C" const GUID __declspec(selectany) IID_IACDHelpMonitorCallback =
    {0x676f2db0,0x5486,0x4cdf,{0xb9,0xdf,0xea,0xe7,0x80,0x60,0x2b,0xdf}};
extern "C" const GUID __declspec(selectany) IID_ISIPPhoneWatcher =
    {0x15af3790,0x98e6,0x4d83,{0x87,0x35,0xee,0x62,0x47,0x07,0x39,0xb5}};
extern "C" const GUID __declspec(selectany) CLSID_EICQueue2WatcherAdapter =
    {0xa1fcaaa7,0x14b7,0x4ba8,{0x85,0xfa,0xd2,0x4b,0xdc,0xfc,0xa4,0xcd}};
extern "C" const GUID __declspec(selectany) IID_IEICQueue2WatcherAdapter =
    {0x5d31b94e,0xd336,0x4155,{0x95,0x3f,0xce,0x1f,0x08,0x2d,0x4e,0xa5}};
extern "C" const GUID __declspec(selectany) CLSID_EICRemoteConnection =
    {0x63065451,0x3475,0x11d3,{0xb2,0x64,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) IID_IEICRemoteConnection =
    {0x63065450,0x3475,0x11d3,{0xb2,0x64,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) CLSID_EICConnection =
    {0x1143b9a7,0xf0bd,0x11d1,{0xbf,0xfe,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICConnection =
    {0xdcc7ad42,0xf185,0x11d1,{0xbf,0xfe,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_EICQueue =
    {0x52344756,0xd0b4,0x11d1,{0xbf,0xf4,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_EICChatObject =
    {0xc763670f,0x1441,0x11d3,{0xb2,0x52,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) IID_IEICChatObjectWatcher =
    {0x02c6d120,0x1d03,0x11d3,{0xb2,0x5a,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) IID_IEICChatObject =
    {0xc763670e,0x1441,0x11d3,{0xb2,0x52,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) CLSID_EICCallObject =
    {0xdcc7ad4c,0xf185,0x11d1,{0xbf,0xfe,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICQueueObjectWatcher =
    {0xb638f3b8,0xf4a4,0x11d1,{0xbf,0xfe,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICCallObject =
    {0xed55b8b5,0xf4b0,0x11d1,{0xbf,0xfe,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_EICUser =
    {0x871962b4,0xfa2d,0x11d1,{0x80,0x01,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_EICUserEx =
    {0xdcdd9631,0xc9f8,0x11d3,{0xb2,0xa8,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) CLSID_EICUserS =
    {0xe493e782,0x47f9,0x4219,{0x91,0x60,0x3d,0xa4,0x80,0xaf,0x66,0xbc}};
extern "C" const GUID __declspec(selectany) CLSID_EICWorkgroup =
    {0xc574f7b6,0xfede,0x11d1,{0x80,0x01,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_EICWorkgroupEntry =
    {0x39501890,0xa539,0x11d4,{0xa0,0x20,0x00,0xd0,0xb7,0x73,0x8a,0xad}};
extern "C" const GUID __declspec(selectany) IID_IEICWorkgroupEntry =
    {0x21a1d340,0xa536,0x11d4,{0xa0,0x20,0x00,0xd0,0xb7,0x73,0x8a,0xad}};
extern "C" const GUID __declspec(selectany) CLSID_EICConferenceObject =
    {0x661abfe6,0x0523,0x11d2,{0x80,0x09,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICConferenceObject =
    {0x661abfe5,0x0523,0x11d2,{0x80,0x09,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_EICDirectory =
    {0xa6d4728f,0x4747,0x11d2,{0x80,0x23,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_EICDirectoryEntry =
    {0xa6d47291,0x4747,0x11d2,{0x80,0x23,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_EICQueueStatData =
    {0xc389e627,0x3fa6,0x11d3,{0xb2,0x6e,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) CLSID_EICQueueStatDataS =
    {0xeb4e2c08,0xcdec,0x4b20,{0xb5,0xc9,0xec,0x52,0x5a,0x1b,0x46,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IEICQueueStatDataS =
    {0x4b12fc9a,0x89b9,0x4eaa,{0x95,0x52,0xd3,0x34,0x92,0xa2,0x75,0x9a}};
extern "C" const GUID __declspec(selectany) CLSID_EICQueueStats =
    {0xc389e628,0x3fa6,0x11d3,{0xb2,0x6e,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) CLSID_EICWorkgroupStats =
    {0xc389e630,0x3fa6,0x11d3,{0xb2,0x6e,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) CLSID_EICWorkgroupStatsS =
    {0xc04131b9,0xdfc7,0x4e35,{0x8d,0x89,0x38,0x45,0x2c,0xec,0xd1,0xcc}};
extern "C" const GUID __declspec(selectany) IID_IEICWorkgroupStatsS =
    {0x5cc138c3,0x9739,0x4d16,{0xba,0xca,0x3c,0x46,0xe6,0xba,0xb9,0xab}};
extern "C" const GUID __declspec(selectany) CLSID_EICStatistics =
    {0xc389e631,0x3fa6,0x11d3,{0xb2,0x6e,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) IID_IEICStatistics =
    {0xc389e620,0x3fa6,0x11d3,{0xb2,0x6e,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) CLSID_EICLogging =
    {0xf33f3400,0x9d26,0x11d3,{0xbf,0xc9,0x00,0x80,0xc8,0x8f,0x54,0x6c}};
extern "C" const GUID __declspec(selectany) IID_IEICLogEvent =
    {0xf33f3402,0x9d26,0x11d3,{0xbf,0xc9,0x00,0x80,0xc8,0x8f,0x54,0x6c}};
extern "C" const GUID __declspec(selectany) IID_IEICLogging =
    {0xf33f3401,0x9d26,0x11d3,{0xbf,0xc9,0x00,0x80,0xc8,0x8f,0x54,0x6c}};
extern "C" const GUID __declspec(selectany) CLSID_EICQueueObject2 =
    {0xf66dafe0,0xcdb3,0x11d3,{0xb3,0x7e,0x00,0x50,0xda,0x2c,0x4e,0xb8}};
extern "C" const GUID __declspec(selectany) CLSID_EICChatObject2 =
    {0xa03fa949,0xda7d,0x42ba,{0xa7,0x5e,0xfa,0xfe,0x53,0x73,0x72,0xff}};
extern "C" const GUID __declspec(selectany) CLSID_EICDS =
    {0x2f1187f3,0xa8c7,0x11d3,{0xa4,0xbb,0x00,0x90,0x27,0xbf,0x83,0x77}};
extern "C" const GUID __declspec(selectany) IID_IEICNames =
    {0x87f324d0,0xa286,0x11d3,{0xa4,0xba,0x00,0x90,0x27,0xbf,0x83,0x77}};
extern "C" const GUID __declspec(selectany) IID_IEICDS =
    {0x87f324d1,0xa286,0x11d3,{0xa4,0xba,0x00,0x90,0x27,0xbf,0x83,0x77}};
extern "C" const GUID __declspec(selectany) CLSID_EICDS2 =
    {0xa36a7726,0xa04c,0x42fd,{0xba,0xdc,0xc6,0xd1,0xdb,0x16,0x4d,0x78}};
extern "C" const GUID __declspec(selectany) IID_IEICDSEntry =
    {0x51355e50,0xa2c2,0x11d3,{0xa4,0xba,0x00,0x90,0x27,0xbf,0x83,0x77}};
extern "C" const GUID __declspec(selectany) IID_IEICDSCustomEntry =
    {0x63cd66ec,0xa9af,0x4f3e,{0x96,0x5a,0xa6,0x3a,0x6e,0x2e,0x93,0xc7}};
extern "C" const GUID __declspec(selectany) IID_IEICDS2 =
    {0x0248f33f,0xbd89,0x4c8c,{0xac,0xbe,0xee,0xf6,0x1b,0x18,0xde,0x9d}};
extern "C" const GUID __declspec(selectany) CLSID_EICDS3 =
    {0xc1ca63ff,0x2a55,0x4f68,{0x91,0xb1,0xf3,0xb6,0x8b,0xfd,0x5f,0x55}};
extern "C" const GUID __declspec(selectany) IID_IEICDS3 =
    {0xc9f7f545,0xbd1e,0x439a,{0x87,0xf0,0xbd,0x13,0x5c,0x14,0xb8,0x3d}};
extern "C" const GUID __declspec(selectany) CLSID_EICNames =
    {0x2f1187f0,0xa8c7,0x11d3,{0xa4,0xbb,0x00,0x90,0x27,0xbf,0x83,0x77}};
extern "C" const GUID __declspec(selectany) CLSID_EICDSUser =
    {0x2f1187f1,0xa8c7,0x11d3,{0xa4,0xbb,0x00,0x90,0x27,0xbf,0x83,0x77}};
extern "C" const GUID __declspec(selectany) IID_IEICDSUser =
    {0x610a19be,0xa108,0x11d3,{0xa4,0xb9,0x00,0x90,0x27,0xbf,0x83,0x77}};
extern "C" const GUID __declspec(selectany) CLSID_EICDSWorkgroup =
    {0x2f1187f2,0xa8c7,0x11d3,{0xa4,0xbb,0x00,0x90,0x27,0xbf,0x83,0x77}};
extern "C" const GUID __declspec(selectany) IID_IEICDSWorkgroup =
    {0x610a19c2,0xa108,0x11d3,{0xa4,0xb9,0x00,0x90,0x27,0xbf,0x83,0x77}};
extern "C" const GUID __declspec(selectany) CLSID_EICDSStation =
    {0xdfb4c8f3,0xe578,0x43ce,{0x9c,0x85,0x00,0x08,0x87,0x69,0x90,0x1b}};
extern "C" const GUID __declspec(selectany) IID_IEICDSStation =
    {0x24b55505,0xd3f7,0x45f0,{0x87,0x12,0x41,0xde,0x90,0xc8,0x45,0x27}};
extern "C" const GUID __declspec(selectany) IID_IEICDSStationEx =
    {0xc5d66ebd,0x08f6,0x4092,{0x8b,0x82,0x08,0x2a,0xc4,0x40,0xfb,0x3b}};
extern "C" const GUID __declspec(selectany) CLSID_EICDSCustomEntry =
    {0x13a4c8af,0xa1ed,0x4b3c,{0x8d,0x4b,0x93,0x06,0xb3,0xc1,0xc6,0xfe}};
extern "C" const GUID __declspec(selectany) CLSID_EICGenericObject2 =
    {0x6b6bd742,0xa43a,0x43dc,{0x91,0x63,0x80,0x4d,0xb4,0x2d,0xa4,0xef}};
extern "C" const GUID __declspec(selectany) IID_IEICGenericObject2 =
    {0x114340e0,0x5eec,0x11d4,{0xb3,0x82,0x00,0x50,0xda,0x2c,0x4e,0xb8}};
extern "C" const GUID __declspec(selectany) CLSID_EICUserEx2 =
    {0x0fd32b55,0x87bf,0x48ce,{0x8d,0xd4,0xd1,0x0a,0x6f,0x00,0xb7,0x61}};
extern "C" const GUID __declspec(selectany) CLSID_EICUserStatus =
    {0xaa801a81,0x2407,0x438e,{0xae,0x26,0x2d,0xe0,0xf7,0x0d,0x5f,0xd2}};
extern "C" const GUID __declspec(selectany) IID_IEICUserStatus =
    {0x4ccb8396,0x4e17,0x4fca,{0xb6,0xd2,0x2b,0x94,0x25,0x16,0xd8,0x61}};
extern "C" const GUID __declspec(selectany) CLSID_EICCampMonitor =
    {0xa0bd2efe,0xbd45,0x4ac0,{0x88,0x2a,0x8b,0x33,0x94,0x19,0x2c,0x4b}};
extern "C" const GUID __declspec(selectany) IID_IEICCampEvent =
    {0x3d6d1a1c,0x87dc,0x4476,{0x96,0x9d,0xb4,0xe9,0x49,0x82,0xcc,0xc6}};
extern "C" const GUID __declspec(selectany) IID_IEICCampMonitor =
    {0x3dc1217f,0xbb5d,0x460b,{0x8f,0xb8,0xcb,0xd3,0xbb,0xa5,0xd7,0xbc}};
extern "C" const GUID __declspec(selectany) CLSID_EICDirectory2 =
    {0x3ca6f21d,0xc3d1,0x4dbb,{0xaf,0x47,0x34,0x70,0x56,0x2e,0x2d,0xfd}};
extern "C" const GUID __declspec(selectany) CLSID_EICQueueObject2WatcherAdapter =
    {0x2304fc63,0x3212,0x4475,{0xa8,0xb5,0x14,0x33,0x05,0x3a,0x3e,0x4d}};
extern "C" const GUID __declspec(selectany) IID_IEICQueueObject2WatcherAdapter =
    {0x880dea54,0x1503,0x4fb4,{0xb2,0x38,0x04,0x09,0x59,0x2c,0xc3,0x07}};
extern "C" const GUID __declspec(selectany) CLSID_EICChatObject2WatcherAdapter =
    {0xcd3b5e75,0xcafc,0x431f,{0x9c,0x97,0xa5,0xa7,0x48,0xb2,0xec,0xa3}};
extern "C" const GUID __declspec(selectany) IID_IEICChatObject2WatcherAdapter =
    {0xe58b0d0d,0x18e2,0x4560,{0xb3,0x15,0xfe,0x93,0x42,0xa4,0x37,0x13}};
extern "C" const GUID __declspec(selectany) CLSID_EICCallObject2WatcherAdapter =
    {0xbbb6c733,0x660b,0x4d0d,{0xa2,0x9b,0x6e,0xe0,0xd2,0x6e,0xfb,0xbb}};
extern "C" const GUID __declspec(selectany) IID_IEICCallObject2WatcherAdapter =
    {0xb4a48d6a,0x000b,0x4ab7,{0x92,0x4c,0x98,0xda,0x47,0x91,0xac,0xf9}};
extern "C" const GUID __declspec(selectany) CLSID_EICWorkgroup2 =
    {0x7cff04d5,0x31b6,0x4dc1,{0x95,0xbb,0xd9,0xe3,0x0f,0xb0,0x67,0x4f}};
extern "C" const GUID __declspec(selectany) IID_IEICWorkgroup2 =
    {0x245174df,0x1a9d,0x4e83,{0xba,0x21,0x94,0xca,0xee,0x38,0xe8,0x9c}};
extern "C" const GUID __declspec(selectany) CLSID_EICConferenceObject2 =
    {0xfc20cb34,0x222c,0x45dd,{0x90,0xff,0x90,0x72,0x40,0x9a,0x87,0xa8}};
extern "C" const GUID __declspec(selectany) IID_IEICCallObject2 =
    {0xbeffc281,0xc8d8,0x11d3,{0xb3,0x7e,0x00,0x50,0xda,0x2c,0x4e,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IEICConferenceObject2 =
    {0x3bb29ac1,0xafa7,0x472d,{0xa3,0x0c,0xac,0xa2,0xfb,0x47,0x29,0x34}};
extern "C" const GUID __declspec(selectany) CLSID_EICEmailObject2 =
    {0x4422dee4,0xdd47,0x4e9a,{0xab,0xb4,0xca,0x04,0x9e,0x5c,0x3d,0x2e}};
extern "C" const GUID __declspec(selectany) IID_IEICEmailObject2 =
    {0x6be25e0f,0xae23,0x4f8a,{0xae,0x1a,0x6b,0x2f,0xcd,0xde,0x52,0x20}};
extern "C" const GUID __declspec(selectany) IID_IEICEmailObject2Response =
    {0x792ecbbe,0xe34e,0x42cb,{0xa9,0xd5,0xdc,0xcf,0x01,0x27,0x03,0x8a}};
extern "C" const GUID __declspec(selectany) CLSID_EICEmailObject2Ex =
    {0x2868dbeb,0xe676,0x4254,{0x96,0x28,0x88,0xda,0xa0,0x65,0x42,0xcf}};
extern "C" const GUID __declspec(selectany) IID_IEICEmailObject2Ex =
    {0xb0a552f7,0x2f8c,0x41d8,{0xbb,0xbf,0xbc,0xe5,0xfd,0xca,0xd0,0x91}};
extern "C" const GUID __declspec(selectany) CLSID_EIC_UMFMessage =
    {0x090c4ecc,0x7073,0x47ee,{0x84,0xf2,0xf7,0x3d,0x93,0xc9,0x32,0x50}};
extern "C" const GUID __declspec(selectany) CLSID_EIC_UMFMessage2 =
    {0x55cb08fd,0x6b8b,0x4a3c,{0xac,0xf9,0xab,0x44,0x71,0xac,0xe1,0x7a}};
extern "C" const GUID __declspec(selectany) CLSID_EICQueueObjectWatcherAdapter =
    {0x9a76b3c4,0x647a,0x4fb9,{0xb4,0x96,0x14,0xce,0x05,0x87,0xac,0xc7}};
extern "C" const GUID __declspec(selectany) IID_IEICQueueObjectWatcherAdapter =
    {0x7991b5a1,0x5c61,0x4db3,{0x8b,0x2a,0xa2,0xa3,0x9d,0x11,0xa4,0xed}};
extern "C" const GUID __declspec(selectany) CLSID_EICCallAcoustics =
    {0x5b0ace34,0x1cab,0x4b91,{0x8e,0xf0,0x6b,0x00,0x94,0x8b,0x70,0xa3}};
extern "C" const GUID __declspec(selectany) IID_IEICCallAcoustics =
    {0xf72011f1,0x73b3,0x4dec,{0x90,0x06,0x79,0xb1,0xe8,0x12,0xfc,0xec}};
extern "C" const GUID __declspec(selectany) CLSID_IWebCallbackObject =
    {0xdb39eeb6,0x8959,0x4b74,{0x8c,0x0b,0xd8,0x66,0xfc,0x38,0x9a,0xa9}};
extern "C" const GUID __declspec(selectany) IID_IIWebCallbackObject =
    {0xd78ad44a,0x4205,0x41be,{0xb2,0x73,0x0c,0xa0,0xe2,0xa1,0x69,0xaf}};
extern "C" const GUID __declspec(selectany) CLSID_IWebInstantQuestion =
    {0x65a4f55d,0x8d99,0x4e96,{0x98,0xbc,0xe8,0xe6,0xb5,0xfc,0x4b,0xe0}};
extern "C" const GUID __declspec(selectany) IID_IIWebInstantQuestion =
    {0x18848869,0xdb8e,0x4f91,{0x92,0xda,0x23,0xe1,0xd0,0xbc,0x45,0x94}};
extern "C" const GUID __declspec(selectany) CLSID_IWebWebSession =
    {0x6a4819a9,0xedad,0x4ba7,{0x90,0xee,0x0c,0x6b,0xd6,0xcf,0xc9,0xe6}};
extern "C" const GUID __declspec(selectany) IID_IIWebWebSession =
    {0x26abb663,0x85f2,0x4058,{0xae,0x37,0x9c,0xd5,0x77,0x4c,0xcb,0xe6}};
extern "C" const GUID __declspec(selectany) CLSID_IWebBrowserSync =
    {0xfeb7f0ef,0x56a4,0x427b,{0xa1,0xb0,0xfb,0x00,0x0f,0x9e,0x72,0xe5}};
extern "C" const GUID __declspec(selectany) IID_IIWebBrowserSync =
    {0xdcc1f5b3,0x104c,0x466c,{0x98,0x97,0x51,0xf1,0x80,0xa2,0xc1,0x2f}};
extern "C" const GUID __declspec(selectany) CLSID_IWebBrowserSync2 =
    {0xe2e0ca25,0xf59b,0x415c,{0x93,0x67,0x88,0xda,0xbf,0xe1,0xe8,0x19}};
extern "C" const GUID __declspec(selectany) IID_IIWebBrowserSync2 =
    {0xc365beeb,0x7c2a,0x4181,{0xa7,0x66,0xd3,0xe5,0x9c,0x7a,0xc3,0xc4}};
extern "C" const GUID __declspec(selectany) CLSID_EICNotification =
    {0xee04aea3,0x4f3e,0x11d2,{0x80,0x2b,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICNotification =
    {0xee04aea2,0x4f3e,0x11d2,{0x80,0x2b,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_EICNotificationSink =
    {0x2b9f40b2,0x5248,0x11d2,{0x80,0x2b,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICServerWatcher =
    {0xee04aea4,0x4f3e,0x11d2,{0x80,0x2b,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICNotificationSink =
    {0x2b9f40b1,0x5248,0x11d2,{0x80,0x2b,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) CLSID_SwitchoverCoClass =
    {0x2ba2635f,0xf5eb,0x424d,{0x8d,0x8a,0x8d,0x56,0x37,0xd2,0x55,0xda}};
extern "C" const GUID __declspec(selectany) IID_ISwitchover =
    {0xe3578ed4,0x528d,0x4c3c,{0x8a,0x76,0xe7,0xf4,0xe5,0xa1,0x3c,0x9c}};
extern "C" const GUID __declspec(selectany) CLSID_ACDHelpRequest =
    {0x69b7850c,0x73bd,0x4feb,{0x8f,0x64,0x21,0xcb,0x99,0x24,0x83,0xe5}};
extern "C" const GUID __declspec(selectany) CLSID_ACDHelpMonitor =
    {0x6082a0ea,0x7c71,0x4083,{0xbe,0x82,0xee,0x26,0x11,0x20,0xb9,0x7e}};
extern "C" const GUID __declspec(selectany) IID_IACDHelpMonitor =
    {0x1771e6e4,0x8e04,0x4ffb,{0xaa,0x47,0x56,0x15,0xd2,0x2b,0x17,0xab}};
extern "C" const GUID __declspec(selectany) CLSID_EICUser3 =
    {0xd92348bd,0x241c,0x45ad,{0xbe,0x55,0x21,0xda,0xff,0x61,0x01,0xd7}};
extern "C" const GUID __declspec(selectany) IID_IUserForwarding =
    {0x0ac6c355,0x1679,0x4712,{0xbc,0x13,0x5f,0x9d,0xb1,0xd9,0xfd,0x5d}};
extern "C" const GUID __declspec(selectany) CLSID_EICQueue3 =
    {0x99167870,0xecbb,0x4553,{0x9c,0x38,0x2f,0xb9,0x99,0x3b,0xd2,0xe8}};
extern "C" const GUID __declspec(selectany) IID_IEICQueue3 =
    {0x3f5abaae,0x2dda,0x4ba7,{0xa0,0xb0,0x82,0x22,0x28,0x31,0x10,0x9e}};
extern "C" const GUID __declspec(selectany) CLSID_UserForwarding =
    {0x0a05b4ef,0xd908,0x4669,{0xbf,0x32,0xb7,0x3e,0xf5,0xa9,0x3e,0xbd}};
extern "C" const GUID __declspec(selectany) CLSID_IWebCallbackObject2 =
    {0xa3ff42d1,0xa6b8,0x4ddc,{0xa0,0x94,0x1a,0x95,0x06,0x63,0x69,0xea}};
extern "C" const GUID __declspec(selectany) IID_IIWebCallbackObject2 =
    {0x5cbe45dc,0x357a,0x4dd9,{0xb3,0xe1,0xa0,0x6b,0x75,0xaa,0xaf,0xde}};
extern "C" const GUID __declspec(selectany) IID_IEICMarshaller =
    {0x8fbfaa00,0x8cb2,0x11d3,{0xb2,0x8d,0x00,0x90,0x27,0x2d,0xcf,0x18}};
extern "C" const GUID __declspec(selectany) CLSID_EICServer2 =
    {0x520a0ffd,0x9cd3,0x11d3,{0xbf,0xc9,0x00,0x80,0xc8,0x8f,0x54,0x6c}};
extern "C" const GUID __declspec(selectany) IID_IEICServer2Watcher =
    {0x520a0ffe,0x9cd3,0x11d3,{0xbf,0xc9,0x00,0x80,0xc8,0x8f,0x54,0x6c}};
extern "C" const GUID __declspec(selectany) IID_IEICServer2 =
    {0x520a0ffc,0x9cd3,0x11d3,{0xbf,0xc9,0x00,0x80,0xc8,0x8f,0x54,0x6c}};
extern "C" const GUID __declspec(selectany) CLSID_EICCallObject2 =
    {0x11bc10b8,0xd1b9,0x428f,{0xbb,0xd7,0xae,0x28,0x3d,0xf5,0x78,0x57}};
extern "C" const GUID __declspec(selectany) CLSID_EICQueue2 =
    {0xbeffc288,0xc8d8,0x11d3,{0xb3,0x7e,0x00,0x50,0xda,0x2c,0x4e,0xb8}};
extern "C" const GUID __declspec(selectany) CLSID_EICServer3 =
    {0xf6a0e878,0x9762,0x453e,{0x8e,0x70,0xfa,0x67,0xb2,0xe8,0x81,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IClientServicesWatcher =
    {0x9bbb68e3,0x793f,0x454c,{0xaf,0xaf,0xf7,0x55,0xbb,0x58,0xc9,0xb7}};
extern "C" const GUID __declspec(selectany) IID_IEICServer3 =
    {0x36a8bd1f,0x0abe,0x41c8,{0xbf,0xc3,0x2f,0x53,0x2b,0x49,0xda,0x1f}};
extern "C" const GUID __declspec(selectany) CLSID_SIPPhone =
    {0x3210fcad,0x1f83,0x46b0,{0x82,0x66,0x97,0x83,0x60,0x35,0xab,0x4b}};
extern "C" const GUID __declspec(selectany) IID_ISIPPhone =
    {0xd0e9814b,0xa68d,0x41a1,{0xb7,0x9a,0x5e,0xfd,0x81,0xea,0x26,0x18}};
extern "C" const GUID __declspec(selectany) IID_ISIPPhone2 =
    {0x7054f4f6,0xba6a,0x4d5d,{0x82,0x53,0xcc,0xaf,0x22,0x94,0xec,0x3d}};
extern "C" const GUID __declspec(selectany) CLSID_CSConnectProfile =
    {0x5e4491fe,0x0068,0x4533,{0xa5,0x2f,0x03,0x86,0x4b,0xef,0xc1,0x7d}};
extern "C" const GUID __declspec(selectany) IID_ICSConnectProfile =
    {0x484e34f0,0x54f0,0x429f,{0xb3,0x80,0xa5,0xaf,0x45,0xb0,0x46,0x62}};
extern "C" const GUID __declspec(selectany) CLSID_RecorderObject =
    {0xdbe06ff3,0x6832,0x4e1f,{0xb4,0x29,0x4d,0x3c,0x3c,0xe0,0xee,0x44}};
extern "C" const GUID __declspec(selectany) IID_IRecorderObject =
    {0x0196b52f,0x3748,0x4a3e,{0xb6,0x25,0x4f,0x21,0x42,0x2c,0x8f,0xb4}};
extern "C" const GUID __declspec(selectany) CLSID_EICDSAction =
    {0xed40e6c3,0x1450,0x45a5,{0xb3,0x3c,0x69,0x86,0x35,0xdb,0x26,0x64}};
extern "C" const GUID __declspec(selectany) IID_IEICDSAction =
    {0x530f3274,0xd7d2,0x45d8,{0xa4,0x0e,0x16,0x63,0xaf,0x49,0x20,0xb1}};
extern "C" const GUID __declspec(selectany) CLSID_EICDirectory2Ex =
    {0x078e00cd,0xe724,0x45c8,{0x86,0x49,0x5f,0xc8,0x01,0x2e,0xe9,0x9f}};
extern "C" const GUID __declspec(selectany) CLSID_Licensing =
    {0x16be54d3,0x0c4e,0x4f84,{0x91,0xce,0xb9,0xb7,0x86,0xfe,0xc1,0x4b}};
extern "C" const GUID __declspec(selectany) IID_ILicensing =
    {0xd8e9491d,0xdc62,0x4267,{0x85,0x59,0x17,0xc9,0x82,0x0d,0x21,0x06}};
extern "C" const GUID __declspec(selectany) CLSID_Login =
    {0x761be7a6,0xa5dc,0x44a2,{0x8f,0xd1,0x62,0x97,0xba,0x66,0x0d,0xb4}};
extern "C" const GUID __declspec(selectany) IID_ILogin =
    {0x195d252f,0x79ac,0x42cd,{0xa2,0xd1,0xac,0x5e,0x32,0x95,0xb9,0xad}};
extern "C" const GUID __declspec(selectany) CLSID_ExtendedDial =
    {0xe4a42362,0x4ab8,0x4e92,{0xb3,0xfe,0xc0,0x98,0x9c,0x9d,0x83,0x2c}};
extern "C" const GUID __declspec(selectany) IID_IExtendedDial =
    {0xb7a19e97,0x9ca5,0x460d,{0x8b,0x89,0x47,0xaa,0x77,0xc9,0xe5,0x88}};
extern "C" const GUID __declspec(selectany) CLSID_DialParameters =
    {0xa06d2aea,0xe67f,0x4409,{0x82,0xa2,0x39,0x81,0xc1,0xde,0xc7,0xff}};
extern "C" const GUID __declspec(selectany) IID_IDialParameters =
    {0x365a6157,0x3a27,0x42d2,{0x8c,0x20,0x3b,0xd1,0xd1,0x8b,0x7b,0xfe}};
extern "C" const GUID __declspec(selectany) CLSID_ExtendedDial2 =
    {0x231bd903,0xc6a2,0x489d,{0x90,0x79,0xde,0x0c,0x8f,0xeb,0xde,0x6a}};
extern "C" const GUID __declspec(selectany) IID_IExtendedDial2 =
    {0x9e5f8c8b,0xf51c,0x4689,{0xbd,0x6f,0x87,0x12,0x30,0x0d,0x45,0x8b}};
extern "C" const GUID __declspec(selectany) CLSID_EICClientCOMUpdate =
    {0xc793a707,0xbdc7,0x4d0b,{0xbe,0xc4,0xae,0x49,0x08,0x4f,0xac,0x2b}};
extern "C" const GUID __declspec(selectany) IID_IEICClientCOMUpdate =
    {0xfdb2ac1f,0xcdd0,0x4c10,{0xa0,0xc6,0x4a,0x31,0x7c,0x45,0xec,0xca}};
extern "C" const GUID __declspec(selectany) IID_IEICUserEx2Watcher =
    {0x5e0b99c9,0x623f,0x48a1,{0x88,0x25,0x55,0xae,0x77,0x63,0xa3,0x9a}};
extern "C" const GUID __declspec(selectany) IID_IEICUserEx2 =
    {0xf8eb10c9,0x39ac,0x49f4,{0x8f,0x48,0xae,0xf3,0x52,0x02,0x17,0x16}};
extern "C" const GUID __declspec(selectany) IID_IEICUser3 =
    {0xd3cda638,0x634e,0x438a,{0xaa,0x81,0xcc,0x19,0x6d,0x72,0xb7,0x5f}};
extern "C" const GUID __declspec(selectany) IID_IEICDirectory =
    {0xa6d4728e,0x4747,0x11d2,{0x80,0x23,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICDirectoryWatcher =
    {0x8fcdf521,0x48c0,0x11d2,{0x80,0x26,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICDirectory2 =
    {0x1180b756,0xcdf1,0x4686,{0xb2,0x54,0x78,0x2a,0xc4,0xa0,0x43,0x07}};
extern "C" const GUID __declspec(selectany) IID_IEICDirectoryEntry =
    {0xa6d47290,0x4747,0x11d2,{0x80,0x23,0x00,0xa0,0xc9,0xa7,0x9e,0x7c}};
extern "C" const GUID __declspec(selectany) IID_IEICDirectory2Watcher =
    {0xaf435ebc,0xaad8,0x4e9d,{0x91,0x0c,0x8e,0x02,0x6f,0xcd,0x38,0xa1}};
extern "C" const GUID __declspec(selectany) IID_IEICDirectory2Ex =
    {0x522265ee,0x7ef8,0x4e2a,{0xbe,0x44,0x39,0x3f,0xae,0x8d,0x3b,0x12}};
extern "C" const GUID __declspec(selectany) IID_IEIC_UMFMessageWatcher =
    {0x19346537,0x74a5,0x4191,{0xb0,0x14,0x82,0xf3,0x91,0xee,0x1c,0xd6}};
extern "C" const GUID __declspec(selectany) IID_IEIC_UMFMessage =
    {0x9fbb4436,0x7234,0x418e,{0x91,0x62,0xdd,0x7d,0xee,0x97,0xac,0x0e}};
extern "C" const GUID __declspec(selectany) IID_IEIC_UMFMessage2 =
    {0xee6a2b1a,0x7e99,0x42c5,{0x88,0x67,0xc1,0x8e,0x10,0x69,0x42,0x5c}};

//
// Function implementation mapping
//

#pragma start_map_region("c:\documents and settings\rfrez\desktop\generic\release\clientcoma.tli")
__declspec(implementation_key(1)) HRESULT IEICQueueWatcher::ObjectAdded ( long p_Type, long p_Id );
__declspec(implementation_key(2)) HRESULT IEICQueueWatcher::ObjectChanged ( long p_Type, long p_Id );
__declspec(implementation_key(3)) HRESULT IEICQueueWatcher::ObjectRemoved ( long p_Type, long p_Id );
__declspec(implementation_key(4)) HRESULT IEICQueue::Connect ( long p_Type, _bstr_t p_Name );
__declspec(implementation_key(5)) HRESULT IEICQueue::SetChangeHandler ( struct IEICQueueWatcher * p_Handler );
__declspec(implementation_key(6)) VARIANT_BOOL IEICQueue::GetActiveMonitor ( );
__declspec(implementation_key(7)) void IEICQueue::PutActiveMonitor ( VARIANT_BOOL pVal );
__declspec(implementation_key(8)) _variant_t IEICQueue::GetObjects ( );
__declspec(implementation_key(9)) long IEICQueue::GetType ( );
__declspec(implementation_key(10)) _bstr_t IEICQueue::GetName ( );
__declspec(implementation_key(11)) HRESULT IEICQueue::StartObjectsList ( );
__declspec(implementation_key(12)) HRESULT IEICQueue::GetNextObject ( long * p_Type, long * p_Id );
__declspec(implementation_key(13)) long IEICQueueObject2::GetId ( );
__declspec(implementation_key(14)) void IEICQueueObject2::PutId ( long pVal );
__declspec(implementation_key(15)) long IEICQueueObject2::GetState ( );
__declspec(implementation_key(16)) _bstr_t IEICQueueObject2::GetStateString ( );
__declspec(implementation_key(17)) void IEICQueueObject2::PutStateString ( _bstr_t pVal );
__declspec(implementation_key(18)) _bstr_t IEICQueueObject2::GetLocalName ( );
__declspec(implementation_key(19)) _bstr_t IEICQueueObject2::GetLocalLocation ( );
__declspec(implementation_key(20)) _bstr_t IEICQueueObject2::GetLocalId ( );
__declspec(implementation_key(21)) _bstr_t IEICQueueObject2::GetRemoteName ( );
__declspec(implementation_key(22)) void IEICQueueObject2::PutRemoteName ( _bstr_t pVal );
__declspec(implementation_key(23)) _bstr_t IEICQueueObject2::GetRemoteLocation ( );
__declspec(implementation_key(24)) _bstr_t IEICQueueObject2::GetRemoteId ( );
__declspec(implementation_key(25)) DATE IEICQueueObject2::GetCreationTime ( );
__declspec(implementation_key(26)) short IEICQueueObject2::GetDirection ( );
__declspec(implementation_key(27)) VARIANT_BOOL IEICQueueObject2::GetisHeld ( );
__declspec(implementation_key(28)) VARIANT_BOOL IEICQueueObject2::GetisRecording ( );
__declspec(implementation_key(29)) VARIANT_BOOL IEICQueueObject2::GetisPaused ( );
__declspec(implementation_key(30)) VARIANT_BOOL IEICQueueObject2::GetisMuted ( );
__declspec(implementation_key(31)) VARIANT_BOOL IEICQueueObject2::GetisPrivate ( );
__declspec(implementation_key(32)) VARIANT_BOOL IEICQueueObject2::GetisMonitored ( );
__declspec(implementation_key(33)) VARIANT_BOOL IEICQueueObject2::GetisParty ( );
__declspec(implementation_key(34)) long IEICQueueObject2::GetConferenceId ( );
__declspec(implementation_key(35)) HRESULT IEICQueueObject2::Pickup ( struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(36)) HRESULT IEICQueueObject2::Disconnect ( struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(37)) HRESULT IEICQueueObject2::Listen ( struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(38)) HRESULT IEICQueueObject2::Record ( struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(39)) HRESULT IEICQueueObject2::Pause ( );
__declspec(implementation_key(40)) HRESULT IEICQueueObject2::Mute ( struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(41)) HRESULT IEICQueueObject2::Hold ( _bstr_t p_ToUserQueue, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(42)) HRESULT IEICQueueObject2::Private ( struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(43)) HRESULT IEICQueueObject2::SendToVoiceMail ( struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(44)) HRESULT IEICQueueObject2::BlindTransfer ( _bstr_t p_ToNumber, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(45)) HRESULT IEICQueueObject2::ConsultTransfer ( long p_WithCall, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(46)) HRESULT IEICQueueObject2::GetCreationTime ( short * hour, short * minute, short * second );
__declspec(implementation_key(47)) HRESULT IEICQueueObject2::GetNamedAttribute ( _bstr_t p_Name, BSTR * p_Value );
__declspec(implementation_key(48)) HRESULT IEICQueueObject2::SetNamedAttribute ( _bstr_t p_Name, _bstr_t p_Value );
__declspec(implementation_key(49)) HRESULT IEICQueueObject2::GetNameAttributeList ( const _variant_t & p_Names, VARIANT * p_Values );
__declspec(implementation_key(50)) HRESULT IEICQueueObject2::SetNameAttributeList ( const _variant_t & p_Names, const _variant_t & p_Values );
__declspec(implementation_key(51)) HRESULT IEICQueueObject2::SetMarshalledCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(52)) HRESULT IEICQueueObject2::SetThreadCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(53)) _bstr_t IEICQueueObject2::GetUserQueueName ( );
__declspec(implementation_key(54)) _bstr_t IEICQueueObject2::GetStationName ( );
__declspec(implementation_key(55)) _bstr_t IEICQueueObject2::GetLineName ( );
__declspec(implementation_key(56)) _variant_t IEICQueueObject2::GetQueueList ( );
__declspec(implementation_key(57)) HRESULT IEICQueueObject2::PickupForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(58)) HRESULT IEICQueueObject2::DisconnectForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(59)) HRESULT IEICQueueObject2::ListenForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(60)) HRESULT IEICQueueObject2::RecordForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(61)) HRESULT IEICQueueObject2::MuteForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(62)) HRESULT IEICQueueObject2::HoldForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_ToUserQueue, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(63)) HRESULT IEICQueueObject2::PrivateForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(64)) HRESULT IEICQueueObject2::SendToVoiceMailForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(65)) HRESULT IEICQueueObject2::BlindTransferForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_ToNumber, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(66)) HRESULT IEICQueueObject2::ConsultTransferForUser ( _bstr_t p_User, _bstr_t p_Station, long p_WithCall, struct IEICQueue * p_IfOnQueue );
__declspec(implementation_key(67)) HRESULT IEICQueueObject2::PauseForUser ( _bstr_t p_User, _bstr_t p_Station );
__declspec(implementation_key(68)) long IEICQueueObject2::GetType ( );
__declspec(implementation_key(69)) _bstr_t IEICQueueObject2::GetNamedAttributeS ( _bstr_t p_Name );
__declspec(implementation_key(70)) _variant_t IEICQueueObject2::GetNameAttributeListS ( const _variant_t & p_Names );
__declspec(implementation_key(71)) _variant_t IEICQueueObject2::GetCreationTimeS ( );
__declspec(implementation_key(72)) long IEICQueueObject2::GetValidActions ( _bstr_t p_User, _bstr_t p_Station );
__declspec(implementation_key(73)) _variant_t IEICQueue2::GetQueueObjects ( );
__declspec(implementation_key(74)) IEICQueueObject2Ptr IEICQueue2::GetNextQueueObject ( );
__declspec(implementation_key(75)) HRESULT IEICQueue2::SetMarshalledCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(76)) HRESULT IEICQueue2::SetThreadCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(77)) HRESULT IEICQueue2::ConnectClient ( _bstr_t p_Name, _bstr_t p_Desc );
__declspec(implementation_key(78)) HRESULT IEICQueue2::DisconnectClient ( _bstr_t p_Name );
__declspec(implementation_key(79)) long IEICQueue2::GetTotalCallsToday ( );
__declspec(implementation_key(80)) long IEICQueue2::GetTotalActiveTimeToday ( );
__declspec(implementation_key(81)) long IEICQueue2::GetLongestCallToday ( );
__declspec(implementation_key(82)) long IEICQueue2::GetAvgCallDurationToday ( );
__declspec(implementation_key(83)) long IEICQueue2::GetAbandonedCallsToday ( );
__declspec(implementation_key(84)) HRESULT IEICQueue2Watcher::ObjectAdded ( struct IEICQueue2 * p_Queue, struct IEICQueueObject2 * p_Object );
__declspec(implementation_key(85)) HRESULT IEICQueue2Watcher::ObjectChanged ( struct IEICQueue2 * p_Queue, struct IEICQueueObject2 * p_Object );
__declspec(implementation_key(86)) HRESULT IEICQueue2Watcher::ObjectRemoved ( struct IEICQueue2 * p_Queue, long p_Id );
__declspec(implementation_key(87)) HRESULT IEICQueue2Watcher::StatisticsUpdated ( struct IEICQueue2 * p_Queue );
__declspec(implementation_key(88)) HRESULT IEICQueueObject2Watcher::StateChanged ( struct IEICQueueObject2 * p_Object, long p_NewState, _bstr_t p_StateString );
__declspec(implementation_key(89)) HRESULT IEICQueueObject2Watcher::SubObjectChanged ( struct IEICQueueObject2 * p_Object, struct IEICQueueObject2 * p_SubObject );
__declspec(implementation_key(90)) HRESULT IEICQueueObject2Watcher::ObjectSpecificError ( struct IEICQueueObject2 * p_Object, long p_Error );
__declspec(implementation_key(91)) HRESULT IEICQueueObject2Watcher::ObjectDestroyed ( struct IEICQueueObject2 * p_Object );
__declspec(implementation_key(92)) HRESULT IEICChatObject2::SendString ( _bstr_t p_String );
__declspec(implementation_key(93)) HRESULT IEICChatObject2::SendURL ( _bstr_t p_URL );
__declspec(implementation_key(94)) HRESULT IEICChatObject2::SendFile ( _bstr_t p_FileName, _bstr_t p_FileData );
__declspec(implementation_key(95)) HRESULT IEICChatObject2::RequestSession ( _bstr_t p_RequestingUserName, _bstr_t p_RequestingEmail, _bstr_t p_RequestingPhone, _bstr_t p_RequestingLocation, _bstr_t p_DestinationQueueName, _bstr_t p_SubjectOfChat );
__declspec(implementation_key(96)) HRESULT IEICChatObject2::RequestSessionForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_RequestingUserName, _bstr_t p_RequestingEmail, _bstr_t p_RequestingPhone, _bstr_t p_RequestingLocation, _bstr_t p_DestinationQueueName, _bstr_t p_SubjectOfChat );
__declspec(implementation_key(97)) HRESULT IEICChatObject2Watcher::ReceivedString ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_String );
__declspec(implementation_key(98)) HRESULT IEICChatObject2Watcher::ReceivedUrl ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_URL );
__declspec(implementation_key(99)) HRESULT IEICChatObject2Watcher::ReceivedFile ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_FileName, _bstr_t p_FileData );
__declspec(implementation_key(100)) HRESULT IEICCallObject2Watcher::StatusChange ( struct IEICQueueObject2 * p_Object );
__declspec(implementation_key(101)) HRESULT IEICChatObject2Watcher2::ReceivedString ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_String );
__declspec(implementation_key(102)) HRESULT IEICChatObject2Watcher2::ReceivedUrl ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_URL );
__declspec(implementation_key(103)) HRESULT IEICChatObject2Watcher2::ReceivedFile ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_FileName, _bstr_t p_FileData );
__declspec(implementation_key(104)) HRESULT IEICCallObject2Watcher2::StatusChange ( struct IEICQueueObject2 * p_Object );
__declspec(implementation_key(105)) long IEICQueueStatData::GetPeriodLength ( );
__declspec(implementation_key(106)) long IEICQueueStatData::GetNumberOfCalls ( );
__declspec(implementation_key(107)) long IEICQueueStatData::GetNumberAnswered ( );
__declspec(implementation_key(108)) long IEICQueueStatData::GetNumberCompleted ( );
__declspec(implementation_key(109)) double IEICQueueStatData::GetAverageWaitTime ( );
__declspec(implementation_key(110)) double IEICQueueStatData::GetAverageTalkTime ( );
__declspec(implementation_key(111)) HRESULT IEICQueueStatData::GetAbandons ( short * p_ArraySize, VARIANT * p_AbandonList );
__declspec(implementation_key(112)) HRESULT IEICQueueStatData::GetServiceLevels ( short * p_ArraySize, VARIANT * p_ServiceList );
__declspec(implementation_key(113)) long IEICQueueStats::GetCallsWaiting ( );
__declspec(implementation_key(114)) long IEICQueueStats::GetCallsAnswered ( );
__declspec(implementation_key(115)) DATE IEICQueueStats::GetLongestWaiting ( );
__declspec(implementation_key(116)) DATE IEICQueueStats::GetLongestTalkTime ( );
__declspec(implementation_key(117)) long IEICQueueStats::GetAgentsLoggedIn ( );
__declspec(implementation_key(118)) long IEICQueueStats::GetAgentsAvailable ( );
__declspec(implementation_key(119)) HRESULT IEICQueueStats::GetAbandonPeriods ( short * p_ArraySize, VARIANT * p_AbandonTimes );
__declspec(implementation_key(120)) HRESULT IEICQueueStats::GetServiceLevelPeriods ( short * p_ArraySize, VARIANT * p_ServiceTimes );
__declspec(implementation_key(121)) IEICQueueStatDataPtr IEICQueueStats::GetCurrentPeriod ( );
__declspec(implementation_key(122)) IEICQueueStatDataPtr IEICQueueStats::GetPreviousPeriod ( );
__declspec(implementation_key(123)) IEICQueueStatDataPtr IEICQueueStats::GetCurrentShift ( );
__declspec(implementation_key(124)) IEICQueueStatDataPtr IEICQueueStats::GetPreviousShift ( );
__declspec(implementation_key(125)) HRESULT IEICQueueStatWatcher::Change ( struct IEICQueueStats * p_Data );
__declspec(implementation_key(126)) long IEICWorkgroupStats::GetAgents ( );
__declspec(implementation_key(127)) long IEICWorkgroupStats::GetAgentsLoggedIn ( );
__declspec(implementation_key(128)) long IEICWorkgroupStats::GetAgentsAvailable ( );
__declspec(implementation_key(129)) DATE IEICWorkgroupStats::GetLongestAvailable ( );
__declspec(implementation_key(130)) long IEICWorkgroupStats::GetNumberOnInbound ( );
__declspec(implementation_key(131)) long IEICWorkgroupStats::GetNumberOnInboundInACW ( );
__declspec(implementation_key(132)) DATE IEICWorkgroupStats::GetLongestInbound ( );
__declspec(implementation_key(133)) long IEICWorkgroupStats::GetNumberOnOutbound ( );
__declspec(implementation_key(134)) long IEICWorkgroupStats::GetNumberOnOutboundInACW ( );
__declspec(implementation_key(135)) DATE IEICWorkgroupStats::GetLongestOutbound ( );
__declspec(implementation_key(136)) long IEICWorkgroupStats::GetNumberNonACD ( );
__declspec(implementation_key(137)) DATE IEICWorkgroupStats::GetLongestNonACD ( );
__declspec(implementation_key(138)) HRESULT IEICWorkgroupStats::GetStatusSummaryInfo ( short * p_ArraySize, VARIANT * p_StatusKeys, VARIANT * p_StatusCounts );
__declspec(implementation_key(139)) HRESULT IEICWorkgroupStatWatcher::Change ( struct IEICWorkgroupStats * p_Data );
__declspec(implementation_key(140)) HRESULT IEICUserWatcher::StatusChanged ( _bstr_t p_NewStatus, DATE p_UntilDateTime );
__declspec(implementation_key(141)) HRESULT IEICUserWatcher::UserChanged ( );
__declspec(implementation_key(142)) HRESULT IEICUserWatcher::UserLoginChanged ( _bstr_t p_Station, VARIANT_BOOL p_Login );
__declspec(implementation_key(143)) _bstr_t IEICUser::GetId ( );
__declspec(implementation_key(144)) void IEICUser::PutId ( _bstr_t pVal );
__declspec(implementation_key(145)) _bstr_t IEICUser::GetName ( );
__declspec(implementation_key(146)) _variant_t IEICUser::GetAvailableStatusMessages ( );
__declspec(implementation_key(147)) _bstr_t IEICUser::GetStatusMessage ( );
__declspec(implementation_key(148)) void IEICUser::PutStatusMessage ( _bstr_t pVal );
__declspec(implementation_key(149)) VARIANT_BOOL IEICUser::GetisDND ( );
__declspec(implementation_key(150)) DATE IEICUser::GetUntilDateTime ( );
__declspec(implementation_key(151)) void IEICUser::PutUntilDateTime ( DATE pVal );
__declspec(implementation_key(152)) HRESULT IEICUser::SetUntilDateTime ( short year, short month, short day, short hour, short minute );
__declspec(implementation_key(153)) HRESULT IEICUser::GetUntilDateTime ( short * year, short * month, short * day, short * hour, short * minute );
__declspec(implementation_key(154)) VARIANT_BOOL IEICUser::GetisOnPhone ( );
__declspec(implementation_key(155)) _bstr_t IEICUser::GetExtension ( );
__declspec(implementation_key(156)) HRESULT IEICUser::SetChangeHandler ( struct IEICUserWatcher * p_Handler );
__declspec(implementation_key(157)) HRESULT IEICUser::Call ( long * p_CallId );
__declspec(implementation_key(158)) HRESULT IEICUser::Workgroups ( VARIANT * p_Workgroups );
__declspec(implementation_key(159)) HRESULT IEICUser::ViewableWorkgroups ( VARIANT * p_Workgroups );
__declspec(implementation_key(160)) HRESULT IEICUser::AccessibleQueues ( VARIANT * p_Queues );
__declspec(implementation_key(161)) VARIANT_BOOL IEICUser::GetCanRecord ( );
__declspec(implementation_key(162)) VARIANT_BOOL IEICUser::GetCanListen ( );
__declspec(implementation_key(163)) VARIANT_BOOL IEICUser::GetCanMakePrivate ( );
__declspec(implementation_key(164)) HRESULT IEICUser::StartWorkgroupsList ( );
__declspec(implementation_key(165)) HRESULT IEICUser::GetNextWorkgroup ( BSTR * p_Name );
__declspec(implementation_key(166)) HRESULT IEICUser::StartViewableWorkgroupsList ( );
__declspec(implementation_key(167)) HRESULT IEICUser::GetNextViewableWorkgroup ( BSTR * p_Name );
__declspec(implementation_key(168)) HRESULT IEICUser::StartAccessibleQueuesList ( );
__declspec(implementation_key(169)) HRESULT IEICUser::GetNextAccessibleQueues ( BSTR * p_Name, long * p_Type, VARIANT_BOOL * p_Modifiable );
__declspec(implementation_key(170)) HRESULT IEICUser::SetNonPersistentStatus ( _bstr_t p_Status );
__declspec(implementation_key(171)) HRESULT IEICUser::StartStatusMessages ( );
__declspec(implementation_key(172)) HRESULT IEICUser::GetNextStatusMessage ( BSTR * p_Text, VARIANT_BOOL * p_IsDND, VARIANT_BOOL * p_HasDate, VARIANT_BOOL * p_HasTime, BSTR * p_IconFileName );
__declspec(implementation_key(173)) _variant_t IEICUser::GetLoggedInStations ( );
__declspec(implementation_key(174)) VARIANT_BOOL IEICUser::GetIsLoggedIn ( );
__declspec(implementation_key(175)) VARIANT_BOOL IEICUserEx::GetAlertOptionTelephone ( );
__declspec(implementation_key(176)) void IEICUserEx::PutAlertOptionTelephone ( VARIANT_BOOL __MIDL_0011 );
__declspec(implementation_key(177)) VARIANT_BOOL IEICUserEx::GetAlertOptionComputer ( );
__declspec(implementation_key(178)) void IEICUserEx::PutAlertOptionComputer ( VARIANT_BOOL __MIDL_0013 );
__declspec(implementation_key(179)) VARIANT_BOOL IEICUserEx::GetAlertOptionPopClient ( );
__declspec(implementation_key(180)) void IEICUserEx::PutAlertOptionPopClient ( VARIANT_BOOL __MIDL_0015 );
__declspec(implementation_key(181)) VARIANT_BOOL IEICUserEx::GetAlertOptionSetFocus ( );
__declspec(implementation_key(182)) void IEICUserEx::PutAlertOptionSetFocus ( VARIANT_BOOL __MIDL_0017 );
__declspec(implementation_key(183)) VARIANT_BOOL IEICUserEx::GetNewChatOptionSound ( );
__declspec(implementation_key(184)) void IEICUserEx::PutNewChatOptionSound ( VARIANT_BOOL __MIDL_0019 );
__declspec(implementation_key(185)) VARIANT_BOOL IEICUserEx::GetNewChatOptionPopClient ( );
__declspec(implementation_key(186)) void IEICUserEx::PutNewChatOptionPopClient ( VARIANT_BOOL __MIDL_0021 );
__declspec(implementation_key(187)) VARIANT_BOOL IEICUserEx::GetNewChatOptionSetFocus ( );
__declspec(implementation_key(188)) void IEICUserEx::PutNewChatOptionSetFocus ( VARIANT_BOOL __MIDL_0023 );
__declspec(implementation_key(189)) VARIANT_BOOL IEICUserEx::GetNewChatTextOptionSound ( );
__declspec(implementation_key(190)) void IEICUserEx::PutNewChatTextOptionSound ( VARIANT_BOOL __MIDL_0025 );
__declspec(implementation_key(191)) VARIANT_BOOL IEICUserEx::GetNewChatTextOptionPopClient ( );
__declspec(implementation_key(192)) void IEICUserEx::PutNewChatTextOptionPopClient ( VARIANT_BOOL __MIDL_0027 );
__declspec(implementation_key(193)) VARIANT_BOOL IEICUserEx::GetNewChatTextOptionSetFocus ( );
__declspec(implementation_key(194)) void IEICUserEx::PutNewChatTextOptionSetFocus ( VARIANT_BOOL __MIDL_0029 );
__declspec(implementation_key(195)) long IEICUserEx::GetIncomingCallsTimeout ( );
__declspec(implementation_key(196)) void IEICUserEx::PutIncomingCallsTimeout ( long seconds );
__declspec(implementation_key(197)) _bstr_t IEICUserEx::GetIncomingCallsForwardNumber ( );
__declspec(implementation_key(198)) void IEICUserEx::PutIncomingCallsForwardNumber ( _bstr_t number );
__declspec(implementation_key(199)) VARIANT_BOOL IEICUserEx::GetActivateOutOfOfficeMessage ( );
__declspec(implementation_key(200)) void IEICUserEx::PutActivateOutOfOfficeMessage ( VARIANT_BOOL __MIDL_0033 );
__declspec(implementation_key(201)) HRESULT IEICUserEx::HoldUpdates ( );
__declspec(implementation_key(202)) HRESULT IEICUserEx::CommitUpdates ( );
__declspec(implementation_key(203)) _variant_t IEICUserEx::GetChatURLs ( );
__declspec(implementation_key(204)) _variant_t IEICUserEx::GetChatMessages ( );
__declspec(implementation_key(205)) _variant_t IEICUserEx::GetChatFiles ( );
__declspec(implementation_key(206)) void IEICUserEx::PutStatusKey ( _bstr_t Val );
__declspec(implementation_key(207)) _bstr_t IEICUserEx::GetStatusKey ( );
__declspec(implementation_key(208)) _variant_t IEICUserEx::GetDirectories ( );
__declspec(implementation_key(209)) _variant_t IEICUserS::GetAccessibleQueueObjectsS ( );
__declspec(implementation_key(210)) _variant_t IEICUserS::GetViewableWorkgroupsS ( );
__declspec(implementation_key(211)) _variant_t IEICUserS::GetWorkgroupsS ( );
__declspec(implementation_key(212)) long IEICUserS::CallS ( );
__declspec(implementation_key(213)) _variant_t IEICUserS::GetUntilDateTimeS ( );
__declspec(implementation_key(214)) void IEICUserS::PutUntilDateTimeS ( VARIANT * p_Date );
__declspec(implementation_key(215)) HRESULT IEICWorkgroupWatcher::UserAdded ( _bstr_t p_UserId );
__declspec(implementation_key(216)) HRESULT IEICWorkgroupWatcher::UserChanged ( _bstr_t p_UserId, _bstr_t p_Status, DATE p_UntilDateTime );
__declspec(implementation_key(217)) HRESULT IEICWorkgroupWatcher::UserRemoved ( _bstr_t p_UserId );
__declspec(implementation_key(218)) HRESULT IEICWorkgroupWatcher::UserOnPhone ( _bstr_t p_UserId, VARIANT_BOOL p_OnPhone );
__declspec(implementation_key(219)) HRESULT IEICWorkgroupWatcher::UserLoginChanged ( _bstr_t p_UserId, _bstr_t p_Station, VARIANT_BOOL p_Login );
__declspec(implementation_key(220)) HRESULT IEICWorkgroup::GetWorkgroupMembers ( VARIANT * p_UserIds );
__declspec(implementation_key(221)) HRESULT IEICWorkgroup::SetChangeHandler ( struct IEICWorkgroupWatcher * p_Handler, VARIANT_BOOL p_MonitorIndividuals );
__declspec(implementation_key(222)) _bstr_t IEICWorkgroup::GetId ( );
__declspec(implementation_key(223)) void IEICWorkgroup::PutId ( _bstr_t pVal );
__declspec(implementation_key(224)) _bstr_t IEICWorkgroup::GetExtension ( );
__declspec(implementation_key(225)) HRESULT IEICWorkgroup::StartMembersList ( );
__declspec(implementation_key(226)) HRESULT IEICWorkgroup::GetNextMember ( BSTR * p_UserId );
__declspec(implementation_key(227)) short IEICWorkgroup::GetWrapupTime ( );
__declspec(implementation_key(228)) _bstr_t IEICWorkgroup::GetWrapupStatus ( );
__declspec(implementation_key(229)) void IEICWorkgroup::PutMonitorOnPhone ( VARIANT_BOOL pVal );
__declspec(implementation_key(230)) VARIANT_BOOL IEICWorkgroup::GetMonitorOnPhone ( );
__declspec(implementation_key(231)) HRESULT IEICWorkgroup2Watcher::UserStatusChanged ( _bstr_t p_UserId, _bstr_t p_StatusKey, DATE p_UntilDateTime, VARIANT_BOOL p_HasDate, VARIANT_BOOL p_HasTime );
__declspec(implementation_key(232)) HRESULT IEICConferenceObject2Watcher::PartyChanged ( long p_ConfId, long p_Type, long p_ObjId, long p_Event );
__declspec(implementation_key(233)) HRESULT IEICConferenceObject2Watcher::ObjectDestroyed ( long p_ConfId );
__declspec(implementation_key(234)) HRESULT IEICConferenceObject2Watcher::TextMessageReceived ( long p_ConfId, _bstr_t p_SenderUserId, _bstr_t p_Msg );
__declspec(implementation_key(235)) HRESULT IEICWorkgroup2Watcher2::UserStatusChanged ( _bstr_t p_UserId, _bstr_t p_StatusKey, DATE p_UntilDateTime, VARIANT_BOOL p_HasDate, VARIANT_BOOL p_HasTime );
__declspec(implementation_key(236)) _bstr_t IACDHelpRequest::GetDescription ( );
__declspec(implementation_key(237)) void IACDHelpRequest::PutDescription ( _bstr_t pVal );
__declspec(implementation_key(238)) IEICQueueObject2Ptr IACDHelpRequest::GetInteraction ( );
__declspec(implementation_key(239)) void IACDHelpRequest::PutInteraction ( struct IEICQueueObject2 * pVal );
__declspec(implementation_key(240)) _bstr_t IACDHelpRequest::GetAgent ( );
__declspec(implementation_key(241)) void IACDHelpRequest::PutAgent ( _bstr_t pVal );
__declspec(implementation_key(242)) _bstr_t IACDHelpRequest::GetWorkgroup ( );
__declspec(implementation_key(243)) void IACDHelpRequest::PutWorkgroup ( _bstr_t pVal );
__declspec(implementation_key(244)) _bstr_t IACDHelpRequest::GetStation ( );
__declspec(implementation_key(245)) void IACDHelpRequest::PutStation ( _bstr_t pVal );
__declspec(implementation_key(246)) _bstr_t IACDHelpRequest::GetExtension ( );
__declspec(implementation_key(247)) void IACDHelpRequest::PutExtension ( _bstr_t pVal );
__declspec(implementation_key(248)) HRESULT IACDHelpRequest::Send ( );
__declspec(implementation_key(249)) HRESULT IACDHelpMonitorCallback::HelpRequest ( struct IACDHelpRequest * p_Request );
__declspec(implementation_key(250)) HRESULT IACDHelpMonitorCallback::ResponseReceived ( struct IACDHelpRequest * p_Request );
__declspec(implementation_key(251)) HRESULT ISIPPhoneWatcher::OnDeviceChanged ( VARIANT_BOOL bCapableOfAudio );
__declspec(implementation_key(252)) void IEICQueue2WatcherAdapter::PutObjectAddedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(253)) void IEICQueue2WatcherAdapter::PutObjectChangedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(254)) void IEICQueue2WatcherAdapter::PutObjectRemovedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(255)) void IEICQueue2WatcherAdapter::PutStatisticsUpdatedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(256)) _variant_t IEICQueue2WatcherAdapter::GetObjectAddedFunc ( );
__declspec(implementation_key(257)) _variant_t IEICQueue2WatcherAdapter::GetObjectChangedFunc ( );
__declspec(implementation_key(258)) _variant_t IEICQueue2WatcherAdapter::GetObjectRemovedFunc ( );
__declspec(implementation_key(259)) _variant_t IEICQueue2WatcherAdapter::GetStatisticsUpdatedFunc ( );
__declspec(implementation_key(260)) HRESULT IEICRemoteConnection::Connect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_PersistentConnection, VARIANT_BOOL p_AutoDisconnect );
__declspec(implementation_key(261)) HRESULT IEICRemoteConnection::Disconnect ( VARIANT_BOOL p_DisconnectUserOnly );
__declspec(implementation_key(262)) _bstr_t IEICRemoteConnection::GetServer ( );
__declspec(implementation_key(263)) _bstr_t IEICRemoteConnection::GetUser ( );
__declspec(implementation_key(264)) _bstr_t IEICRemoteConnection::GetStation ( );
__declspec(implementation_key(265)) VARIANT_BOOL IEICRemoteConnection::GetConnectionValid ( );
__declspec(implementation_key(266)) HRESULT IEICConnection::Connect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_AutoDisconnect );
__declspec(implementation_key(267)) HRESULT IEICConnection::Attach ( _bstr_t p_App, _bstr_t p_Server, VARIANT_BOOL p_AutoDisconnect );
__declspec(implementation_key(268)) HRESULT IEICConnection::Disconnect ( VARIANT_BOOL p_DisconnectUserOnly );
__declspec(implementation_key(269)) HRESULT IEICConnection::ForceDisconnect ( _bstr_t p_User, _bstr_t p_Station, VARIANT_BOOL p_DisconnectUserOnly );
__declspec(implementation_key(270)) _bstr_t IEICConnection::GetServer ( );
__declspec(implementation_key(271)) _bstr_t IEICConnection::GetUser ( );
__declspec(implementation_key(272)) _bstr_t IEICConnection::GetStation ( );
__declspec(implementation_key(273)) HRESULT IEICConnection::PassiveConnect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, VARIANT_BOOL p_AutoDisconnect );
__declspec(implementation_key(274)) VARIANT_BOOL IEICConnection::GetConnectionValid ( );
__declspec(implementation_key(275)) HRESULT IEICChatObjectWatcher::StateChanged ( long p_NewState, _bstr_t p_StateString );
__declspec(implementation_key(276)) HRESULT IEICChatObjectWatcher::ObjectSpecificChange ( );
__declspec(implementation_key(277)) HRESULT IEICChatObjectWatcher::ObjectDestroyed ( );
__declspec(implementation_key(278)) HRESULT IEICChatObjectWatcher::ObjectSpecificError ( long p_Error );
__declspec(implementation_key(279)) HRESULT IEICChatObjectWatcher::SubObjectChanged ( long p_Type, long p_Id, long p_Change );
__declspec(implementation_key(280)) HRESULT IEICChatObjectWatcher::ReceivedString ( _bstr_t p_User, _bstr_t p_String );
__declspec(implementation_key(281)) HRESULT IEICChatObjectWatcher::ReceivedUrl ( _bstr_t p_User, _bstr_t p_URL );
__declspec(implementation_key(282)) HRESULT IEICChatObjectWatcher::ReceivedFile ( _bstr_t p_User, _bstr_t p_FileName, _bstr_t p_FileData );
__declspec(implementation_key(283)) long IEICChatObject::GetId ( );
__declspec(implementation_key(284)) void IEICChatObject::PutId ( long pVal );
__declspec(implementation_key(285)) long IEICChatObject::GetState ( );
__declspec(implementation_key(286)) _bstr_t IEICChatObject::GetStateString ( );
__declspec(implementation_key(287)) void IEICChatObject::PutStateString ( _bstr_t pVal );
__declspec(implementation_key(288)) HRESULT IEICChatObject::Pickup ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(289)) HRESULT IEICChatObject::Disconnect ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(290)) HRESULT IEICChatObject::SetChangeHandler ( struct IEICChatObjectWatcher * p_Handler );
__declspec(implementation_key(291)) _bstr_t IEICChatObject::GetLocalName ( );
__declspec(implementation_key(292)) _bstr_t IEICChatObject::GetLocalLocation ( );
__declspec(implementation_key(293)) _bstr_t IEICChatObject::GetRemoteName ( );
__declspec(implementation_key(294)) void IEICChatObject::PutRemoteName ( _bstr_t pVal );
__declspec(implementation_key(295)) _bstr_t IEICChatObject::GetRemoteLocation ( );
__declspec(implementation_key(296)) _bstr_t IEICChatObject::GetLocalId ( );
__declspec(implementation_key(297)) _bstr_t IEICChatObject::GetRemoteId ( );
__declspec(implementation_key(298)) DATE IEICChatObject::GetCreationTime ( );
__declspec(implementation_key(299)) HRESULT IEICChatObject::GetCreationTime ( short * hour, short * minute, short * second );
__declspec(implementation_key(300)) short IEICChatObject::GetDirection ( );
__declspec(implementation_key(301)) HRESULT IEICChatObject::GetNamedAttribute ( _bstr_t p_Name, BSTR * p_Value );
__declspec(implementation_key(302)) HRESULT IEICChatObject::SetNamedAttribute ( _bstr_t p_Name, _bstr_t p_Value );
__declspec(implementation_key(303)) HRESULT IEICChatObject::Listen ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(304)) HRESULT IEICChatObject::Record ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(305)) HRESULT IEICChatObject::Pause ( );
__declspec(implementation_key(306)) HRESULT IEICChatObject::Private ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(307)) VARIANT_BOOL IEICChatObject::GetisRecording ( );
__declspec(implementation_key(308)) VARIANT_BOOL IEICChatObject::GetisPaused ( );
__declspec(implementation_key(309)) VARIANT_BOOL IEICChatObject::GetisPrivate ( );
__declspec(implementation_key(310)) VARIANT_BOOL IEICChatObject::GetisMonitored ( );
__declspec(implementation_key(311)) HRESULT IEICChatObject::PutNameAttributeList ( const _variant_t & p_Names, const _variant_t & p_Values );
__declspec(implementation_key(312)) HRESULT IEICChatObject::GetNameAttributeList ( const _variant_t & p_Names, VARIANT * p_Values );
__declspec(implementation_key(313)) HRESULT IEICChatObject::SendString ( _bstr_t p_String );
__declspec(implementation_key(314)) HRESULT IEICChatObject::SendURL ( _bstr_t p_URL );
__declspec(implementation_key(315)) HRESULT IEICChatObject::SendFile ( _bstr_t p_FileName, _bstr_t p_FileData );
__declspec(implementation_key(316)) HRESULT IEICChatObject::BlindTransfer ( _bstr_t p_UserQueueName, _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(317)) HRESULT IEICChatObject::RequestSession ( _bstr_t p_RequestingUserName, _bstr_t p_RequestingEmail, _bstr_t p_RequestingPhone, _bstr_t p_RequestingLocation, _bstr_t p_DestinationQueueName, _bstr_t p_SubjectOfChat );
__declspec(implementation_key(318)) HRESULT IEICQueueObjectWatcher::StateChanged ( long p_NewState, _bstr_t p_StateString );
__declspec(implementation_key(319)) HRESULT IEICQueueObjectWatcher::ObjectSpecificChange ( );
__declspec(implementation_key(320)) HRESULT IEICQueueObjectWatcher::ObjectDestroyed ( );
__declspec(implementation_key(321)) HRESULT IEICQueueObjectWatcher::ObjectSpecificError ( long p_Error );
__declspec(implementation_key(322)) HRESULT IEICQueueObjectWatcher::SubObjectChanged ( long p_Type, long p_Id, long p_Change );
__declspec(implementation_key(323)) long IEICCallObject::GetId ( );
__declspec(implementation_key(324)) void IEICCallObject::PutId ( long pVal );
__declspec(implementation_key(325)) long IEICCallObject::GetState ( );
__declspec(implementation_key(326)) _bstr_t IEICCallObject::GetStateString ( );
__declspec(implementation_key(327)) void IEICCallObject::PutStateString ( _bstr_t pVal );
__declspec(implementation_key(328)) HRESULT IEICCallObject::Pickup ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(329)) HRESULT IEICCallObject::Disconnect ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(330)) HRESULT IEICCallObject::SetChangeHandler ( struct IEICQueueObjectWatcher * p_Handler );
__declspec(implementation_key(331)) _bstr_t IEICCallObject::GetLocalName ( );
__declspec(implementation_key(332)) _bstr_t IEICCallObject::GetLocalLocation ( );
__declspec(implementation_key(333)) _bstr_t IEICCallObject::GetRemoteName ( );
__declspec(implementation_key(334)) void IEICCallObject::PutRemoteName ( _bstr_t pVal );
__declspec(implementation_key(335)) _bstr_t IEICCallObject::GetRemoteLocation ( );
__declspec(implementation_key(336)) _bstr_t IEICCallObject::GetLocalId ( );
__declspec(implementation_key(337)) _bstr_t IEICCallObject::GetRemoteId ( );
__declspec(implementation_key(338)) DATE IEICCallObject::GetCreationTime ( );
__declspec(implementation_key(339)) HRESULT IEICCallObject::GetCreationTime ( short * hour, short * minute, short * second );
__declspec(implementation_key(340)) short IEICCallObject::GetDirection ( );
__declspec(implementation_key(341)) HRESULT IEICCallObject::GetNamedAttribute ( _bstr_t p_Name, BSTR * p_Value );
__declspec(implementation_key(342)) HRESULT IEICCallObject::SetNamedAttribute ( _bstr_t p_Name, _bstr_t p_Value );
__declspec(implementation_key(343)) HRESULT IEICCallObject::ExtendedDial ( _bstr_t p_Number, short p_TimeoutSecs, VARIANT_BOOL p_CallAnalysis, VARIANT_BOOL p_CallHandlerOnSuccess );
__declspec(implementation_key(344)) HRESULT IEICCallObject::Dial ( _bstr_t p_Number, VARIANT_BOOL p_CallHandlerOnSuccess );
__declspec(implementation_key(345)) HRESULT IEICCallObject::Listen ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(346)) HRESULT IEICCallObject::Record ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(347)) HRESULT IEICCallObject::Pause ( );
__declspec(implementation_key(348)) HRESULT IEICCallObject::Mute ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(349)) HRESULT IEICCallObject::Hold ( _bstr_t p_ToUserQueue, _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(350)) HRESULT IEICCallObject::Private ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(351)) HRESULT IEICCallObject::BlindTransfer ( _bstr_t p_ToNumber, _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(352)) HRESULT IEICCallObject::ConsultTransfer ( long p_WithCall, _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(353)) HRESULT IEICCallObject::SendToVoiceMail ( _bstr_t p_IfOnUserQueue );
__declspec(implementation_key(354)) VARIANT_BOOL IEICCallObject::GetisHeld ( );
__declspec(implementation_key(355)) VARIANT_BOOL IEICCallObject::GetisRecording ( );
__declspec(implementation_key(356)) VARIANT_BOOL IEICCallObject::GetisPaused ( );
__declspec(implementation_key(357)) VARIANT_BOOL IEICCallObject::GetisMuted ( );
__declspec(implementation_key(358)) VARIANT_BOOL IEICCallObject::GetisPrivate ( );
__declspec(implementation_key(359)) VARIANT_BOOL IEICCallObject::GetisMonitored ( );
__declspec(implementation_key(360)) HRESULT IEICCallObject::PlayDigits ( _bstr_t p_StringOfDigits );
__declspec(implementation_key(361)) VARIANT_BOOL IEICCallObject::GetisParty ( );
__declspec(implementation_key(362)) long IEICCallObject::GetConferenceId ( );
__declspec(implementation_key(363)) HRESULT IEICCallObject::PutNameAttributeList ( const _variant_t & p_Names, const _variant_t & p_Values );
__declspec(implementation_key(364)) HRESULT IEICCallObject::GetNameAttributeList ( const _variant_t & p_Names, VARIANT * p_Values );
__declspec(implementation_key(365)) HRESULT IEICWorkgroupEntry::Load ( _bstr_t pVal );
__declspec(implementation_key(366)) _bstr_t IEICWorkgroupEntry::GetUserId ( );
__declspec(implementation_key(367)) _bstr_t IEICWorkgroupEntry::GetLastName ( );
__declspec(implementation_key(368)) _bstr_t IEICWorkgroupEntry::GetFirstName ( );
__declspec(implementation_key(369)) _bstr_t IEICWorkgroupEntry::GetName ( );
__declspec(implementation_key(370)) _bstr_t IEICWorkgroupEntry::GetAddress ( );
__declspec(implementation_key(371)) _bstr_t IEICWorkgroupEntry::GetCity ( );
__declspec(implementation_key(372)) _bstr_t IEICWorkgroupEntry::GetState ( );
__declspec(implementation_key(373)) _bstr_t IEICWorkgroupEntry::GetZip ( );
__declspec(implementation_key(374)) _bstr_t IEICWorkgroupEntry::GetPhone ( );
__declspec(implementation_key(375)) _bstr_t IEICWorkgroupEntry::GetCompany ( );
__declspec(implementation_key(376)) _bstr_t IEICWorkgroupEntry::GetTitle ( );
__declspec(implementation_key(377)) _bstr_t IEICWorkgroupEntry::GetDepartment ( );
__declspec(implementation_key(378)) _bstr_t IEICWorkgroupEntry::GetBusinessAddress ( );
__declspec(implementation_key(379)) _bstr_t IEICWorkgroupEntry::GetBusinessCity ( );
__declspec(implementation_key(380)) _bstr_t IEICWorkgroupEntry::GetBusinessState ( );
__declspec(implementation_key(381)) _bstr_t IEICWorkgroupEntry::GetBusinessZip ( );
__declspec(implementation_key(382)) _bstr_t IEICWorkgroupEntry::GetBusinessCountry ( );
__declspec(implementation_key(383)) _bstr_t IEICWorkgroupEntry::GetBusinessEMail ( );
__declspec(implementation_key(384)) _bstr_t IEICWorkgroupEntry::GetAssistant ( );
__declspec(implementation_key(385)) _bstr_t IEICWorkgroupEntry::GetHomeCountry ( );
__declspec(implementation_key(386)) _bstr_t IEICWorkgroupEntry::GetHomeEMail ( );
__declspec(implementation_key(387)) _bstr_t IEICWorkgroupEntry::GetBusinessPhone ( );
__declspec(implementation_key(388)) _bstr_t IEICWorkgroupEntry::GetBusinessPhone2 ( );
__declspec(implementation_key(389)) _bstr_t IEICWorkgroupEntry::GetHomePhone2 ( );
__declspec(implementation_key(390)) _bstr_t IEICWorkgroupEntry::GetMobile ( );
__declspec(implementation_key(391)) _bstr_t IEICWorkgroupEntry::GetFax ( );
__declspec(implementation_key(392)) _bstr_t IEICWorkgroupEntry::GetPager ( );
__declspec(implementation_key(393)) _bstr_t IEICWorkgroupEntry::GetAssistantPhone ( );
__declspec(implementation_key(394)) _bstr_t IEICWorkgroupEntry::GetUrl ( );
__declspec(implementation_key(395)) _bstr_t IEICWorkgroupEntry::GetPrimaryNumber ( );
__declspec(implementation_key(396)) _bstr_t IEICWorkgroupEntry::GetNotes ( );
__declspec(implementation_key(397)) _bstr_t IEICWorkgroupEntry::GetStatusMessage ( );
__declspec(implementation_key(398)) _bstr_t IEICWorkgroupEntry::GetStatusKey ( );
__declspec(implementation_key(399)) _variant_t IEICWorkgroupEntry::GetUntilDateTime ( );
__declspec(implementation_key(400)) VARIANT_BOOL IEICWorkgroupEntry::GetisDND ( );
__declspec(implementation_key(401)) VARIANT_BOOL IEICWorkgroupEntry::GethasDate ( );
__declspec(implementation_key(402)) VARIANT_BOOL IEICWorkgroupEntry::GethasTime ( );
__declspec(implementation_key(403)) VARIANT_BOOL IEICWorkgroupEntry::GetIsLoggedIn ( );
__declspec(implementation_key(404)) VARIANT_BOOL IEICWorkgroupEntry::GetisOnPhone ( );
__declspec(implementation_key(405)) _bstr_t IEICWorkgroupEntry::GetExtension ( );
__declspec(implementation_key(406)) _variant_t IEICWorkgroupEntry::GetStatusChangeTime ( );
__declspec(implementation_key(407)) HRESULT IEICConferenceObject::Create ( struct IEICCallObject * p_Call );
__declspec(implementation_key(408)) HRESULT IEICConferenceObject::Add ( struct IEICCallObject * p_Call );
__declspec(implementation_key(409)) HRESULT IEICConferenceObject::ListMembers ( VARIANT * p_ArrayOfCallIds );
__declspec(implementation_key(410)) HRESULT IEICConferenceObject::SetChangeHandler ( struct IEICQueueObjectWatcher * p_Handler );
__declspec(implementation_key(411)) HRESULT IEICConferenceObject::DisconnectParty ( long p_CallId );
__declspec(implementation_key(412)) long IEICConferenceObject::GetId ( );
__declspec(implementation_key(413)) void IEICConferenceObject::PutId ( long pVal );
__declspec(implementation_key(414)) HRESULT IEICConferenceObject::StartMembersList ( );
__declspec(implementation_key(415)) HRESULT IEICConferenceObject::GetNextMember ( long * p_CallId );
__declspec(implementation_key(416)) _variant_t IEICQueueStatDataS::GetAbandons ( );
__declspec(implementation_key(417)) _variant_t IEICQueueStatDataS::GetServiceLevels ( );
__declspec(implementation_key(418)) _variant_t IEICWorkgroupStatsS::GetStatusSummaryInfo ( );
__declspec(implementation_key(419)) HRESULT IEICStatistics::Connect ( _bstr_t p_Name );
__declspec(implementation_key(420)) HRESULT IEICStatistics::SetQueueChangeHandler ( IUnknown * p_Handler );
__declspec(implementation_key(421)) HRESULT IEICStatistics::SetWorkgroupChangeHandler ( IUnknown * p_Handler );
__declspec(implementation_key(422)) IEICQueueStatsPtr IEICStatistics::GetQueueStats ( );
__declspec(implementation_key(423)) IEICWorkgroupStatsPtr IEICStatistics::GetWorkgroupStats ( );
__declspec(implementation_key(424)) HRESULT IEICLogEvent::Log ( _bstr_t p_String );
__declspec(implementation_key(425)) HRESULT IEICLogging::Start ( struct IEICLogEvent * p_Logger, VARIANT_BOOL p_InternalDebugging );
__declspec(implementation_key(426)) HRESULT IEICLogging::Stop ( );
__declspec(implementation_key(427)) HRESULT IEICLogging::Log ( _bstr_t p_String );
__declspec(implementation_key(428)) void IEICLogging::PutInternalDebugging ( VARIANT_BOOL pVal );
__declspec(implementation_key(429)) VARIANT_BOOL IEICLogging::GetInternalDebugging ( );
__declspec(implementation_key(430)) IUnknownPtr IEICNames::Get_NewEnum ( );
__declspec(implementation_key(431)) _bstr_t IEICNames::GetItem ( long Index );
__declspec(implementation_key(432)) void IEICNames::PutItem ( long Index, _bstr_t pVal );
__declspec(implementation_key(433)) long IEICNames::GetCount ( );
__declspec(implementation_key(434)) HRESULT IEICNames::Add ( _bstr_t newVal );
__declspec(implementation_key(435)) HRESULT IEICNames::Remove ( long Index );
__declspec(implementation_key(436)) IEICNamesPtr IEICDS::GetWorkgroups ( );
__declspec(implementation_key(437)) IEICNamesPtr IEICDS::GetUsers ( );
__declspec(implementation_key(438)) IEICNamesPtr IEICDS::GetSkills ( );
__declspec(implementation_key(439)) IEICNamesPtr IEICDS::GetNTUsers ( );
__declspec(implementation_key(440)) IEICNamesPtr IEICDS::GetActions ( );
__declspec(implementation_key(441)) IEICNamesPtr IEICDS::GetStatusMessages ( );
__declspec(implementation_key(442)) IEICNamesPtr IEICDS::GetWorkstations ( );
__declspec(implementation_key(443)) IEICNamesPtr IEICDS::GetSMDIPorts ( );
__declspec(implementation_key(444)) IEICNamesPtr IEICDS::GetPagingCarriers ( );
__declspec(implementation_key(445)) HRESULT IEICDS::BeginTransaction ( );
__declspec(implementation_key(446)) HRESULT IEICDS::EndTransaction ( );
__declspec(implementation_key(447)) _bstr_t IEICDSEntry::GetId ( );
__declspec(implementation_key(448)) void IEICDSEntry::PutId ( _bstr_t pVal );
__declspec(implementation_key(449)) HRESULT IEICDSEntry::Update ( );
__declspec(implementation_key(450)) HRESULT IEICDSEntry::Revert ( );
__declspec(implementation_key(451)) _variant_t IEICDSCustomEntry::GetValue ( _bstr_t p_Attribute );
__declspec(implementation_key(452)) void IEICDSCustomEntry::PutValue ( _bstr_t p_Attribute, const _variant_t & p_Value );
__declspec(implementation_key(453)) _bstr_t IEICDSCustomEntry::GetPath ( );
__declspec(implementation_key(454)) HRESULT IEICDS2::DeleteEntry ( struct IEICDSEntry * p_Entry );
__declspec(implementation_key(455)) IEICDSCustomEntryPtr IEICDS2::CreateCustomEntry ( struct IEICDSEntry * p_Parent, _bstr_t p_Attr );
__declspec(implementation_key(456)) IEICDSCustomEntryPtr IEICDS2::GetCustomEntry ( struct IEICDSEntry * p_Parent, _bstr_t p_Attr );
__declspec(implementation_key(457)) HRESULT IEICDS3::AddSkill ( _bstr_t p_Skill );
__declspec(implementation_key(458)) HRESULT IEICDS3::DeleteSkill ( _bstr_t p_Skill );
__declspec(implementation_key(459)) _bstr_t IEICDSUser::GetExtension ( );
__declspec(implementation_key(460)) void IEICDSUser::PutExtension ( _bstr_t pVal );
__declspec(implementation_key(461)) _bstr_t IEICDSUser::GetMailbox ( );
__declspec(implementation_key(462)) void IEICDSUser::PutMailbox ( _bstr_t pVal );
__declspec(implementation_key(463)) _bstr_t IEICDSUser::GetMailboxDisplayName ( );
__declspec(implementation_key(464)) void IEICDSUser::PutMailboxDisplayName ( _bstr_t pVal );
__declspec(implementation_key(465)) void IEICDSUser::PutPassword ( _bstr_t _arg1 );
__declspec(implementation_key(466)) _bstr_t IEICDSUser::GetStatusMessage ( );
__declspec(implementation_key(467)) void IEICDSUser::PutStatusMessage ( _bstr_t pVal );
__declspec(implementation_key(468)) _bstr_t IEICDSUser::GetDefaultWorkstation ( );
__declspec(implementation_key(469)) void IEICDSUser::PutDefaultWorkstation ( _bstr_t pVal );
__declspec(implementation_key(470)) _bstr_t IEICDSUser::GetNTDomainName ( );
__declspec(implementation_key(471)) void IEICDSUser::PutNTDomainName ( _bstr_t pVal );
__declspec(implementation_key(472)) IEICNamesPtr IEICDSUser::GetWorkgroups ( );
__declspec(implementation_key(473)) HRESULT IEICDSUser::AddToWorkgroup ( _bstr_t p_WorkgroupName );
__declspec(implementation_key(474)) HRESULT IEICDSUser::RemoveFromWorkgroup ( _bstr_t p_WorkgroupName );
__declspec(implementation_key(475)) HRESULT IEICDSUser::GetACDOptions ( VARIANT * p_Cost, VARIANT * p_Attribute1, VARIANT * p_Attribute2, VARIANT * p_Attribute3, VARIANT * p_AutoAnswerCalls );
__declspec(implementation_key(476)) HRESULT IEICDSUser::SetACDOptions ( const _variant_t & p_Cost, const _variant_t & p_Attribute1, const _variant_t & p_Attribute2, const _variant_t & p_Attribute3, const _variant_t & p_AutoAnswerCalls );
__declspec(implementation_key(477)) IEICNamesPtr IEICDSUser::GetSkills ( );
__declspec(implementation_key(478)) HRESULT IEICDSUser::AddSkill ( _bstr_t p_SkillName );
__declspec(implementation_key(479)) HRESULT IEICDSUser::RemoveSkill ( _bstr_t p_SkillName );
__declspec(implementation_key(480)) HRESULT IEICDSUser::SetSkill ( _bstr_t p_Name, long p_Proficiency, long p_DesireToUse );
__declspec(implementation_key(481)) HRESULT IEICDSUser::GetSkill ( _bstr_t p_Name, long * p_Proficiency, long * p_DesireToUse );
__declspec(implementation_key(482)) HRESULT IEICDSUser::GetAgentGreeting ( VARIANT_BOOL * p_HasAgentGreeting, BSTR * pVal );
__declspec(implementation_key(483)) HRESULT IEICDSUser::SetAgentGreeting ( VARIANT_BOOL p_HasAgentGreeting, _bstr_t p_AgentGreeting );
__declspec(implementation_key(484)) HRESULT IEICDSUser::GetSMDI ( VARIANT * p_MWIEnabled, VARIANT * p_MWIPhoneNumber, VARIANT * p_SMDIPort );
__declspec(implementation_key(485)) HRESULT IEICDSUser::SetSMDI ( const _variant_t & p_MWIEnabled, const _variant_t & p_MWIPhoneNumber, const _variant_t & p_SMDIPort );
__declspec(implementation_key(486)) HRESULT IEICDSUser::GetClientNotification ( VARIANT * p_RingTelephone, VARIANT * p_RingComputer, VARIANT * p_PopClientWindow, VARIANT * p_SetFocusToClientWindow );
__declspec(implementation_key(487)) HRESULT IEICDSUser::SetClientNotification ( const _variant_t & p_RingTelephone, const _variant_t & p_RingComputer, const _variant_t & p_PopClientWindow, const _variant_t & p_SetFocusToClientWindow );
__declspec(implementation_key(488)) HRESULT IEICDSUser::GetNewChatOptions ( VARIANT * p_PlaySound, VARIANT * p_PopClientWindow, VARIANT * p_SetFocusToClientWindow );
__declspec(implementation_key(489)) HRESULT IEICDSUser::SetNewChatOptions ( const _variant_t & p_PlaySound, const _variant_t & p_PopClientWindow, const _variant_t & p_SetFocusToClientWindow );
__declspec(implementation_key(490)) HRESULT IEICDSUser::GetNewChatTextOptions ( VARIANT * p_PlaySound, VARIANT * p_PopClientWindow, VARIANT * p_SetFocusToClientWindow );
__declspec(implementation_key(491)) HRESULT IEICDSUser::SetNewChatTextOptions ( const _variant_t & p_PlaySound, const _variant_t & p_PopClientWindow, const _variant_t & p_SetFocusToClientWindow );
__declspec(implementation_key(492)) long IEICDSUser::GetOfferingCallTimeout ( );
__declspec(implementation_key(493)) void IEICDSUser::PutOfferingCallTimeout ( long pVal );
__declspec(implementation_key(494)) HRESULT IEICDSUser::GetActions ( VARIANT * p_AlertingAction, VARIANT * p_DisconnectedAction );
__declspec(implementation_key(495)) HRESULT IEICDSUser::SetActions ( const _variant_t & p_AlertingAction, const _variant_t & p_DisconnectedAction );
__declspec(implementation_key(496)) VARIANT_BOOL IEICDSUser::GetPagingActive ( );
__declspec(implementation_key(497)) void IEICDSUser::PutPagingActive ( VARIANT_BOOL pVal );
__declspec(implementation_key(498)) _bstr_t IEICDSUser::GetPagingCarrier ( );
__declspec(implementation_key(499)) void IEICDSUser::PutPagingCarrier ( _bstr_t pVal );
__declspec(implementation_key(500)) _bstr_t IEICDSUser::GetPagingPIN ( );
__declspec(implementation_key(501)) void IEICDSUser::PutPagingPIN ( _bstr_t pVal );
__declspec(implementation_key(502)) VARIANT_BOOL IEICDSUser::GetPageAccess ( enum DSPageAccess p_PageAccess );
__declspec(implementation_key(503)) void IEICDSUser::PutPageAccess ( enum DSPageAccess p_PageAccess, VARIANT_BOOL pVal );
__declspec(implementation_key(504)) VARIANT_BOOL IEICDSUser::GetUserRights ( enum DSUserRights p_UserRights );
__declspec(implementation_key(505)) void IEICDSUser::PutUserRights ( enum DSUserRights p_UserRights, VARIANT_BOOL pVal );
__declspec(implementation_key(506)) HRESULT IEICDSUser::GetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * * p_Inherited, struct IEICNames * * p_CurrentAvailable, struct IEICNames * * p_CurrentSelected );
__declspec(implementation_key(507)) HRESULT IEICDSUser::SetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * p_CurrentSelected );
__declspec(implementation_key(508)) _variant_t IEICDSUser::GetAttribute ( long p_Attribute );
__declspec(implementation_key(509)) void IEICDSUser::PutAttribute ( long p_Attribute, const _variant_t & p_Val );
__declspec(implementation_key(510)) _bstr_t IEICDSWorkgroup::GetExtension ( );
__declspec(implementation_key(511)) void IEICDSWorkgroup::PutExtension ( _bstr_t pVal );
__declspec(implementation_key(512)) _bstr_t IEICDSWorkgroup::GetMailbox ( );
__declspec(implementation_key(513)) void IEICDSWorkgroup::PutMailbox ( _bstr_t pVal );
__declspec(implementation_key(514)) _bstr_t IEICDSWorkgroup::GetMailboxDisplayName ( );
__declspec(implementation_key(515)) void IEICDSWorkgroup::PutMailboxDisplayName ( _bstr_t pVal );
__declspec(implementation_key(516)) _bstr_t IEICDSWorkgroup::GetIcon ( );
__declspec(implementation_key(517)) void IEICDSWorkgroup::PutIcon ( _bstr_t pVal );
__declspec(implementation_key(518)) _bstr_t IEICDSWorkgroup::GetRingSound ( );
__declspec(implementation_key(519)) void IEICDSWorkgroup::PutRingSound ( _bstr_t pVal );
__declspec(implementation_key(520)) _bstr_t IEICDSWorkgroup::GetChatSound ( );
__declspec(implementation_key(521)) void IEICDSWorkgroup::PutChatSound ( _bstr_t pVal );
__declspec(implementation_key(522)) _bstr_t IEICDSWorkgroup::GetOnHoldMusic ( );
__declspec(implementation_key(523)) void IEICDSWorkgroup::PutOnHoldMusic ( _bstr_t pVal );
__declspec(implementation_key(524)) VARIANT_BOOL IEICDSWorkgroup::GetHasQueue ( );
__declspec(implementation_key(525)) void IEICDSWorkgroup::PutHasQueue ( VARIANT_BOOL pVal );
__declspec(implementation_key(526)) VARIANT_BOOL IEICDSWorkgroup::GetActive ( );
__declspec(implementation_key(527)) void IEICDSWorkgroup::PutActive ( VARIANT_BOOL pVal );
__declspec(implementation_key(528)) IEICNamesPtr IEICDSWorkgroup::GetUsers ( );
__declspec(implementation_key(529)) HRESULT IEICDSWorkgroup::AddUser ( _bstr_t p_Id );
__declspec(implementation_key(530)) HRESULT IEICDSWorkgroup::RemoveUser ( _bstr_t p_Id );
__declspec(implementation_key(531)) IEICNamesPtr IEICDSWorkgroup::GetSkills ( );
__declspec(implementation_key(532)) HRESULT IEICDSWorkgroup::AddSkill ( _bstr_t p_SkillName );
__declspec(implementation_key(533)) HRESULT IEICDSWorkgroup::RemoveSkill ( _bstr_t p_SkillName );
__declspec(implementation_key(534)) HRESULT IEICDSWorkgroup::SetSkill ( _bstr_t p_Name, long p_Proficiency, long p_DesireToUse );
__declspec(implementation_key(535)) HRESULT IEICDSWorkgroup::GetSkill ( _bstr_t p_Name, long * p_Proficiency, long * p_DesireToUse );
__declspec(implementation_key(536)) HRESULT IEICDSWorkgroup::GetACDActions ( VARIANT * p_AlertingAction, VARIANT * p_DisconnectedAction, VARIANT * p_TransferAction, VARIANT * p_IncomingTransferAction );
__declspec(implementation_key(537)) HRESULT IEICDSWorkgroup::SetACDActions ( const _variant_t & p_AlertingAction, const _variant_t & p_DisconnectedAction, const _variant_t & p_TransferAction, const _variant_t & p_IncomingTransferAction );
__declspec(implementation_key(538)) VARIANT_BOOL IEICDSWorkgroup::GetExecuteTransferActionOnUserTransfer ( );
__declspec(implementation_key(539)) void IEICDSWorkgroup::PutExecuteTransferActionOnUserTransfer ( VARIANT_BOOL pVal );
__declspec(implementation_key(540)) _bstr_t IEICDSWorkgroup::GetNoAnswerStatus ( );
__declspec(implementation_key(541)) void IEICDSWorkgroup::PutNoAnswerStatus ( _bstr_t pVal );
__declspec(implementation_key(542)) _bstr_t IEICDSWorkgroup::GetOnCallStatus ( );
__declspec(implementation_key(543)) void IEICDSWorkgroup::PutOnCallStatus ( _bstr_t pVal );
__declspec(implementation_key(544)) HRESULT IEICDSWorkgroup::GetWrapup ( long * p_WrapupTime, BSTR * p_WrapupStatus );
__declspec(implementation_key(545)) HRESULT IEICDSWorkgroup::SetWrapup ( long p_WrapupTime, _bstr_t p_WrapupStatus );
__declspec(implementation_key(546)) HRESULT IEICDSWorkgroup::GetActions ( VARIANT * p_AlertingAction, VARIANT * p_DisconnectedAction );
__declspec(implementation_key(547)) HRESULT IEICDSWorkgroup::SetActions ( const _variant_t & p_AlertingAction, const _variant_t & p_DisconnectedAction );
__declspec(implementation_key(548)) long IEICDSWorkgroup::GetOfferingCallTimeout ( );
__declspec(implementation_key(549)) void IEICDSWorkgroup::PutOfferingCallTimeout ( long pVal );
__declspec(implementation_key(550)) VARIANT_BOOL IEICDSWorkgroup::GetPagingActive ( );
__declspec(implementation_key(551)) void IEICDSWorkgroup::PutPagingActive ( VARIANT_BOOL pVal );
__declspec(implementation_key(552)) HRESULT IEICDSWorkgroup::GetCallStatistics ( VARIANT * p_StatisticsPeriod, VARIANT * p_EstimatedCallTimeInterval );
__declspec(implementation_key(553)) HRESULT IEICDSWorkgroup::SetCallStatistics ( const _variant_t & p_StatisticsPeriod, const _variant_t & p_EstimatedCallTimeInterval );
__declspec(implementation_key(554)) _variant_t IEICDSWorkgroup::GetStatisticsShiftStarts ( );
__declspec(implementation_key(555)) void IEICDSWorkgroup::PutStatisticsShiftStarts ( const _variant_t & pVal );
__declspec(implementation_key(556)) VARIANT_BOOL IEICDSWorkgroup::GetPageAccess ( enum DSPageAccess p_PageAccess );
__declspec(implementation_key(557)) void IEICDSWorkgroup::PutPageAccess ( enum DSPageAccess p_PageAccess, VARIANT_BOOL pVal );
__declspec(implementation_key(558)) VARIANT_BOOL IEICDSWorkgroup::GetUserRights ( enum DSUserRights p_UserRights );
__declspec(implementation_key(559)) void IEICDSWorkgroup::PutUserRights ( enum DSUserRights p_UserRights, VARIANT_BOOL pVal );
__declspec(implementation_key(560)) HRESULT IEICDSWorkgroup::GetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * * p_Inherited, struct IEICNames * * p_CurrentAvailable, struct IEICNames * * p_CurrentSelected );
__declspec(implementation_key(561)) HRESULT IEICDSWorkgroup::SetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * p_CurrentSelected );
__declspec(implementation_key(562)) _bstr_t IEICDSStation::GetExtension ( );
__declspec(implementation_key(563)) void IEICDSStation::PutExtension ( _bstr_t pVal );
__declspec(implementation_key(564)) _bstr_t IEICDSStation::GetType ( );
__declspec(implementation_key(565)) void IEICDSStation::PutType ( _bstr_t pVal );
__declspec(implementation_key(566)) int IEICDSStation::GetPortNumber ( );
__declspec(implementation_key(567)) void IEICDSStation::PutPortNumber ( int pVal );
__declspec(implementation_key(568)) int IEICDSStation::GetBoardNumber ( );
__declspec(implementation_key(569)) void IEICDSStation::PutBoardNumber ( int pVal );
__declspec(implementation_key(570)) _bstr_t IEICDSStation::GetChannel ( );
__declspec(implementation_key(571)) void IEICDSStation::PutChannel ( _bstr_t pVal );
__declspec(implementation_key(572)) _bstr_t IEICDSStation::GetDriver ( );
__declspec(implementation_key(573)) void IEICDSStation::PutDriver ( _bstr_t pVal );
__declspec(implementation_key(574)) VARIANT_BOOL IEICDSStation::GetActive ( );
__declspec(implementation_key(575)) void IEICDSStation::PutActive ( VARIANT_BOOL pVal );
__declspec(implementation_key(576)) VARIANT_BOOL IEICDSStation::GetRingAlways ( );
__declspec(implementation_key(577)) void IEICDSStation::PutRingAlways ( VARIANT_BOOL pVal );
__declspec(implementation_key(578)) _bstr_t IEICDSStation::GetRemotePhone ( );
__declspec(implementation_key(579)) void IEICDSStation::PutRemotePhone ( _bstr_t pVal );
__declspec(implementation_key(580)) _bstr_t IEICDSStation::GetRemoteLineGroup ( );
__declspec(implementation_key(581)) void IEICDSStation::PutRemoteLineGroup ( _bstr_t pVal );
__declspec(implementation_key(582)) _bstr_t IEICDSStation::GetNode ( );
__declspec(implementation_key(583)) void IEICDSStation::PutNode ( _bstr_t pVal );
__declspec(implementation_key(584)) int IEICDSStation::GetVoiceResource ( );
__declspec(implementation_key(585)) void IEICDSStation::PutVoiceResource ( int pVal );
__declspec(implementation_key(586)) _bstr_t IEICDSStation::GetADSI ( );
__declspec(implementation_key(587)) void IEICDSStation::PutADSI ( _bstr_t pVal );
__declspec(implementation_key(588)) _bstr_t IEICDSStation::GetFSKType ( );
__declspec(implementation_key(589)) void IEICDSStation::PutFSKType ( _bstr_t pVal );
__declspec(implementation_key(590)) _bstr_t IEICDSStation::GetConnectionType ( );
__declspec(implementation_key(591)) void IEICDSStation::PutConnectionType ( _bstr_t pVal );
__declspec(implementation_key(592)) _bstr_t IEICDSStation::GetLine ( );
__declspec(implementation_key(593)) void IEICDSStation::PutLine ( _bstr_t pVal );
__declspec(implementation_key(594)) _bstr_t IEICDSStation::GetIPAddress ( );
__declspec(implementation_key(595)) void IEICDSStation::PutIPAddress ( _bstr_t pVal );
__declspec(implementation_key(596)) IEICNamesPtr IEICDSStation::GetAccess ( );
__declspec(implementation_key(597)) void IEICDSStation::PutAccess ( struct IEICNames * pVal );
__declspec(implementation_key(598)) HRESULT IEICDSStationEx::SaveAttributesAndSetLicenses ( );
__declspec(implementation_key(599)) int IEICGenericObject2::CreateNew ( _bstr_t p_QueueName, int p_QueueType, enum EICQueueObjectStates p_State, int p_Direction, int p_RemotePartyType, int p_LocalPartyType, _bstr_t p_RemoteName, _bstr_t p_RemoteId, _bstr_t p_LocalLocation );
__declspec(implementation_key(600)) _bstr_t IEICUserStatus::GetStatusMessage ( _bstr_t p_User );
__declspec(implementation_key(601)) _bstr_t IEICUserStatus::GetStatusKey ( _bstr_t p_User );
__declspec(implementation_key(602)) DATE IEICUserStatus::GetUntilDateTime ( _bstr_t p_User );
__declspec(implementation_key(603)) VARIANT_BOOL IEICUserStatus::GetisDND ( _bstr_t p_User );
__declspec(implementation_key(604)) VARIANT_BOOL IEICUserStatus::GethasDate ( _bstr_t p_User );
__declspec(implementation_key(605)) VARIANT_BOOL IEICUserStatus::GethasTime ( _bstr_t p_User );
__declspec(implementation_key(606)) VARIANT_BOOL IEICUserStatus::GetIsLoggedIn ( _bstr_t p_User );
__declspec(implementation_key(607)) VARIANT_BOOL IEICUserStatus::GetisOnPhone ( _bstr_t p_User );
__declspec(implementation_key(608)) HRESULT IEICCampEvent::CampEvent ( _bstr_t p_UserId, long p_EventId );
__declspec(implementation_key(609)) HRESULT IEICCampMonitor::StartCamp ( _bstr_t p_UserId );
__declspec(implementation_key(610)) HRESULT IEICCampMonitor::EndCamp ( _bstr_t p_UserId );
__declspec(implementation_key(611)) HRESULT IEICCampMonitor::EndAllCamp ( );
__declspec(implementation_key(612)) HRESULT IEICCampMonitor::SetMarshalledCallback ( struct IEICCampEvent * p_Handler );
__declspec(implementation_key(613)) HRESULT IEICCampMonitor::SetThreadCallback ( struct IEICCampEvent * p_Handler );
__declspec(implementation_key(614)) void IEICQueueObject2WatcherAdapter::PutStateChangedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(615)) void IEICQueueObject2WatcherAdapter::PutSubObjectChangedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(616)) void IEICQueueObject2WatcherAdapter::PutObjectSpecificErrorFunc ( const _variant_t & p_Function );
__declspec(implementation_key(617)) void IEICQueueObject2WatcherAdapter::PutObjectDestroyedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(618)) _variant_t IEICQueueObject2WatcherAdapter::GetStateChangedFunc ( );
__declspec(implementation_key(619)) _variant_t IEICQueueObject2WatcherAdapter::GetSubObjectChangedFunc ( );
__declspec(implementation_key(620)) _variant_t IEICQueueObject2WatcherAdapter::GetObjectSpecificErrorFunc ( );
__declspec(implementation_key(621)) _variant_t IEICQueueObject2WatcherAdapter::GetObjectDestroyedFunc ( );
__declspec(implementation_key(622)) void IEICChatObject2WatcherAdapter::PutStateChangedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(623)) void IEICChatObject2WatcherAdapter::PutSubObjectChangedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(624)) void IEICChatObject2WatcherAdapter::PutObjectSpecificErrorFunc ( const _variant_t & p_Function );
__declspec(implementation_key(625)) void IEICChatObject2WatcherAdapter::PutObjectDestroyedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(626)) void IEICChatObject2WatcherAdapter::PutReceivedStringFunc ( const _variant_t & p_Function );
__declspec(implementation_key(627)) void IEICChatObject2WatcherAdapter::PutReceivedUrlFunc ( const _variant_t & p_Function );
__declspec(implementation_key(628)) void IEICChatObject2WatcherAdapter::PutReceivedFileFunc ( const _variant_t & p_Function );
__declspec(implementation_key(629)) _variant_t IEICChatObject2WatcherAdapter::GetStateChangedFunc ( );
__declspec(implementation_key(630)) _variant_t IEICChatObject2WatcherAdapter::GetSubObjectChangedFunc ( );
__declspec(implementation_key(631)) _variant_t IEICChatObject2WatcherAdapter::GetObjectSpecificErrorFunc ( );
__declspec(implementation_key(632)) _variant_t IEICChatObject2WatcherAdapter::GetObjectDestroyedFunc ( );
__declspec(implementation_key(633)) _variant_t IEICChatObject2WatcherAdapter::GetReceivedStringFunc ( );
__declspec(implementation_key(634)) _variant_t IEICChatObject2WatcherAdapter::GetReceivedUrlFunc ( );
__declspec(implementation_key(635)) _variant_t IEICChatObject2WatcherAdapter::GetReceivedFileFunc ( );
__declspec(implementation_key(636)) void IEICCallObject2WatcherAdapter::PutStateChangedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(637)) void IEICCallObject2WatcherAdapter::PutSubObjectChangedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(638)) void IEICCallObject2WatcherAdapter::PutObjectSpecificErrorFunc ( const _variant_t & p_Function );
__declspec(implementation_key(639)) void IEICCallObject2WatcherAdapter::PutObjectDestroyedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(640)) void IEICCallObject2WatcherAdapter::PutStatusChangeFunc ( const _variant_t & p_Function );
__declspec(implementation_key(641)) _variant_t IEICCallObject2WatcherAdapter::GetStateChangedFunc ( );
__declspec(implementation_key(642)) _variant_t IEICCallObject2WatcherAdapter::GetSubObjectChangedFunc ( );
__declspec(implementation_key(643)) _variant_t IEICCallObject2WatcherAdapter::GetObjectSpecificErrorFunc ( );
__declspec(implementation_key(644)) _variant_t IEICCallObject2WatcherAdapter::GetObjectDestroyedFunc ( );
__declspec(implementation_key(645)) _variant_t IEICCallObject2WatcherAdapter::GetStatusChangeFunc ( );
__declspec(implementation_key(646)) HRESULT IEICWorkgroup2::SetMarshalledCallback ( IUnknown * p_Watcher, VARIANT_BOOL p_WatchIndividuals );
__declspec(implementation_key(647)) HRESULT IEICWorkgroup2::SetThreadCallback ( IUnknown * p_Watcher, VARIANT_BOOL p_WatchIndividuals );
__declspec(implementation_key(648)) HRESULT IEICCallObject2::PlayDigits ( _bstr_t p_StringOfDigits );
__declspec(implementation_key(649)) HRESULT IEICCallObject2::ExtendedDial ( _bstr_t p_Number, short p_TimeoutSecs, VARIANT_BOOL p_CallAnalysis, VARIANT_BOOL p_CallHandlerOnSuccess );
__declspec(implementation_key(650)) HRESULT IEICCallObject2::Dial ( _bstr_t p_Number, VARIANT_BOOL p_CallHandlerOnSuccess );
__declspec(implementation_key(651)) HRESULT IEICCallObject2::ExtendedDialForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_Number, short p_TimeoutSecs, VARIANT_BOOL p_CallAnalysis, VARIANT_BOOL p_CallHandlerOnSuccess );
__declspec(implementation_key(652)) HRESULT IEICCallObject2::DialForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_Number, VARIANT_BOOL p_CallHandlerOnSuccess );
__declspec(implementation_key(653)) HRESULT IEICCallObject2::DialError ( long p_Error );
__declspec(implementation_key(654)) HRESULT IEICConferenceObject2::SetMarshalledCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(655)) HRESULT IEICConferenceObject2::SetThreadCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(656)) HRESULT IEICConferenceObject2::SendTextMessage ( _bstr_t p_Msg );
__declspec(implementation_key(657)) HRESULT IEICConferenceObject2::SendTextMessageForUser ( _bstr_t p_UserId, _bstr_t p_Msg );
__declspec(implementation_key(658)) HRESULT IEICConferenceObject2::GetCurrentText ( BSTR * p_Msgs );
__declspec(implementation_key(659)) HRESULT IEICConferenceObject2::Create ( struct IEICCallObject2 * p_Call );
__declspec(implementation_key(660)) HRESULT IEICConferenceObject2::Add ( struct IEICCallObject2 * p_Call );
__declspec(implementation_key(661)) _bstr_t IEICEmailObject2::GetFrom ( );
__declspec(implementation_key(662)) _bstr_t IEICEmailObject2::GetSenderName ( );
__declspec(implementation_key(663)) _variant_t IEICEmailObject2::GetToList ( );
__declspec(implementation_key(664)) _variant_t IEICEmailObject2::GetCCList ( );
__declspec(implementation_key(665)) _variant_t IEICEmailObject2::GetBCCList ( );
__declspec(implementation_key(666)) _variant_t IEICEmailObject2::GetReplyList ( );
__declspec(implementation_key(667)) _bstr_t IEICEmailObject2::GetSubject ( );
__declspec(implementation_key(668)) _bstr_t IEICEmailObject2::GetTextBody ( );
__declspec(implementation_key(669)) _bstr_t IEICEmailObject2::GetImportance ( );
__declspec(implementation_key(670)) _bstr_t IEICEmailObject2::GetContentType ( );
__declspec(implementation_key(671)) _variant_t IEICEmailObject2::GetDate ( );
__declspec(implementation_key(672)) HRESULT IEICEmailObject2::SaveAttachment ( _bstr_t attachmentFilePath, long Index );
__declspec(implementation_key(673)) int IEICEmailObject2::GetNumAttachments ( );
__declspec(implementation_key(674)) _bstr_t IEICEmailObject2::GetAttachmentName ( long Index );
__declspec(implementation_key(675)) _bstr_t IEICEmailObject2Response::GetResponseFrom ( );
__declspec(implementation_key(676)) _bstr_t IEICEmailObject2Response::GetResponseSenderName ( );
__declspec(implementation_key(677)) _variant_t IEICEmailObject2Response::GetResponseToList ( );
__declspec(implementation_key(678)) _variant_t IEICEmailObject2Response::GetResponseCCList ( );
__declspec(implementation_key(679)) _variant_t IEICEmailObject2Response::GetResponseBCCList ( );
__declspec(implementation_key(680)) _variant_t IEICEmailObject2Response::GetResponseReplyList ( );
__declspec(implementation_key(681)) _bstr_t IEICEmailObject2Response::GetResponseSubject ( );
__declspec(implementation_key(682)) _bstr_t IEICEmailObject2Response::GetResponseTextBody ( );
__declspec(implementation_key(683)) _bstr_t IEICEmailObject2Response::GetResponseImportance ( );
__declspec(implementation_key(684)) _bstr_t IEICEmailObject2Response::GetResponseContentType ( );
__declspec(implementation_key(685)) _variant_t IEICEmailObject2Response::GetResponseDate ( );
__declspec(implementation_key(686)) VARIANT_BOOL IEICEmailObject2Response::GetResponseDirty ( );
__declspec(implementation_key(687)) void IEICEmailObject2Response::PutResponseFrom ( _bstr_t Val );
__declspec(implementation_key(688)) void IEICEmailObject2Response::PutResponseSenderName ( _bstr_t Val );
__declspec(implementation_key(689)) void IEICEmailObject2Response::PutResponseToList ( const _variant_t & Val );
__declspec(implementation_key(690)) void IEICEmailObject2Response::PutResponseCCList ( const _variant_t & Val );
__declspec(implementation_key(691)) void IEICEmailObject2Response::PutResponseBCCList ( const _variant_t & Val );
__declspec(implementation_key(692)) void IEICEmailObject2Response::PutResponseReplyList ( const _variant_t & Val );
__declspec(implementation_key(693)) void IEICEmailObject2Response::PutResponseSubject ( _bstr_t Val );
__declspec(implementation_key(694)) void IEICEmailObject2Response::PutResponseTextBody ( _bstr_t Val );
__declspec(implementation_key(695)) void IEICEmailObject2Response::PutResponseImportance ( _bstr_t Val );
__declspec(implementation_key(696)) void IEICEmailObject2Response::PutResponseContentType ( _bstr_t Val );
__declspec(implementation_key(697)) void IEICEmailObject2Response::PutResponseDate ( const _variant_t & Val );
__declspec(implementation_key(698)) HRESULT IEICEmailObject2Response::SaveResponse ( );
__declspec(implementation_key(699)) HRESULT IEICEmailObject2Response::SendResponse ( );
__declspec(implementation_key(700)) HRESULT IEICEmailObject2Response::ClearResponse ( );
__declspec(implementation_key(701)) HRESULT IEICEmailObject2Response::RemoveResponseAttachment ( long Index );
__declspec(implementation_key(702)) HRESULT IEICEmailObject2Response::InsertResponseAttachment ( _bstr_t Name, _bstr_t Path, long Index );
__declspec(implementation_key(703)) _bstr_t IEICEmailObject2Ex::GetResponseFrom ( );
__declspec(implementation_key(704)) _bstr_t IEICEmailObject2Ex::GetResponseSenderName ( );
__declspec(implementation_key(705)) _variant_t IEICEmailObject2Ex::GetResponseToList ( );
__declspec(implementation_key(706)) _variant_t IEICEmailObject2Ex::GetResponseCCList ( );
__declspec(implementation_key(707)) _variant_t IEICEmailObject2Ex::GetResponseBCCList ( );
__declspec(implementation_key(708)) _variant_t IEICEmailObject2Ex::GetResponseReplyList ( );
__declspec(implementation_key(709)) _bstr_t IEICEmailObject2Ex::GetResponseSubject ( );
__declspec(implementation_key(710)) _bstr_t IEICEmailObject2Ex::GetResponseTextBody ( );
__declspec(implementation_key(711)) _bstr_t IEICEmailObject2Ex::GetResponseImportance ( );
__declspec(implementation_key(712)) _bstr_t IEICEmailObject2Ex::GetResponseContentType ( );
__declspec(implementation_key(713)) _variant_t IEICEmailObject2Ex::GetResponseDate ( );
__declspec(implementation_key(714)) VARIANT_BOOL IEICEmailObject2Ex::GetResponseDirty ( );
__declspec(implementation_key(715)) void IEICEmailObject2Ex::PutResponseFrom ( _bstr_t Val );
__declspec(implementation_key(716)) void IEICEmailObject2Ex::PutResponseSenderName ( _bstr_t Val );
__declspec(implementation_key(717)) void IEICEmailObject2Ex::PutResponseToList ( const _variant_t & Val );
__declspec(implementation_key(718)) void IEICEmailObject2Ex::PutResponseCCList ( const _variant_t & Val );
__declspec(implementation_key(719)) void IEICEmailObject2Ex::PutResponseBCCList ( const _variant_t & Val );
__declspec(implementation_key(720)) void IEICEmailObject2Ex::PutResponseReplyList ( const _variant_t & Val );
__declspec(implementation_key(721)) void IEICEmailObject2Ex::PutResponseSubject ( _bstr_t Val );
__declspec(implementation_key(722)) void IEICEmailObject2Ex::PutResponseTextBody ( _bstr_t Val );
__declspec(implementation_key(723)) void IEICEmailObject2Ex::PutResponseImportance ( _bstr_t Val );
__declspec(implementation_key(724)) void IEICEmailObject2Ex::PutResponseContentType ( _bstr_t Val );
__declspec(implementation_key(725)) void IEICEmailObject2Ex::PutResponseDate ( const _variant_t & Val );
__declspec(implementation_key(726)) HRESULT IEICEmailObject2Ex::SaveResponse ( );
__declspec(implementation_key(727)) HRESULT IEICEmailObject2Ex::SendResponse ( );
__declspec(implementation_key(728)) HRESULT IEICEmailObject2Ex::ClearResponse ( );
__declspec(implementation_key(729)) HRESULT IEICEmailObject2Ex::RemoveResponseAttachment ( long Index );
__declspec(implementation_key(730)) HRESULT IEICEmailObject2Ex::InsertResponseAttachment ( _bstr_t Name, _bstr_t Path, long Index );
__declspec(implementation_key(731)) HRESULT IEICQueueObjectWatcherAdapter::StateChangedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(732)) HRESULT IEICQueueObjectWatcherAdapter::ObjectSpecificChangeFunc ( const _variant_t & p_Function );
__declspec(implementation_key(733)) HRESULT IEICQueueObjectWatcherAdapter::ObjectDestroyedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(734)) HRESULT IEICQueueObjectWatcherAdapter::ObjectSpecificErrorFunc ( const _variant_t & p_Function );
__declspec(implementation_key(735)) HRESULT IEICQueueObjectWatcherAdapter::SubObjectChangedFunc ( const _variant_t & p_Function );
__declspec(implementation_key(736)) HRESULT IEICCallAcoustics::PlayTone ( struct IEICCallObject2 * p_Call, short p_Frequency, short p_Amplitude, short p_Duration );
__declspec(implementation_key(737)) HRESULT IEICCallAcoustics::PlayWav ( struct IEICCallObject2 * p_Call, _bstr_t p_WavFile );
__declspec(implementation_key(738)) HRESULT IEICCallAcoustics::PlayString ( struct IEICCallObject2 * p_Call, _bstr_t p_Text );
__declspec(implementation_key(739)) HRESULT IEICCallAcoustics::PlayDigits ( struct IEICCallObject2 * p_Call, _bstr_t p_Digits );
__declspec(implementation_key(740)) HRESULT IEICCallAcoustics::GetDigits ( struct IEICCallObject2 * p_Call, IUnknown * p_Callback );
__declspec(implementation_key(741)) HRESULT IEICCallAcoustics::GetTone ( struct IEICCallObject2 * p_Call, IUnknown * p_Callback );
__declspec(implementation_key(742)) HRESULT IEICCallAcoustics::PlayDualTone ( struct IEICCallObject2 * p_Call, short p_Freq1, short p_Amp1, short p_Freq2, short p_Amp2, short p_Duration );
__declspec(implementation_key(743)) _bstr_t IIWebCallbackObject::GetStartTime ( );
__declspec(implementation_key(744)) _bstr_t IIWebCallbackObject::GetStopTime ( );
__declspec(implementation_key(745)) _bstr_t IIWebCallbackObject::GetConnectTime ( );
__declspec(implementation_key(746)) _bstr_t IIWebCallbackObject::GetPhoneNumber ( );
__declspec(implementation_key(747)) IEICQueue2Ptr IIWebCallbackObject::GetQueue ( );
__declspec(implementation_key(748)) _bstr_t IIWebCallbackObject::GetSubject ( );
__declspec(implementation_key(749)) _bstr_t IIWebInstantQuestion::GetStartTime ( );
__declspec(implementation_key(750)) _bstr_t IIWebInstantQuestion::GetStopTime ( );
__declspec(implementation_key(751)) _bstr_t IIWebInstantQuestion::GetConnectTime ( );
__declspec(implementation_key(752)) _bstr_t IIWebInstantQuestion::GetUrl ( );
__declspec(implementation_key(753)) IEICQueue2Ptr IIWebInstantQuestion::GetQueue ( );
__declspec(implementation_key(754)) _bstr_t IIWebInstantQuestion::GetQuestion ( );
__declspec(implementation_key(755)) HRESULT IIWebInstantQuestion::Answer ( _bstr_t p_UserId, _bstr_t p_strMessage );
__declspec(implementation_key(756)) _bstr_t IIWebWebSession::GetStartTime ( );
__declspec(implementation_key(757)) _bstr_t IIWebWebSession::GetStopTime ( );
__declspec(implementation_key(758)) _bstr_t IIWebWebSession::GetConnectTime ( );
__declspec(implementation_key(759)) _bstr_t IIWebWebSession::GetGuid ( );
__declspec(implementation_key(760)) IEICQueue2Ptr IIWebWebSession::GetQueue ( );
__declspec(implementation_key(761)) _variant_t IIWebWebSession::GetUrlHistory ( );
__declspec(implementation_key(762)) _bstr_t IIWebWebSession::GetRegistrationInfo ( _bstr_t p_Tag );
__declspec(implementation_key(763)) HRESULT IIWebWebSession::SendPopupMessage ( _bstr_t p_UserId, _bstr_t p_strMessage );
__declspec(implementation_key(764)) HRESULT IIWebWebSession::SendURL ( _bstr_t p_UserId, _bstr_t p_strUrl );
__declspec(implementation_key(765)) HRESULT IIWebWebSession::RequestChat ( _bstr_t p_UserId );
__declspec(implementation_key(766)) _bstr_t IIWebBrowserSync::GetStartTime ( );
__declspec(implementation_key(767)) _bstr_t IIWebBrowserSync::GetStopTime ( );
__declspec(implementation_key(768)) _bstr_t IIWebBrowserSync::GetConnectTime ( );
__declspec(implementation_key(769)) _bstr_t IIWebBrowserSync::GetUrl ( );
__declspec(implementation_key(770)) HRESULT IIWebBrowserSync::SendURL ( _bstr_t p_UserId, _bstr_t p_URL );
__declspec(implementation_key(771)) HRESULT IIWebBrowserSync2::LaunchCoBrowser ( _bstr_t p_User, _bstr_t p_Password );
__declspec(implementation_key(772)) HRESULT IEICNotification::Send ( );
__declspec(implementation_key(773)) HRESULT IEICNotification::SendRequest ( struct IEICNotification * * p_RetVal, long p_TimeoutMilliseconds );
__declspec(implementation_key(774)) HRESULT IEICNotification::SendResponse ( struct IEICNotification * p_NotificationData );
__declspec(implementation_key(775)) HRESULT IEICNotification::PopStringData ( BSTR * pVal );
__declspec(implementation_key(776)) HRESULT IEICNotification::PopLongData ( long * pVal );
__declspec(implementation_key(777)) HRESULT IEICNotification::PopShortData ( short * pVal );
__declspec(implementation_key(778)) HRESULT IEICNotification::PushStringData ( _bstr_t pVal );
__declspec(implementation_key(779)) HRESULT IEICNotification::PushLongData ( long pVal );
__declspec(implementation_key(780)) HRESULT IEICNotification::PushShortData ( short pVal );
__declspec(implementation_key(781)) _bstr_t IEICNotification::GetObjectType ( );
__declspec(implementation_key(782)) void IEICNotification::PutObjectType ( _bstr_t pVal );
__declspec(implementation_key(783)) _bstr_t IEICNotification::GetObjectName ( );
__declspec(implementation_key(784)) void IEICNotification::PutObjectName ( _bstr_t pVal );
__declspec(implementation_key(785)) _bstr_t IEICNotification::GetEventName ( );
__declspec(implementation_key(786)) void IEICNotification::PutEventName ( _bstr_t pVal );
__declspec(implementation_key(787)) VARIANT_BOOL IEICNotification::GetIsResponse ( );
__declspec(implementation_key(788)) HRESULT IEICServerWatcher::ReceivedNotification ( struct IEICNotification * p_Notification );
__declspec(implementation_key(789)) HRESULT IEICNotificationSink::SetWatcher ( struct IEICServerWatcher * p_Watcher, VARIANT_BOOL p_InOwnThread );
__declspec(implementation_key(790)) HRESULT IEICNotificationSink::AddEventWatch ( _bstr_t p_Type, _bstr_t p_ObjectName, _bstr_t p_Event );
__declspec(implementation_key(791)) HRESULT IEICNotificationSink::RemoveEventWatch ( _bstr_t p_Type, _bstr_t p_ObjectName, _bstr_t p_Event );
__declspec(implementation_key(792)) HRESULT IEICNotificationSink::AddObjectWatch ( _bstr_t p_Type, _bstr_t p_ObjectName );
__declspec(implementation_key(793)) HRESULT IEICNotificationSink::RemoveObjectWatch ( _bstr_t p_Type, _bstr_t p_ObjectName );
__declspec(implementation_key(794)) HRESULT IEICNotificationSink::RemoveAllWatches ( );
__declspec(implementation_key(795)) HRESULT IEICNotificationSink::SuspendAllWatches ( );
__declspec(implementation_key(796)) HRESULT IEICNotificationSink::ResumeAllWatches ( );
__declspec(implementation_key(797)) _bstr_t ISwitchover::GetBackupName ( );
__declspec(implementation_key(798)) VARIANT_BOOL ISwitchover::GetBackupServer ( );
__declspec(implementation_key(799)) VARIANT_BOOL ISwitchover::GetRunning ( );
__declspec(implementation_key(800)) VARIANT_BOOL ISwitchover::GetInstalled ( );
__declspec(implementation_key(801)) HRESULT ISwitchover::GetSwitchoverInformation ( BSTR * pBackupMachine, VARIANT_BOOL * pIsBackup );
__declspec(implementation_key(802)) HRESULT IACDHelpMonitor::SetMarshalledCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(803)) HRESULT IACDHelpMonitor::SetThreadCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(804)) HRESULT IACDHelpMonitor::SendResponse ( struct IACDHelpRequest * p_Watcher );
__declspec(implementation_key(805)) _bstr_t IUserForwarding::GetForwardNumber ( );
__declspec(implementation_key(806)) void IUserForwarding::PutForwardNumber ( _bstr_t pVal );
__declspec(implementation_key(807)) _bstr_t IUserForwarding::GetForwardVoicemail ( );
__declspec(implementation_key(808)) void IUserForwarding::PutForwardVoicemail ( _bstr_t pVal );
__declspec(implementation_key(809)) enum ForwardingOptions IUserForwarding::GetForward ( enum ForwardingCallResults result );
__declspec(implementation_key(810)) void IUserForwarding::PutForward ( enum ForwardingCallResults result, enum ForwardingOptions pVal );
__declspec(implementation_key(811)) HRESULT IEICQueue3::Activate ( enum EICQueueTypes Type, _bstr_t Name );
__declspec(implementation_key(812)) HRESULT IEICQueue3::Deactivate ( );
__declspec(implementation_key(813)) HRESULT IEICQueue3::RequestAttributeUpdateCallback ( const _variant_t & p_attrs );
__declspec(implementation_key(814)) VARIANT_BOOL IEICQueue3::Contains ( const _variant_t & InteractionId );
__declspec(implementation_key(815)) HRESULT IEICQueue3::SetMarshalledCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(816)) HRESULT IEICQueue3::SetThreadCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(817)) VARIANT_BOOL IIWebCallbackObject2::GetSuccessful ( );
__declspec(implementation_key(818)) void IIWebCallbackObject2::PutSuccessful ( VARIANT_BOOL pVal );
__declspec(implementation_key(819)) HRESULT IEICMarshaller::CallBack ( );
__declspec(implementation_key(820)) HRESULT IEICServer2Watcher::SwitchOver ( );
__declspec(implementation_key(821)) HRESULT IEICServer2Watcher::ConnectionLost ( );
__declspec(implementation_key(822)) HRESULT IEICServer2Watcher::CSRequestedShutDown ( );
__declspec(implementation_key(823)) HRESULT IEICServer2Watcher::CSShutDown ( );
__declspec(implementation_key(824)) long IEICServer2::FullConnect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_AutoDisconnect, long p_MediaTypes );
__declspec(implementation_key(825)) long IEICServer2::RemoteConnect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_PersistentConnection, VARIANT_BOOL p_AutoDisconnect, long p_MediaTypes );
__declspec(implementation_key(826)) long IEICServer2::NotifierLogin ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, VARIANT_BOOL p_AutoDisconnect );
__declspec(implementation_key(827)) long IEICServer2::NotifierLoginCheck ( _bstr_t p_User, _bstr_t p_Password );
__declspec(implementation_key(828)) long IEICServer2::CSLogin ( _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, _bstr_t p_InitialStatus, VARIANT_BOOL p_Remote, VARIANT_BOOL p_Persistent, long p_MediaTypes );
__declspec(implementation_key(829)) HRESULT IEICServer2::CSLogout ( _bstr_t p_User, _bstr_t p_Station );
__declspec(implementation_key(830)) VARIANT_BOOL IEICServer2::GetRemote ( );
__declspec(implementation_key(831)) VARIANT_BOOL IEICServer2::GetPersistentRemoteConnection ( );
__declspec(implementation_key(832)) HRESULT IEICServer2::SetMarshalledCallback ( struct IEICServer2Watcher * p_Watcher );
__declspec(implementation_key(833)) HRESULT IEICServer2::SetThreadCallback ( struct IEICServer2Watcher * p_Watcher );
__declspec(implementation_key(834)) _bstr_t IEICServer2::ServerParameter ( _bstr_t p_Param );
__declspec(implementation_key(835)) _variant_t IEICServer2::ServerParameterList ( const _variant_t & p_Params );
__declspec(implementation_key(836)) HRESULT IEICServer2::GetTimeStamp ( short * p_Day, short * p_Month, short * p_Year, short * p_Hour, short * p_Minute, short * p_Second );
__declspec(implementation_key(837)) HRESULT IEICServer2::ForceLoginOnError ( );
__declspec(implementation_key(838)) HRESULT IClientServicesWatcher::LicenseRevoked ( _bstr_t p_StatName, _bstr_t p_License );
__declspec(implementation_key(839)) long IEICServer3::DoesStationHaveRightsToRun ( _bstr_t p_Station, _bstr_t p_License, VARIANT_BOOL p_BootOffOtherInstanceIfInUse );
__declspec(implementation_key(840)) _bstr_t IEICServer3::GetLoginCookie ( );
__declspec(implementation_key(841)) long IEICServer3::NotifierLoginWithCookie ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Cookie );
__declspec(implementation_key(842)) HRESULT IEICServer3::SetClientServicesCallback ( struct IClientServicesWatcher * p_Watcher, VARIANT_BOOL p_Marshalled );
__declspec(implementation_key(843)) HRESULT IEICServer3::SetPassword ( _bstr_t p_Password );
__declspec(implementation_key(844)) HRESULT ISIPPhone::Activate ( );
__declspec(implementation_key(845)) HRESULT ISIPPhone::Deactivate ( );
__declspec(implementation_key(846)) HRESULT ISIPPhone2::SetWatcher ( struct ISIPPhoneWatcher * pWatcher );
__declspec(implementation_key(847)) _bstr_t ICSConnectProfile::GetUserId ( );
__declspec(implementation_key(848)) void ICSConnectProfile::PutUserId ( _bstr_t pVal );
__declspec(implementation_key(849)) _bstr_t ICSConnectProfile::GetRemotePhoneNumber ( );
__declspec(implementation_key(850)) void ICSConnectProfile::PutRemotePhoneNumber ( _bstr_t pVal );
__declspec(implementation_key(851)) _bstr_t ICSConnectProfile::GetPassword ( );
__declspec(implementation_key(852)) void ICSConnectProfile::PutPassword ( _bstr_t pVal );
__declspec(implementation_key(853)) _bstr_t ICSConnectProfile::GetStatus ( );
__declspec(implementation_key(854)) void ICSConnectProfile::PutStatus ( _bstr_t pVal );
__declspec(implementation_key(855)) VARIANT_BOOL ICSConnectProfile::GetRemote ( );
__declspec(implementation_key(856)) void ICSConnectProfile::PutRemote ( VARIANT_BOOL pVal );
__declspec(implementation_key(857)) VARIANT_BOOL ICSConnectProfile::GetPersistent ( );
__declspec(implementation_key(858)) void ICSConnectProfile::PutPersistent ( VARIANT_BOOL pVal );
__declspec(implementation_key(859)) long ICSConnectProfile::GetMediaFlags ( );
__declspec(implementation_key(860)) void ICSConnectProfile::PutMediaFlags ( long pVal );
__declspec(implementation_key(861)) long ICSConnectProfile::GetSecondsNoAnswer ( );
__declspec(implementation_key(862)) void ICSConnectProfile::PutSecondsNoAnswer ( long pVal );
__declspec(implementation_key(863)) _bstr_t ICSConnectProfile::GetStationID ( );
__declspec(implementation_key(864)) void ICSConnectProfile::PutStationID ( _bstr_t pVal );
__declspec(implementation_key(865)) _bstr_t ICSConnectProfile::GetServer ( );
__declspec(implementation_key(866)) void ICSConnectProfile::PutServer ( _bstr_t pVal );
__declspec(implementation_key(867)) VARIANT_BOOL ICSConnectProfile::GetForceLoginOnError ( );
__declspec(implementation_key(868)) void ICSConnectProfile::PutForceLoginOnError ( VARIANT_BOOL pVal );
__declspec(implementation_key(869)) VARIANT_BOOL ICSConnectProfile::GetAutoDisconnect ( );
__declspec(implementation_key(870)) void ICSConnectProfile::PutAutoDisconnect ( VARIANT_BOOL pVal );
__declspec(implementation_key(871)) _bstr_t IEICDSAction::GetApplication ( );
__declspec(implementation_key(872)) VARIANT_BOOL ILicensing::QuerySpecificLicense ( _bstr_t StationName, _bstr_t userName, _bstr_t licenseName );
__declspec(implementation_key(873)) VARIANT_BOOL ILicensing::AcquireLicense ( _bstr_t StationName, _bstr_t licenseName, VARIANT_BOOL bRevokeIfNecessary, VARIANT_BOOL bOptional );
__declspec(implementation_key(874)) enum ACDStatus ILicensing::GetACDStatus ( );
__declspec(implementation_key(875)) VARIANT_BOOL ILicensing::AcquireProxyLicense ( _bstr_t UserId, _bstr_t StationName, _bstr_t machineName, long p_Cookie, _bstr_t licenseName, VARIANT_BOOL bRevokeIfNecessary, VARIANT_BOOL bOptional );
__declspec(implementation_key(876)) VARIANT_BOOL ILicensing::ReleaseProxyLicenses ( _bstr_t UserId, _bstr_t StationName, _bstr_t machineName, long p_Cookie );
__declspec(implementation_key(877)) long ILogin::ClientLoginWithProfile ( _bstr_t p_App, struct ICSConnectProfile * p_Profile );
__declspec(implementation_key(878)) long ILogin::NotifierLoginWithProfile ( _bstr_t p_App, struct ICSConnectProfile * p_Profile );
__declspec(implementation_key(879)) long ILogin::CSLoginWithProfile ( struct ICSConnectProfile * p_Profile );
__declspec(implementation_key(880)) long ILogin::CSProxyLoginWithProfile ( struct ICSConnectProfile * p_Profile, _bstr_t p_MachineName, VARIANT_BOOL p_AuthenticationRequired, long * p_Cookie );
__declspec(implementation_key(881)) long ILogin::CSProxyLogoutWithProfile ( _bstr_t p_UserId, _bstr_t p_StationId, long p_Cookie );
__declspec(implementation_key(882)) HRESULT IExtendedDial::DialFromWorkgroup ( _bstr_t p_Number, _bstr_t p_Workgroup );
__declspec(implementation_key(883)) _bstr_t IDialParameters::GetUser ( );
__declspec(implementation_key(884)) void IDialParameters::PutUser ( _bstr_t pVal );
__declspec(implementation_key(885)) _bstr_t IDialParameters::GetStation ( );
__declspec(implementation_key(886)) void IDialParameters::PutStation ( _bstr_t pVal );
__declspec(implementation_key(887)) _bstr_t IDialParameters::Getnumber ( );
__declspec(implementation_key(888)) void IDialParameters::Putnumber ( _bstr_t pVal );
__declspec(implementation_key(889)) short IDialParameters::GetTimeoutInSeconds ( );
__declspec(implementation_key(890)) void IDialParameters::PutTimeoutInSeconds ( short pVal );
__declspec(implementation_key(891)) VARIANT_BOOL IDialParameters::GetPerformCallAnalysis ( );
__declspec(implementation_key(892)) void IDialParameters::PutPerformCallAnalysis ( VARIANT_BOOL pVal );
__declspec(implementation_key(893)) VARIANT_BOOL IDialParameters::GetCallHandlerOnSuccess ( );
__declspec(implementation_key(894)) void IDialParameters::PutCallHandlerOnSuccess ( VARIANT_BOOL pVal );
__declspec(implementation_key(895)) _bstr_t IDialParameters::GetWorkgroup ( );
__declspec(implementation_key(896)) void IDialParameters::PutWorkgroup ( _bstr_t pVal );
__declspec(implementation_key(897)) HRESULT IExtendedDial2::DialWithParameters ( struct IDialParameters * p_DialParameters );
__declspec(implementation_key(898)) HRESULT IEICClientCOMUpdate::StartMonitor ( _bstr_t p_strCommandLine, _bstr_t p_strCurrentDir );
__declspec(implementation_key(899)) HRESULT IEICClientCOMUpdate::StopMonitor ( );
__declspec(implementation_key(900)) HRESULT IEICClientCOMUpdate::SetICUserInfo ( _bstr_t p_strServer, _bstr_t p_strUser, _bstr_t p_strPasswd );
__declspec(implementation_key(901)) VARIANT_BOOL IEICClientCOMUpdate::DownloadUpdates ( );
__declspec(implementation_key(902)) HRESULT IEICClientCOMUpdate::ApplyUpdatesAfterShutdown ( );
__declspec(implementation_key(903)) HRESULT IEICClientCOMUpdate::SetRestartMsg ( _bstr_t p_strMessage );
__declspec(implementation_key(904)) HRESULT IEICUserEx2Watcher::StatusChanged ( struct IEICUserEx2 * p_User, _bstr_t p_StatusKey, VARIANT_BOOL p_IsDND, DATE p_UntilDateTime, VARIANT_BOOL p_HasDate, VARIANT_BOOL p_HasTime );
__declspec(implementation_key(905)) HRESULT IEICUserEx2Watcher::UserChanged ( struct IEICUserEx2 * p_User );
__declspec(implementation_key(906)) HRESULT IEICUserEx2Watcher::UserLoginChanged ( struct IEICUserEx2 * p_User, _bstr_t p_Station, VARIANT_BOOL p_Login );
__declspec(implementation_key(907)) HRESULT IEICUserEx2Watcher::UserOnPhoneChanged ( struct IEICUserEx2 * p_User, VARIANT_BOOL p_OnPhone );
__declspec(implementation_key(908)) HRESULT IEICUserEx2::SetMarshalledCallback ( IUnknown * p_Handler );
__declspec(implementation_key(909)) HRESULT IEICUserEx2::SetThreadCallback ( IUnknown * p_Handler );
__declspec(implementation_key(910)) VARIANT_BOOL IEICUserEx2::GetStatusHasDate ( );
__declspec(implementation_key(911)) VARIANT_BOOL IEICUserEx2::GetStatusHasTime ( );
__declspec(implementation_key(912)) HRESULT IEICUserEx2::SetUntilDateTimeEx ( const _variant_t & dateTime, VARIANT_BOOL hasDate, VARIANT_BOOL hasTime );
__declspec(implementation_key(913)) _variant_t IEICUserEx2::GetNextStatusMessageV ( );
__declspec(implementation_key(914)) _variant_t IEICUserEx2::GetDirectoryList ( );
__declspec(implementation_key(915)) IEICDirectoryPtr IEICUserEx2::GetDirectory ( _bstr_t p_SourceName, long p_Type );
__declspec(implementation_key(916)) IEICWorkgroupPtr IEICUserEx2::GetWorkgroup ( _bstr_t p_Name );
__declspec(implementation_key(917)) IEICQueuePtr IEICUserEx2::GetQueue ( _bstr_t p_Name, long p_Type );
__declspec(implementation_key(918)) long IEICUserEx2::GetAvailableActions ( );
__declspec(implementation_key(919)) long IEICUserEx2::GetStationVolume ( );
__declspec(implementation_key(920)) void IEICUserEx2::PutStationVolume ( long p_Volume );
__declspec(implementation_key(921)) VARIANT_BOOL IEICUserEx2::isOnPhoneForUser ( _bstr_t p_User );
__declspec(implementation_key(922)) VARIANT_BOOL IEICUserEx2::isLoggedInForUser ( _bstr_t p_User );
__declspec(implementation_key(923)) _bstr_t IEICUser3::GetFirstName ( );
__declspec(implementation_key(924)) _bstr_t IEICUser3::GetLastName ( );
__declspec(implementation_key(925)) VARIANT_BOOL IEICUser3::GetisACD ( );
__declspec(implementation_key(926)) IUserForwardingPtr IEICUser3::GetForwarding ( );
__declspec(implementation_key(927)) void IEICUser3::PutForwarding ( struct IUserForwarding * pVal );
__declspec(implementation_key(928)) VARIANT_BOOL IEICUser3::GetExcludeFromDirectory ( );
__declspec(implementation_key(929)) _bstr_t IEICUser3::GetDepartmentName ( );
__declspec(implementation_key(930)) unsigned long IEICUser3::GetMediaSupportFlags ( );
__declspec(implementation_key(931)) _variant_t IEICUser3::GetPeerServerNames ( );
__declspec(implementation_key(932)) DATE IEICUser3::GetStatusChangeTime ( );
__declspec(implementation_key(933)) HRESULT IEICDirectory::StartMemberList ( );
__declspec(implementation_key(934)) HRESULT IEICDirectory::GetNextMember ( long * p_Id );
__declspec(implementation_key(935)) HRESULT IEICDirectory::Connect ( _bstr_t p_SourceName, long p_Type );
__declspec(implementation_key(936)) VARIANT_BOOL IEICDirectory::GetIsPublic ( );
__declspec(implementation_key(937)) HRESULT IEICDirectory::SetChangeHandler ( struct IEICDirectoryWatcher * p_Watcher );
__declspec(implementation_key(938)) HRESULT IEICDirectory::SetUser ( _bstr_t p_User, _bstr_t p_Password );
__declspec(implementation_key(939)) HRESULT IEICDirectoryWatcher::MemberChanged ( struct IEICDirectory * p_Directory, long p_Id );
__declspec(implementation_key(940)) HRESULT IEICDirectoryWatcher::MemberRemoved ( struct IEICDirectory * p_Directory, long p_Id );
__declspec(implementation_key(941)) HRESULT IEICDirectoryWatcher::MemberAdded ( struct IEICDirectory * p_Directory, long p_Id );
__declspec(implementation_key(942)) HRESULT IEICDirectory2::SetMarshalledCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(943)) HRESULT IEICDirectory2::SetThreadCallback ( IUnknown * p_Watcher );
__declspec(implementation_key(944)) _bstr_t IEICDirectory2::GetName ( );
__declspec(implementation_key(945)) long IEICDirectory2::GetType ( );
__declspec(implementation_key(946)) HRESULT IEICDirectoryEntry::Load ( struct IEICDirectory * p_Directory, long p_Id );
__declspec(implementation_key(947)) HRESULT IEICDirectoryEntry::Create ( struct IEICDirectory * p_Directory );
__declspec(implementation_key(948)) HRESULT IEICDirectoryEntry::Commit ( );
__declspec(implementation_key(949)) HRESULT IEICDirectoryEntry::Rollback ( );
__declspec(implementation_key(950)) _bstr_t IEICDirectoryEntry::GetUserId ( );
__declspec(implementation_key(951)) _bstr_t IEICDirectoryEntry::GetStatus ( );
__declspec(implementation_key(952)) _bstr_t IEICDirectoryEntry::GetLastName ( );
__declspec(implementation_key(953)) void IEICDirectoryEntry::PutLastName ( _bstr_t pVal );
__declspec(implementation_key(954)) _bstr_t IEICDirectoryEntry::GetFirstName ( );
__declspec(implementation_key(955)) void IEICDirectoryEntry::PutFirstName ( _bstr_t pVal );
__declspec(implementation_key(956)) void IEICDirectoryEntry::PutName ( _bstr_t pVal );
__declspec(implementation_key(957)) _bstr_t IEICDirectoryEntry::GetName ( );
__declspec(implementation_key(958)) void IEICDirectoryEntry::PutAddress ( _bstr_t pVal );
__declspec(implementation_key(959)) _bstr_t IEICDirectoryEntry::GetAddress ( );
__declspec(implementation_key(960)) void IEICDirectoryEntry::PutCity ( _bstr_t pVal );
__declspec(implementation_key(961)) _bstr_t IEICDirectoryEntry::GetCity ( );
__declspec(implementation_key(962)) void IEICDirectoryEntry::PutState ( _bstr_t pVal );
__declspec(implementation_key(963)) _bstr_t IEICDirectoryEntry::GetState ( );
__declspec(implementation_key(964)) void IEICDirectoryEntry::PutZip ( _bstr_t pVal );
__declspec(implementation_key(965)) _bstr_t IEICDirectoryEntry::GetZip ( );
__declspec(implementation_key(966)) void IEICDirectoryEntry::PutPhone ( _bstr_t pVal );
__declspec(implementation_key(967)) _bstr_t IEICDirectoryEntry::GetPhone ( );
__declspec(implementation_key(968)) void IEICDirectoryEntry::PutCompany ( _bstr_t pVal );
__declspec(implementation_key(969)) _bstr_t IEICDirectoryEntry::GetCompany ( );
__declspec(implementation_key(970)) void IEICDirectoryEntry::PutTitle ( _bstr_t pVal );
__declspec(implementation_key(971)) _bstr_t IEICDirectoryEntry::GetTitle ( );
__declspec(implementation_key(972)) void IEICDirectoryEntry::PutDepartment ( _bstr_t pVal );
__declspec(implementation_key(973)) _bstr_t IEICDirectoryEntry::GetDepartment ( );
__declspec(implementation_key(974)) void IEICDirectoryEntry::PutBusinessAddress ( _bstr_t pVal );
__declspec(implementation_key(975)) _bstr_t IEICDirectoryEntry::GetBusinessAddress ( );
__declspec(implementation_key(976)) void IEICDirectoryEntry::PutBusinessCity ( _bstr_t pVal );
__declspec(implementation_key(977)) _bstr_t IEICDirectoryEntry::GetBusinessCity ( );
__declspec(implementation_key(978)) void IEICDirectoryEntry::PutBusinessState ( _bstr_t pVal );
__declspec(implementation_key(979)) _bstr_t IEICDirectoryEntry::GetBusinessState ( );
__declspec(implementation_key(980)) void IEICDirectoryEntry::PutBusinessZip ( _bstr_t pVal );
__declspec(implementation_key(981)) _bstr_t IEICDirectoryEntry::GetBusinessZip ( );
__declspec(implementation_key(982)) void IEICDirectoryEntry::PutBusinessCountry ( _bstr_t pVal );
__declspec(implementation_key(983)) _bstr_t IEICDirectoryEntry::GetBusinessCountry ( );
__declspec(implementation_key(984)) void IEICDirectoryEntry::PutBusinessEMail ( _bstr_t pVal );
__declspec(implementation_key(985)) _bstr_t IEICDirectoryEntry::GetBusinessEMail ( );
__declspec(implementation_key(986)) void IEICDirectoryEntry::PutAssistant ( _bstr_t pVal );
__declspec(implementation_key(987)) _bstr_t IEICDirectoryEntry::GetAssistant ( );
__declspec(implementation_key(988)) void IEICDirectoryEntry::PutHomeCountry ( _bstr_t pVal );
__declspec(implementation_key(989)) _bstr_t IEICDirectoryEntry::GetHomeCountry ( );
__declspec(implementation_key(990)) void IEICDirectoryEntry::PutHomeEMail ( _bstr_t pVal );
__declspec(implementation_key(991)) _bstr_t IEICDirectoryEntry::GetHomeEMail ( );
__declspec(implementation_key(992)) void IEICDirectoryEntry::PutBusinessPhone ( _bstr_t pVal );
__declspec(implementation_key(993)) _bstr_t IEICDirectoryEntry::GetBusinessPhone ( );
__declspec(implementation_key(994)) void IEICDirectoryEntry::PutBusinessPhone2 ( _bstr_t pVal );
__declspec(implementation_key(995)) _bstr_t IEICDirectoryEntry::GetBusinessPhone2 ( );
__declspec(implementation_key(996)) void IEICDirectoryEntry::PutHomePhone2 ( _bstr_t pVal );
__declspec(implementation_key(997)) _bstr_t IEICDirectoryEntry::GetHomePhone2 ( );
__declspec(implementation_key(998)) void IEICDirectoryEntry::PutMobile ( _bstr_t pVal );
__declspec(implementation_key(999)) _bstr_t IEICDirectoryEntry::GetMobile ( );
__declspec(implementation_key(1000)) void IEICDirectoryEntry::PutFax ( _bstr_t pVal );
__declspec(implementation_key(1001)) _bstr_t IEICDirectoryEntry::GetFax ( );
__declspec(implementation_key(1002)) void IEICDirectoryEntry::PutPager ( _bstr_t pVal );
__declspec(implementation_key(1003)) _bstr_t IEICDirectoryEntry::GetPager ( );
__declspec(implementation_key(1004)) void IEICDirectoryEntry::PutAssistantPhone ( _bstr_t pVal );
__declspec(implementation_key(1005)) _bstr_t IEICDirectoryEntry::GetAssistantPhone ( );
__declspec(implementation_key(1006)) void IEICDirectoryEntry::PutUrl ( _bstr_t pVal );
__declspec(implementation_key(1007)) _bstr_t IEICDirectoryEntry::GetUrl ( );
__declspec(implementation_key(1008)) void IEICDirectoryEntry::PutPrimaryNumber ( _bstr_t pVal );
__declspec(implementation_key(1009)) _bstr_t IEICDirectoryEntry::GetPrimaryNumber ( );
__declspec(implementation_key(1010)) void IEICDirectoryEntry::PutNotes ( _bstr_t pVal );
__declspec(implementation_key(1011)) _bstr_t IEICDirectoryEntry::GetNotes ( );
__declspec(implementation_key(1012)) HRESULT IEICDirectory2Watcher::MemberChanged ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id );
__declspec(implementation_key(1013)) HRESULT IEICDirectory2Watcher::MemberRemoved ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id );
__declspec(implementation_key(1014)) HRESULT IEICDirectory2Watcher::MemberAdded ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id );
__declspec(implementation_key(1015)) HRESULT IEICDirectory2Watcher::MemberDisplayChanged ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id );
__declspec(implementation_key(1016)) HRESULT IEICDirectory2Ex::DeleteEntry ( long p_Id );
__declspec(implementation_key(1017)) HRESULT IEIC_UMFMessageWatcher::ResponseReceived ( struct IEIC_UMFMessage * pResponse );
__declspec(implementation_key(1018)) HRESULT IEIC_UMFMessageWatcher::Error ( struct IErrorInfo * p_Info );
__declspec(implementation_key(1019)) HRESULT IEIC_UMFMessage::Initialize ( long p_dwServerTimeoutMsec );
__declspec(implementation_key(1020)) HRESULT IEIC_UMFMessage::Send ( _bstr_t p_ObjectId, _bstr_t p_EventId, long p_TimeoutSec, struct IEIC_UMFMessageWatcher * p_Responder );
__declspec(implementation_key(1021)) HRESULT IEIC_UMFMessage::CancelResponseWait ( );
__declspec(implementation_key(1022)) HRESULT IEIC_UMFMessage::AddInteger ( long p_Int );
__declspec(implementation_key(1023)) HRESULT IEIC_UMFMessage::AddString ( _bstr_t p_String );
__declspec(implementation_key(1024)) HRESULT IEIC_UMFMessage::GetInteger ( long * p_Int );
__declspec(implementation_key(1025)) HRESULT IEIC_UMFMessage::GetString ( BSTR * p_String );
__declspec(implementation_key(1026)) HRESULT IEIC_UMFMessage::Connect ( _bstr_t p_Notifier, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_App );
__declspec(implementation_key(1027)) void IEIC_UMFMessage::PutId ( long _arg1 );
__declspec(implementation_key(1028)) HRESULT IEIC_UMFMessage2::SendMarshalled ( _bstr_t p_ObjectId, _bstr_t p_EventId, long p_TimeoutSec, struct IEIC_UMFMessageWatcher * p_Responder );
#pragma stop_map_region

} // namespace EICClientCOMLib

#pragma pack(pop)
