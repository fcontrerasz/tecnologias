// Created by Microsoft (R) C/C++ Compiler Version 13.10.6030 (a1749729).
//
// d:\backup\cvsclient\generic.net\release\clientcoma.tli
//
// Wrapper implementations for Win32 type library C:\Program Files\Interactive Intelligence\ClientCOMA.dll
// compiler-generated file created 12/19/06 at 14:57:33 - DO NOT EDIT!

#pragma once

//
// interface IEICQueueWatcher wrapper method implementations
//

inline HRESULT IEICQueueWatcher::ObjectAdded ( long p_Type, long p_Id ) {
    HRESULT _hr = raw_ObjectAdded(p_Type, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueWatcher::ObjectChanged ( long p_Type, long p_Id ) {
    HRESULT _hr = raw_ObjectChanged(p_Type, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueWatcher::ObjectRemoved ( long p_Type, long p_Id ) {
    HRESULT _hr = raw_ObjectRemoved(p_Type, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueue wrapper method implementations
//

inline HRESULT IEICQueue::Connect ( long p_Type, _bstr_t p_Name ) {
    HRESULT _hr = raw_Connect(p_Type, p_Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueue::SetChangeHandler ( struct IEICQueueWatcher * p_Handler ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICQueue::GetActiveMonitor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ActiveMonitor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICQueue::PutActiveMonitor ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ActiveMonitor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IEICQueue::GetObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IEICQueue::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEICQueue::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IEICQueue::StartObjectsList ( ) {
    HRESULT _hr = raw_StartObjectsList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueue::GetNextObject ( long * p_Type, long * p_Id ) {
    HRESULT _hr = raw_GetNextObject(p_Type, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueObject2 wrapper method implementations
//

inline long IEICQueueObject2::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICQueueObject2::PutId ( long pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IEICQueueObject2::GetState ( ) {
    long _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEICQueueObject2::GetStateString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StateString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICQueueObject2::PutStateString ( _bstr_t pVal ) {
    HRESULT _hr = put_StateString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICQueueObject2::GetLocalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICQueueObject2::GetLocalLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICQueueObject2::GetLocalId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICQueueObject2::GetRemoteName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICQueueObject2::PutRemoteName ( _bstr_t pVal ) {
    HRESULT _hr = put_RemoteName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICQueueObject2::GetRemoteLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICQueueObject2::GetRemoteId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE IEICQueueObject2::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IEICQueueObject2::GetDirection ( ) {
    short _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICQueueObject2::GetisHeld ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isHeld(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICQueueObject2::GetisRecording ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isRecording(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICQueueObject2::GetisPaused ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPaused(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICQueueObject2::GetisMuted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isMuted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICQueueObject2::GetisPrivate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPrivate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICQueueObject2::GetisMonitored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isMonitored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICQueueObject2::GetisParty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isParty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICQueueObject2::GetConferenceId ( ) {
    long _result = 0;
    HRESULT _hr = get_ConferenceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICQueueObject2::Pickup ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Pickup(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::Disconnect ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Disconnect(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::Listen ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Listen(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::Record ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Record(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::Mute ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Mute(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::Hold ( _bstr_t p_ToUserQueue, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Hold(p_ToUserQueue, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::Private ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_Private(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::SendToVoiceMail ( struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_SendToVoiceMail(p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::BlindTransfer ( _bstr_t p_ToNumber, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_BlindTransfer(p_ToNumber, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::ConsultTransfer ( long p_WithCall, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_ConsultTransfer(p_WithCall, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::GetCreationTime ( short * hour, short * minute, short * second ) {
    HRESULT _hr = raw_GetCreationTime(hour, minute, second);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::GetNamedAttribute ( _bstr_t p_Name, BSTR * p_Value ) {
    HRESULT _hr = raw_GetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::SetNamedAttribute ( _bstr_t p_Name, _bstr_t p_Value ) {
    HRESULT _hr = raw_SetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::GetNameAttributeList ( const _variant_t & p_Names, VARIANT * p_Values ) {
    HRESULT _hr = raw_GetNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::SetNameAttributeList ( const _variant_t & p_Names, const _variant_t & p_Values ) {
    HRESULT _hr = raw_SetNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IEICQueueObject2::GetUserQueueName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserQueueName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICQueueObject2::GetStationName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StationName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICQueueObject2::GetLineName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICQueueObject2::GetQueueList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_QueueList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IEICQueueObject2::PickupForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_PickupForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::DisconnectForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_DisconnectForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::ListenForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_ListenForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::RecordForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_RecordForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::MuteForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_MuteForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::HoldForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_ToUserQueue, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_HoldForUser(p_User, p_Station, p_ToUserQueue, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::PrivateForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_PrivateForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::SendToVoiceMailForUser ( _bstr_t p_User, _bstr_t p_Station, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_SendToVoiceMailForUser(p_User, p_Station, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::BlindTransferForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_ToNumber, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_BlindTransferForUser(p_User, p_Station, p_ToNumber, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::ConsultTransferForUser ( _bstr_t p_User, _bstr_t p_Station, long p_WithCall, struct IEICQueue * p_IfOnQueue ) {
    HRESULT _hr = raw_ConsultTransferForUser(p_User, p_Station, p_WithCall, p_IfOnQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2::PauseForUser ( _bstr_t p_User, _bstr_t p_Station ) {
    HRESULT _hr = raw_PauseForUser(p_User, p_Station);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IEICQueueObject2::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEICQueueObject2::GetNamedAttributeS ( _bstr_t p_Name ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetNamedAttributeS(p_Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICQueueObject2::GetNameAttributeListS ( const _variant_t & p_Names ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetNameAttributeListS(p_Names, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICQueueObject2::GetCreationTimeS ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCreationTimeS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IEICQueueObject2::GetValidActions ( _bstr_t p_User, _bstr_t p_Station ) {
    long _result = 0;
    HRESULT _hr = raw_GetValidActions(p_User, p_Station, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICQueue2 wrapper method implementations
//

inline _variant_t IEICQueue2::GetQueueObjects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_QueueObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IEICQueueObject2Ptr IEICQueue2::GetNextQueueObject ( ) {
    struct IEICQueueObject2 * _result = 0;
    HRESULT _hr = raw_GetNextQueueObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueObject2Ptr(_result, false);
}

inline HRESULT IEICQueue2::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueue2::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueue2::ConnectClient ( _bstr_t p_Name, _bstr_t p_Desc ) {
    HRESULT _hr = raw_ConnectClient(p_Name, p_Desc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueue2::DisconnectClient ( _bstr_t p_Name ) {
    HRESULT _hr = raw_DisconnectClient(p_Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IEICQueue2::GetTotalCallsToday ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalCallsToday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICQueue2::GetTotalActiveTimeToday ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalActiveTimeToday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICQueue2::GetLongestCallToday ( ) {
    long _result = 0;
    HRESULT _hr = get_LongestCallToday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICQueue2::GetAvgCallDurationToday ( ) {
    long _result = 0;
    HRESULT _hr = get_AvgCallDurationToday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICQueue2::GetAbandonedCallsToday ( ) {
    long _result = 0;
    HRESULT _hr = get_AbandonedCallsToday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICQueue2Watcher wrapper method implementations
//

inline HRESULT IEICQueue2Watcher::ObjectAdded ( struct IEICQueue2 * p_Queue, struct IEICQueueObject2 * p_Object ) {
    HRESULT _hr = raw_ObjectAdded(p_Queue, p_Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueue2Watcher::ObjectChanged ( struct IEICQueue2 * p_Queue, struct IEICQueueObject2 * p_Object ) {
    HRESULT _hr = raw_ObjectChanged(p_Queue, p_Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueue2Watcher::ObjectRemoved ( struct IEICQueue2 * p_Queue, long p_Id ) {
    HRESULT _hr = raw_ObjectRemoved(p_Queue, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueue2Watcher::StatisticsUpdated ( struct IEICQueue2 * p_Queue ) {
    HRESULT _hr = raw_StatisticsUpdated(p_Queue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueObject2Watcher wrapper method implementations
//

inline HRESULT IEICQueueObject2Watcher::StateChanged ( struct IEICQueueObject2 * p_Object, long p_NewState, _bstr_t p_StateString ) {
    HRESULT _hr = raw_StateChanged(p_Object, p_NewState, p_StateString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2Watcher::SubObjectChanged ( struct IEICQueueObject2 * p_Object, struct IEICQueueObject2 * p_SubObject ) {
    HRESULT _hr = raw_SubObjectChanged(p_Object, p_SubObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2Watcher::ObjectSpecificError ( struct IEICQueueObject2 * p_Object, long p_Error ) {
    HRESULT _hr = raw_ObjectSpecificError(p_Object, p_Error);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObject2Watcher::ObjectDestroyed ( struct IEICQueueObject2 * p_Object ) {
    HRESULT _hr = raw_ObjectDestroyed(p_Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICChatObject2 wrapper method implementations
//

inline HRESULT IEICChatObject2::SendString ( _bstr_t p_String ) {
    HRESULT _hr = raw_SendString(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject2::SendURL ( _bstr_t p_URL ) {
    HRESULT _hr = raw_SendURL(p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject2::SendFile ( _bstr_t p_FileName, _bstr_t p_FileData ) {
    HRESULT _hr = raw_SendFile(p_FileName, p_FileData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject2::RequestSession ( _bstr_t p_RequestingUserName, _bstr_t p_RequestingEmail, _bstr_t p_RequestingPhone, _bstr_t p_RequestingLocation, _bstr_t p_DestinationQueueName, _bstr_t p_SubjectOfChat ) {
    HRESULT _hr = raw_RequestSession(p_RequestingUserName, p_RequestingEmail, p_RequestingPhone, p_RequestingLocation, p_DestinationQueueName, p_SubjectOfChat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject2::RequestSessionForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_RequestingUserName, _bstr_t p_RequestingEmail, _bstr_t p_RequestingPhone, _bstr_t p_RequestingLocation, _bstr_t p_DestinationQueueName, _bstr_t p_SubjectOfChat ) {
    HRESULT _hr = raw_RequestSessionForUser(p_User, p_Station, p_RequestingUserName, p_RequestingEmail, p_RequestingPhone, p_RequestingLocation, p_DestinationQueueName, p_SubjectOfChat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICChatObject2Watcher wrapper method implementations
//

inline HRESULT IEICChatObject2Watcher::ReceivedString ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_String ) {
    HRESULT _hr = raw_ReceivedString(p_Object, p_User, p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject2Watcher::ReceivedUrl ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_URL ) {
    HRESULT _hr = raw_ReceivedUrl(p_Object, p_User, p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject2Watcher::ReceivedFile ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_FileName, _bstr_t p_FileData ) {
    HRESULT _hr = raw_ReceivedFile(p_Object, p_User, p_FileName, p_FileData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCallObject2Watcher wrapper method implementations
//

inline HRESULT IEICCallObject2Watcher::StatusChange ( struct IEICQueueObject2 * p_Object ) {
    HRESULT _hr = raw_StatusChange(p_Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICChatObject2Watcher2 wrapper method implementations
//

inline HRESULT IEICChatObject2Watcher2::ReceivedString ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_String ) {
    HRESULT _hr = raw_ReceivedString(p_Object, p_User, p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject2Watcher2::ReceivedUrl ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_URL ) {
    HRESULT _hr = raw_ReceivedUrl(p_Object, p_User, p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject2Watcher2::ReceivedFile ( struct IEICChatObject2 * p_Object, _bstr_t p_User, _bstr_t p_FileName, _bstr_t p_FileData ) {
    HRESULT _hr = raw_ReceivedFile(p_Object, p_User, p_FileName, p_FileData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCallObject2Watcher2 wrapper method implementations
//

inline HRESULT IEICCallObject2Watcher2::StatusChange ( struct IEICQueueObject2 * p_Object ) {
    HRESULT _hr = raw_StatusChange(p_Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueStatData wrapper method implementations
//

inline long IEICQueueStatData::GetPeriodLength ( ) {
    long _result = 0;
    HRESULT _hr = get_PeriodLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICQueueStatData::GetNumberOfCalls ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfCalls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICQueueStatData::GetNumberAnswered ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberAnswered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICQueueStatData::GetNumberCompleted ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberCompleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IEICQueueStatData::GetAverageWaitTime ( ) {
    double _result = 0;
    HRESULT _hr = get_AverageWaitTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IEICQueueStatData::GetAverageTalkTime ( ) {
    double _result = 0;
    HRESULT _hr = get_AverageTalkTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICQueueStatData::GetAbandons ( short * p_ArraySize, VARIANT * p_AbandonList ) {
    HRESULT _hr = raw_GetAbandons(p_ArraySize, p_AbandonList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueStatData::GetServiceLevels ( short * p_ArraySize, VARIANT * p_ServiceList ) {
    HRESULT _hr = raw_GetServiceLevels(p_ArraySize, p_ServiceList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueStats wrapper method implementations
//

inline long IEICQueueStats::GetCallsWaiting ( ) {
    long _result = 0;
    HRESULT _hr = get_CallsWaiting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICQueueStats::GetCallsAnswered ( ) {
    long _result = 0;
    HRESULT _hr = get_CallsAnswered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IEICQueueStats::GetLongestWaiting ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestWaiting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IEICQueueStats::GetLongestTalkTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestTalkTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICQueueStats::GetAgentsLoggedIn ( ) {
    long _result = 0;
    HRESULT _hr = get_AgentsLoggedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICQueueStats::GetAgentsAvailable ( ) {
    long _result = 0;
    HRESULT _hr = get_AgentsAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICQueueStats::GetAbandonPeriods ( short * p_ArraySize, VARIANT * p_AbandonTimes ) {
    HRESULT _hr = raw_GetAbandonPeriods(p_ArraySize, p_AbandonTimes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueStats::GetServiceLevelPeriods ( short * p_ArraySize, VARIANT * p_ServiceTimes ) {
    HRESULT _hr = raw_GetServiceLevelPeriods(p_ArraySize, p_ServiceTimes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IEICQueueStatDataPtr IEICQueueStats::GetCurrentPeriod ( ) {
    struct IEICQueueStatData * _result = 0;
    HRESULT _hr = get_CurrentPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueStatDataPtr(_result, false);
}

inline IEICQueueStatDataPtr IEICQueueStats::GetPreviousPeriod ( ) {
    struct IEICQueueStatData * _result = 0;
    HRESULT _hr = get_PreviousPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueStatDataPtr(_result, false);
}

inline IEICQueueStatDataPtr IEICQueueStats::GetCurrentShift ( ) {
    struct IEICQueueStatData * _result = 0;
    HRESULT _hr = get_CurrentShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueStatDataPtr(_result, false);
}

inline IEICQueueStatDataPtr IEICQueueStats::GetPreviousShift ( ) {
    struct IEICQueueStatData * _result = 0;
    HRESULT _hr = get_PreviousShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueStatDataPtr(_result, false);
}

//
// interface IEICQueueStatWatcher wrapper method implementations
//

inline HRESULT IEICQueueStatWatcher::Change ( struct IEICQueueStats * p_Data ) {
    HRESULT _hr = raw_Change(p_Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICWorkgroupStats wrapper method implementations
//

inline long IEICWorkgroupStats::GetAgents ( ) {
    long _result = 0;
    HRESULT _hr = get_Agents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICWorkgroupStats::GetAgentsLoggedIn ( ) {
    long _result = 0;
    HRESULT _hr = get_AgentsLoggedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICWorkgroupStats::GetAgentsAvailable ( ) {
    long _result = 0;
    HRESULT _hr = get_AgentsAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IEICWorkgroupStats::GetLongestAvailable ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICWorkgroupStats::GetNumberOnInbound ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOnInbound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICWorkgroupStats::GetNumberOnInboundInACW ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOnInboundInACW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IEICWorkgroupStats::GetLongestInbound ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestInbound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICWorkgroupStats::GetNumberOnOutbound ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOnOutbound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICWorkgroupStats::GetNumberOnOutboundInACW ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOnOutboundInACW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IEICWorkgroupStats::GetLongestOutbound ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestOutbound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICWorkgroupStats::GetNumberNonACD ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberNonACD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IEICWorkgroupStats::GetLongestNonACD ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LongestNonACD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICWorkgroupStats::GetStatusSummaryInfo ( short * p_ArraySize, VARIANT * p_StatusKeys, VARIANT * p_StatusCounts ) {
    HRESULT _hr = raw_GetStatusSummaryInfo(p_ArraySize, p_StatusKeys, p_StatusCounts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICWorkgroupStatWatcher wrapper method implementations
//

inline HRESULT IEICWorkgroupStatWatcher::Change ( struct IEICWorkgroupStats * p_Data ) {
    HRESULT _hr = raw_Change(p_Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICUserWatcher wrapper method implementations
//

inline HRESULT IEICUserWatcher::StatusChanged ( _bstr_t p_NewStatus, DATE p_UntilDateTime ) {
    HRESULT _hr = raw_StatusChanged(p_NewStatus, p_UntilDateTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUserWatcher::UserChanged ( ) {
    HRESULT _hr = raw_UserChanged();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUserWatcher::UserLoginChanged ( _bstr_t p_Station, VARIANT_BOOL p_Login ) {
    HRESULT _hr = raw_UserLoginChanged(p_Station, p_Login);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICUser wrapper method implementations
//

inline _bstr_t IEICUser::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICUser::PutId ( _bstr_t pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICUser::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICUser::GetAvailableStatusMessages ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AvailableStatusMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IEICUser::GetStatusMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICUser::PutStatusMessage ( _bstr_t pVal ) {
    HRESULT _hr = put_StatusMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUser::GetisDND ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isDND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IEICUser::GetUntilDateTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_UntilDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUser::PutUntilDateTime ( DATE pVal ) {
    HRESULT _hr = put_UntilDateTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICUser::SetUntilDateTime ( short year, short month, short day, short hour, short minute ) {
    HRESULT _hr = raw_SetUntilDateTime(year, month, day, hour, minute);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::GetUntilDateTime ( short * year, short * month, short * day, short * hour, short * minute ) {
    HRESULT _hr = raw_GetUntilDateTime(year, month, day, hour, minute);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICUser::GetisOnPhone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isOnPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEICUser::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IEICUser::SetChangeHandler ( struct IEICUserWatcher * p_Handler ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::Call ( long * p_CallId ) {
    HRESULT _hr = raw_Call(p_CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::Workgroups ( VARIANT * p_Workgroups ) {
    HRESULT _hr = raw_Workgroups(p_Workgroups);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::ViewableWorkgroups ( VARIANT * p_Workgroups ) {
    HRESULT _hr = raw_ViewableWorkgroups(p_Workgroups);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::AccessibleQueues ( VARIANT * p_Queues ) {
    HRESULT _hr = raw_AccessibleQueues(p_Queues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICUser::GetCanRecord ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanRecord(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICUser::GetCanListen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanListen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICUser::GetCanMakePrivate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanMakePrivate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICUser::StartWorkgroupsList ( ) {
    HRESULT _hr = raw_StartWorkgroupsList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::GetNextWorkgroup ( BSTR * p_Name ) {
    HRESULT _hr = raw_GetNextWorkgroup(p_Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::StartViewableWorkgroupsList ( ) {
    HRESULT _hr = raw_StartViewableWorkgroupsList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::GetNextViewableWorkgroup ( BSTR * p_Name ) {
    HRESULT _hr = raw_GetNextViewableWorkgroup(p_Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::StartAccessibleQueuesList ( ) {
    HRESULT _hr = raw_StartAccessibleQueuesList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::GetNextAccessibleQueues ( BSTR * p_Name, long * p_Type, VARIANT_BOOL * p_Modifiable ) {
    HRESULT _hr = raw_GetNextAccessibleQueues(p_Name, p_Type, p_Modifiable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::SetNonPersistentStatus ( _bstr_t p_Status ) {
    HRESULT _hr = raw_SetNonPersistentStatus(p_Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::StartStatusMessages ( ) {
    HRESULT _hr = raw_StartStatusMessages();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUser::GetNextStatusMessage ( BSTR * p_Text, VARIANT_BOOL * p_IsDND, VARIANT_BOOL * p_HasDate, VARIANT_BOOL * p_HasTime, BSTR * p_IconFileName ) {
    HRESULT _hr = raw_GetNextStatusMessage(p_Text, p_IsDND, p_HasDate, p_HasTime, p_IconFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IEICUser::GetLoggedInStations ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LoggedInStations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IEICUser::GetIsLoggedIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoggedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICUserEx wrapper method implementations
//

inline VARIANT_BOOL IEICUserEx::GetAlertOptionTelephone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlertOptionTelephone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutAlertOptionTelephone ( VARIANT_BOOL __MIDL_0011 ) {
    HRESULT _hr = put_AlertOptionTelephone(__MIDL_0011);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUserEx::GetAlertOptionComputer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlertOptionComputer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutAlertOptionComputer ( VARIANT_BOOL __MIDL_0013 ) {
    HRESULT _hr = put_AlertOptionComputer(__MIDL_0013);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUserEx::GetAlertOptionPopClient ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlertOptionPopClient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutAlertOptionPopClient ( VARIANT_BOOL __MIDL_0015 ) {
    HRESULT _hr = put_AlertOptionPopClient(__MIDL_0015);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUserEx::GetAlertOptionSetFocus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlertOptionSetFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutAlertOptionSetFocus ( VARIANT_BOOL __MIDL_0017 ) {
    HRESULT _hr = put_AlertOptionSetFocus(__MIDL_0017);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUserEx::GetNewChatOptionSound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatOptionSound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutNewChatOptionSound ( VARIANT_BOOL __MIDL_0019 ) {
    HRESULT _hr = put_NewChatOptionSound(__MIDL_0019);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUserEx::GetNewChatOptionPopClient ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatOptionPopClient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutNewChatOptionPopClient ( VARIANT_BOOL __MIDL_0021 ) {
    HRESULT _hr = put_NewChatOptionPopClient(__MIDL_0021);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUserEx::GetNewChatOptionSetFocus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatOptionSetFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutNewChatOptionSetFocus ( VARIANT_BOOL __MIDL_0023 ) {
    HRESULT _hr = put_NewChatOptionSetFocus(__MIDL_0023);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUserEx::GetNewChatTextOptionSound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatTextOptionSound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutNewChatTextOptionSound ( VARIANT_BOOL __MIDL_0025 ) {
    HRESULT _hr = put_NewChatTextOptionSound(__MIDL_0025);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUserEx::GetNewChatTextOptionPopClient ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatTextOptionPopClient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutNewChatTextOptionPopClient ( VARIANT_BOOL __MIDL_0027 ) {
    HRESULT _hr = put_NewChatTextOptionPopClient(__MIDL_0027);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUserEx::GetNewChatTextOptionSetFocus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NewChatTextOptionSetFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutNewChatTextOptionSetFocus ( VARIANT_BOOL __MIDL_0029 ) {
    HRESULT _hr = put_NewChatTextOptionSetFocus(__MIDL_0029);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IEICUserEx::GetIncomingCallsTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_IncomingCallsTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutIncomingCallsTimeout ( long seconds ) {
    HRESULT _hr = put_IncomingCallsTimeout(seconds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICUserEx::GetIncomingCallsForwardNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IncomingCallsForwardNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICUserEx::PutIncomingCallsForwardNumber ( _bstr_t number ) {
    HRESULT _hr = put_IncomingCallsForwardNumber(number);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUserEx::GetActivateOutOfOfficeMessage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ActivateOutOfOfficeMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx::PutActivateOutOfOfficeMessage ( VARIANT_BOOL __MIDL_0033 ) {
    HRESULT _hr = put_ActivateOutOfOfficeMessage(__MIDL_0033);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICUserEx::HoldUpdates ( ) {
    HRESULT _hr = raw_HoldUpdates();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUserEx::CommitUpdates ( ) {
    HRESULT _hr = raw_CommitUpdates();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IEICUserEx::GetChatURLs ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChatURLs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICUserEx::GetChatMessages ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChatMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICUserEx::GetChatFiles ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChatFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IEICUserEx::PutStatusKey ( _bstr_t Val ) {
    HRESULT _hr = put_StatusKey(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICUserEx::GetStatusKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICUserEx::GetDirectories ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Directories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICUserS wrapper method implementations
//

inline _variant_t IEICUserS::GetAccessibleQueueObjectsS ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AccessibleQueueObjectsS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICUserS::GetViewableWorkgroupsS ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ViewableWorkgroupsS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICUserS::GetWorkgroupsS ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_WorkgroupsS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IEICUserS::CallS ( ) {
    long _result = 0;
    HRESULT _hr = raw_CallS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IEICUserS::GetUntilDateTimeS ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UntilDateTimeS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IEICUserS::PutUntilDateTimeS ( VARIANT * p_Date ) {
    HRESULT _hr = put_UntilDateTimeS(p_Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEICWorkgroupWatcher wrapper method implementations
//

inline HRESULT IEICWorkgroupWatcher::UserAdded ( _bstr_t p_UserId ) {
    HRESULT _hr = raw_UserAdded(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICWorkgroupWatcher::UserChanged ( _bstr_t p_UserId, _bstr_t p_Status, DATE p_UntilDateTime ) {
    HRESULT _hr = raw_UserChanged(p_UserId, p_Status, p_UntilDateTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICWorkgroupWatcher::UserRemoved ( _bstr_t p_UserId ) {
    HRESULT _hr = raw_UserRemoved(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICWorkgroupWatcher::UserOnPhone ( _bstr_t p_UserId, VARIANT_BOOL p_OnPhone ) {
    HRESULT _hr = raw_UserOnPhone(p_UserId, p_OnPhone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICWorkgroupWatcher::UserLoginChanged ( _bstr_t p_UserId, _bstr_t p_Station, VARIANT_BOOL p_Login ) {
    HRESULT _hr = raw_UserLoginChanged(p_UserId, p_Station, p_Login);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICWorkgroup wrapper method implementations
//

inline HRESULT IEICWorkgroup::GetWorkgroupMembers ( VARIANT * p_UserIds ) {
    HRESULT _hr = raw_GetWorkgroupMembers(p_UserIds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICWorkgroup::SetChangeHandler ( struct IEICWorkgroupWatcher * p_Handler, VARIANT_BOOL p_MonitorIndividuals ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler, p_MonitorIndividuals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IEICWorkgroup::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICWorkgroup::PutId ( _bstr_t pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICWorkgroup::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IEICWorkgroup::StartMembersList ( ) {
    HRESULT _hr = raw_StartMembersList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICWorkgroup::GetNextMember ( BSTR * p_UserId ) {
    HRESULT _hr = raw_GetNextMember(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short IEICWorkgroup::GetWrapupTime ( ) {
    short _result = 0;
    HRESULT _hr = get_WrapupTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEICWorkgroup::GetWrapupStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WrapupStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICWorkgroup::PutMonitorOnPhone ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MonitorOnPhone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICWorkgroup::GetMonitorOnPhone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MonitorOnPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICWorkgroup2Watcher wrapper method implementations
//

inline HRESULT IEICWorkgroup2Watcher::UserStatusChanged ( _bstr_t p_UserId, _bstr_t p_StatusKey, DATE p_UntilDateTime, VARIANT_BOOL p_HasDate, VARIANT_BOOL p_HasTime ) {
    HRESULT _hr = raw_UserStatusChanged(p_UserId, p_StatusKey, p_UntilDateTime, p_HasDate, p_HasTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICConferenceObject2Watcher wrapper method implementations
//

inline HRESULT IEICConferenceObject2Watcher::PartyChanged ( long p_ConfId, long p_Type, long p_ObjId, long p_Event ) {
    HRESULT _hr = raw_PartyChanged(p_ConfId, p_Type, p_ObjId, p_Event);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject2Watcher::ObjectDestroyed ( long p_ConfId ) {
    HRESULT _hr = raw_ObjectDestroyed(p_ConfId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject2Watcher::TextMessageReceived ( long p_ConfId, _bstr_t p_SenderUserId, _bstr_t p_Msg ) {
    HRESULT _hr = raw_TextMessageReceived(p_ConfId, p_SenderUserId, p_Msg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueue2WatcherAdapter wrapper method implementations
//

inline void IEICQueue2WatcherAdapter::PutObjectAddedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectAddedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICQueue2WatcherAdapter::PutObjectChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICQueue2WatcherAdapter::PutObjectRemovedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectRemovedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICQueue2WatcherAdapter::PutStatisticsUpdatedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_StatisticsUpdatedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IEICQueue2WatcherAdapter::GetObjectAddedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectAddedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICQueue2WatcherAdapter::GetObjectChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICQueue2WatcherAdapter::GetObjectRemovedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectRemovedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICQueue2WatcherAdapter::GetStatisticsUpdatedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StatisticsUpdatedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICRemoteConnection wrapper method implementations
//

inline HRESULT IEICRemoteConnection::Connect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_PersistentConnection, VARIANT_BOOL p_AutoDisconnect ) {
    HRESULT _hr = raw_Connect(p_App, p_Server, p_User, p_Password, p_Station, p_PersistentConnection, p_AutoDisconnect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICRemoteConnection::Disconnect ( VARIANT_BOOL p_DisconnectUserOnly ) {
    HRESULT _hr = raw_Disconnect(p_DisconnectUserOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IEICRemoteConnection::GetServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Server(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICRemoteConnection::GetUser ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICRemoteConnection::GetStation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Station(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IEICRemoteConnection::GetConnectionValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConnectionValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICConnection wrapper method implementations
//

inline HRESULT IEICConnection::Connect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_AutoDisconnect ) {
    HRESULT _hr = raw_Connect(p_App, p_Server, p_User, p_Password, p_Station, p_AutoDisconnect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConnection::Attach ( _bstr_t p_App, _bstr_t p_Server, VARIANT_BOOL p_AutoDisconnect ) {
    HRESULT _hr = raw_Attach(p_App, p_Server, p_AutoDisconnect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConnection::Disconnect ( VARIANT_BOOL p_DisconnectUserOnly ) {
    HRESULT _hr = raw_Disconnect(p_DisconnectUserOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConnection::ForceDisconnect ( _bstr_t p_User, _bstr_t p_Station, VARIANT_BOOL p_DisconnectUserOnly ) {
    HRESULT _hr = raw_ForceDisconnect(p_User, p_Station, p_DisconnectUserOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IEICConnection::GetServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Server(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICConnection::GetUser ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICConnection::GetStation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Station(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IEICConnection::PassiveConnect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, VARIANT_BOOL p_AutoDisconnect ) {
    HRESULT _hr = raw_PassiveConnect(p_App, p_Server, p_User, p_Password, p_AutoDisconnect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICConnection::GetConnectionValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConnectionValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICChatObjectWatcher wrapper method implementations
//

inline HRESULT IEICChatObjectWatcher::StateChanged ( long p_NewState, _bstr_t p_StateString ) {
    HRESULT _hr = raw_StateChanged(p_NewState, p_StateString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObjectWatcher::ObjectSpecificChange ( ) {
    HRESULT _hr = raw_ObjectSpecificChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObjectWatcher::ObjectDestroyed ( ) {
    HRESULT _hr = raw_ObjectDestroyed();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObjectWatcher::ObjectSpecificError ( long p_Error ) {
    HRESULT _hr = raw_ObjectSpecificError(p_Error);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObjectWatcher::SubObjectChanged ( long p_Type, long p_Id, long p_Change ) {
    HRESULT _hr = raw_SubObjectChanged(p_Type, p_Id, p_Change);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObjectWatcher::ReceivedString ( _bstr_t p_User, _bstr_t p_String ) {
    HRESULT _hr = raw_ReceivedString(p_User, p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObjectWatcher::ReceivedUrl ( _bstr_t p_User, _bstr_t p_URL ) {
    HRESULT _hr = raw_ReceivedUrl(p_User, p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObjectWatcher::ReceivedFile ( _bstr_t p_User, _bstr_t p_FileName, _bstr_t p_FileData ) {
    HRESULT _hr = raw_ReceivedFile(p_User, p_FileName, p_FileData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICChatObject wrapper method implementations
//

inline long IEICChatObject::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICChatObject::PutId ( long pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IEICChatObject::GetState ( ) {
    long _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEICChatObject::GetStateString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StateString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICChatObject::PutStateString ( _bstr_t pVal ) {
    HRESULT _hr = put_StateString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICChatObject::Pickup ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Pickup(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::Disconnect ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Disconnect(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::SetChangeHandler ( struct IEICChatObjectWatcher * p_Handler ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IEICChatObject::GetLocalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICChatObject::GetLocalLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICChatObject::GetRemoteName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICChatObject::PutRemoteName ( _bstr_t pVal ) {
    HRESULT _hr = put_RemoteName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICChatObject::GetRemoteLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICChatObject::GetLocalId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICChatObject::GetRemoteId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE IEICChatObject::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICChatObject::GetCreationTime ( short * hour, short * minute, short * second ) {
    HRESULT _hr = raw_GetCreationTime(hour, minute, second);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short IEICChatObject::GetDirection ( ) {
    short _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICChatObject::GetNamedAttribute ( _bstr_t p_Name, BSTR * p_Value ) {
    HRESULT _hr = raw_GetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::SetNamedAttribute ( _bstr_t p_Name, _bstr_t p_Value ) {
    HRESULT _hr = raw_SetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::Listen ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Listen(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::Record ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Record(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::Private ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Private(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICChatObject::GetisRecording ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isRecording(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICChatObject::GetisPaused ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPaused(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICChatObject::GetisPrivate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPrivate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICChatObject::GetisMonitored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isMonitored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICChatObject::PutNameAttributeList ( const _variant_t & p_Names, const _variant_t & p_Values ) {
    HRESULT _hr = raw_PutNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::GetNameAttributeList ( const _variant_t & p_Names, VARIANT * p_Values ) {
    HRESULT _hr = raw_GetNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::SendString ( _bstr_t p_String ) {
    HRESULT _hr = raw_SendString(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::SendURL ( _bstr_t p_URL ) {
    HRESULT _hr = raw_SendURL(p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::SendFile ( _bstr_t p_FileName, _bstr_t p_FileData ) {
    HRESULT _hr = raw_SendFile(p_FileName, p_FileData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::BlindTransfer ( _bstr_t p_UserQueueName, _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_BlindTransfer(p_UserQueueName, p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICChatObject::RequestSession ( _bstr_t p_RequestingUserName, _bstr_t p_RequestingEmail, _bstr_t p_RequestingPhone, _bstr_t p_RequestingLocation, _bstr_t p_DestinationQueueName, _bstr_t p_SubjectOfChat ) {
    HRESULT _hr = raw_RequestSession(p_RequestingUserName, p_RequestingEmail, p_RequestingPhone, p_RequestingLocation, p_DestinationQueueName, p_SubjectOfChat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueObjectWatcher wrapper method implementations
//

inline HRESULT IEICQueueObjectWatcher::StateChanged ( long p_NewState, _bstr_t p_StateString ) {
    HRESULT _hr = raw_StateChanged(p_NewState, p_StateString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObjectWatcher::ObjectSpecificChange ( ) {
    HRESULT _hr = raw_ObjectSpecificChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObjectWatcher::ObjectDestroyed ( ) {
    HRESULT _hr = raw_ObjectDestroyed();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObjectWatcher::ObjectSpecificError ( long p_Error ) {
    HRESULT _hr = raw_ObjectSpecificError(p_Error);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObjectWatcher::SubObjectChanged ( long p_Type, long p_Id, long p_Change ) {
    HRESULT _hr = raw_SubObjectChanged(p_Type, p_Id, p_Change);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCallObject wrapper method implementations
//

inline long IEICCallObject::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICCallObject::PutId ( long pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IEICCallObject::GetState ( ) {
    long _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEICCallObject::GetStateString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StateString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICCallObject::PutStateString ( _bstr_t pVal ) {
    HRESULT _hr = put_StateString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICCallObject::Pickup ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Pickup(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::Disconnect ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Disconnect(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::SetChangeHandler ( struct IEICQueueObjectWatcher * p_Handler ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IEICCallObject::GetLocalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICCallObject::GetLocalLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICCallObject::GetRemoteName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICCallObject::PutRemoteName ( _bstr_t pVal ) {
    HRESULT _hr = put_RemoteName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICCallObject::GetRemoteLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICCallObject::GetLocalId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICCallObject::GetRemoteId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE IEICCallObject::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICCallObject::GetCreationTime ( short * hour, short * minute, short * second ) {
    HRESULT _hr = raw_GetCreationTime(hour, minute, second);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short IEICCallObject::GetDirection ( ) {
    short _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICCallObject::GetNamedAttribute ( _bstr_t p_Name, BSTR * p_Value ) {
    HRESULT _hr = raw_GetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::SetNamedAttribute ( _bstr_t p_Name, _bstr_t p_Value ) {
    HRESULT _hr = raw_SetNamedAttribute(p_Name, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::ExtendedDial ( _bstr_t p_Number, short p_TimeoutSecs, VARIANT_BOOL p_CallAnalysis, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_ExtendedDial(p_Number, p_TimeoutSecs, p_CallAnalysis, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::Dial ( _bstr_t p_Number, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_Dial(p_Number, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::Listen ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Listen(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::Record ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Record(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::Mute ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Mute(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::Hold ( _bstr_t p_ToUserQueue, _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Hold(p_ToUserQueue, p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::Private ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_Private(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::BlindTransfer ( _bstr_t p_ToNumber, _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_BlindTransfer(p_ToNumber, p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::ConsultTransfer ( long p_WithCall, _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_ConsultTransfer(p_WithCall, p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::SendToVoiceMail ( _bstr_t p_IfOnUserQueue ) {
    HRESULT _hr = raw_SendToVoiceMail(p_IfOnUserQueue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICCallObject::GetisHeld ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isHeld(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICCallObject::GetisRecording ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isRecording(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICCallObject::GetisPaused ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPaused(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICCallObject::GetisMuted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isMuted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICCallObject::GetisPrivate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isPrivate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICCallObject::GetisMonitored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isMonitored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICCallObject::PlayDigits ( _bstr_t p_StringOfDigits ) {
    HRESULT _hr = raw_PlayDigits(p_StringOfDigits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICCallObject::GetisParty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isParty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICCallObject::GetConferenceId ( ) {
    long _result = 0;
    HRESULT _hr = get_ConferenceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICCallObject::PutNameAttributeList ( const _variant_t & p_Names, const _variant_t & p_Values ) {
    HRESULT _hr = raw_PutNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject::GetNameAttributeList ( const _variant_t & p_Names, VARIANT * p_Values ) {
    HRESULT _hr = raw_GetNameAttributeList(p_Names, p_Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICWorkgroupEntry wrapper method implementations
//

inline HRESULT IEICWorkgroupEntry::Load ( _bstr_t pVal ) {
    HRESULT _hr = raw_Load(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IEICWorkgroupEntry::GetUserId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_City(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Zip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Phone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Company(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetDepartment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Department(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetBusinessAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetBusinessCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetBusinessState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetBusinessZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessZip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetBusinessCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetBusinessEMail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessEMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetAssistant ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetHomeCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetHomeEMail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeEMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetBusinessPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetBusinessPhone2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessPhone2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetHomePhone2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomePhone2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetMobile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mobile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetFax ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Fax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetPager ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Pager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetAssistantPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssistantPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetPrimaryNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrimaryNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetNotes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Notes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetStatusMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICWorkgroupEntry::GetStatusKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICWorkgroupEntry::GetUntilDateTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UntilDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IEICWorkgroupEntry::GetisDND ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isDND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICWorkgroupEntry::GethasDate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_hasDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICWorkgroupEntry::GethasTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_hasTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICWorkgroupEntry::GetIsLoggedIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoggedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICConferenceObject wrapper method implementations
//

inline HRESULT IEICConferenceObject::Create ( struct IEICCallObject * p_Call ) {
    HRESULT _hr = raw_Create(p_Call);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject::Add ( struct IEICCallObject * p_Call ) {
    HRESULT _hr = raw_Add(p_Call);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject::ListMembers ( VARIANT * p_ArrayOfCallIds ) {
    HRESULT _hr = raw_ListMembers(p_ArrayOfCallIds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject::SetChangeHandler ( struct IEICQueueObjectWatcher * p_Handler ) {
    HRESULT _hr = raw_SetChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject::DisconnectParty ( long p_CallId ) {
    HRESULT _hr = raw_DisconnectParty(p_CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IEICConferenceObject::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICConferenceObject::PutId ( long pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICConferenceObject::StartMembersList ( ) {
    HRESULT _hr = raw_StartMembersList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject::GetNextMember ( long * p_CallId ) {
    HRESULT _hr = raw_GetNextMember(p_CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueStatDataS wrapper method implementations
//

inline _variant_t IEICQueueStatDataS::GetAbandons ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Abandons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICQueueStatDataS::GetServiceLevels ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ServiceLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICWorkgroupStatsS wrapper method implementations
//

inline _variant_t IEICWorkgroupStatsS::GetStatusSummaryInfo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StatusSummaryInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICStatistics wrapper method implementations
//

inline HRESULT IEICStatistics::Connect ( _bstr_t p_Name ) {
    HRESULT _hr = raw_Connect(p_Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICStatistics::SetQueueChangeHandler ( IUnknown * p_Handler ) {
    HRESULT _hr = raw_SetQueueChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICStatistics::SetWorkgroupChangeHandler ( IUnknown * p_Handler ) {
    HRESULT _hr = raw_SetWorkgroupChangeHandler(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IEICQueueStatsPtr IEICStatistics::GetQueueStats ( ) {
    struct IEICQueueStats * _result = 0;
    HRESULT _hr = get_QueueStats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueStatsPtr(_result, false);
}

inline IEICWorkgroupStatsPtr IEICStatistics::GetWorkgroupStats ( ) {
    struct IEICWorkgroupStats * _result = 0;
    HRESULT _hr = get_WorkgroupStats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICWorkgroupStatsPtr(_result, false);
}

//
// interface IEICLogEvent wrapper method implementations
//

inline HRESULT IEICLogEvent::Log ( _bstr_t p_String ) {
    HRESULT _hr = raw_Log(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICLogging wrapper method implementations
//

inline HRESULT IEICLogging::Start ( struct IEICLogEvent * p_Logger, VARIANT_BOOL p_InternalDebugging ) {
    HRESULT _hr = raw_Start(p_Logger, p_InternalDebugging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICLogging::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICLogging::Log ( _bstr_t p_String ) {
    HRESULT _hr = raw_Log(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void IEICLogging::PutInternalDebugging ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InternalDebugging(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICLogging::GetInternalDebugging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InternalDebugging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICNames wrapper method implementations
//

inline IUnknownPtr IEICNames::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _bstr_t IEICNames::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICNames::PutItem ( long Index, _bstr_t pVal ) {
    HRESULT _hr = put_Item(Index, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IEICNames::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICNames::Add ( _bstr_t newVal ) {
    HRESULT _hr = raw_Add(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNames::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDS wrapper method implementations
//

inline IEICNamesPtr IEICDS::GetWorkgroups ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Workgroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline IEICNamesPtr IEICDS::GetUsers ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Users(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline IEICNamesPtr IEICDS::GetSkills ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Skills(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline IEICNamesPtr IEICDS::GetNTUsers ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_NTUsers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline IEICNamesPtr IEICDS::GetActions ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline IEICNamesPtr IEICDS::GetStatusMessages ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_StatusMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline IEICNamesPtr IEICDS::GetWorkstations ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Workstations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline IEICNamesPtr IEICDS::GetSMDIPorts ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_SMDIPorts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline IEICNamesPtr IEICDS::GetPagingCarriers ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_PagingCarriers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline HRESULT IEICDS::BeginTransaction ( ) {
    HRESULT _hr = raw_BeginTransaction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDS::EndTransaction ( ) {
    HRESULT _hr = raw_EndTransaction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDSEntry wrapper method implementations
//

inline _bstr_t IEICDSEntry::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSEntry::PutId ( _bstr_t pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICDSEntry::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSEntry::Revert ( ) {
    HRESULT _hr = raw_Revert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDSCustomEntry wrapper method implementations
//

inline _variant_t IEICDSCustomEntry::GetValue ( _bstr_t p_Attribute ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(p_Attribute, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IEICDSCustomEntry::PutValue ( _bstr_t p_Attribute, const _variant_t & p_Value ) {
    HRESULT _hr = put_Value(p_Attribute, p_Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSCustomEntry::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IEICDS2 wrapper method implementations
//

inline HRESULT IEICDS2::DeleteEntry ( struct IEICDSEntry * p_Entry ) {
    HRESULT _hr = raw_DeleteEntry(p_Entry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IEICDSCustomEntryPtr IEICDS2::CreateCustomEntry ( struct IEICDSEntry * p_Parent, _bstr_t p_Attr ) {
    struct IEICDSCustomEntry * _result = 0;
    HRESULT _hr = raw_CreateCustomEntry(p_Parent, p_Attr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICDSCustomEntryPtr(_result, false);
}

inline IEICDSCustomEntryPtr IEICDS2::GetCustomEntry ( struct IEICDSEntry * p_Parent, _bstr_t p_Attr ) {
    struct IEICDSCustomEntry * _result = 0;
    HRESULT _hr = raw_GetCustomEntry(p_Parent, p_Attr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICDSCustomEntryPtr(_result, false);
}

//
// interface IEICDS3 wrapper method implementations
//

inline HRESULT IEICDS3::AddSkill ( _bstr_t p_Skill ) {
    HRESULT _hr = raw_AddSkill(p_Skill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDS3::DeleteSkill ( _bstr_t p_Skill ) {
    HRESULT _hr = raw_DeleteSkill(p_Skill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDSUser wrapper method implementations
//

inline _bstr_t IEICDSUser::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSUser::PutExtension ( _bstr_t pVal ) {
    HRESULT _hr = put_Extension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSUser::GetMailbox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mailbox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSUser::PutMailbox ( _bstr_t pVal ) {
    HRESULT _hr = put_Mailbox(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSUser::GetMailboxDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailboxDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSUser::PutMailboxDisplayName ( _bstr_t pVal ) {
    HRESULT _hr = put_MailboxDisplayName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICDSUser::PutPassword ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Password(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSUser::GetStatusMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSUser::PutStatusMessage ( _bstr_t pVal ) {
    HRESULT _hr = put_StatusMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSUser::GetDefaultWorkstation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultWorkstation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSUser::PutDefaultWorkstation ( _bstr_t pVal ) {
    HRESULT _hr = put_DefaultWorkstation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSUser::GetNTDomainName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NTDomainName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSUser::PutNTDomainName ( _bstr_t pVal ) {
    HRESULT _hr = put_NTDomainName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IEICNamesPtr IEICDSUser::GetWorkgroups ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Workgroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline HRESULT IEICDSUser::AddToWorkgroup ( _bstr_t p_WorkgroupName ) {
    HRESULT _hr = raw_AddToWorkgroup(p_WorkgroupName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::RemoveFromWorkgroup ( _bstr_t p_WorkgroupName ) {
    HRESULT _hr = raw_RemoveFromWorkgroup(p_WorkgroupName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::GetACDOptions ( VARIANT * p_Cost, VARIANT * p_Attribute1, VARIANT * p_Attribute2, VARIANT * p_Attribute3, VARIANT * p_AutoAnswerCalls ) {
    HRESULT _hr = raw_GetACDOptions(p_Cost, p_Attribute1, p_Attribute2, p_Attribute3, p_AutoAnswerCalls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::SetACDOptions ( const _variant_t & p_Cost, const _variant_t & p_Attribute1, const _variant_t & p_Attribute2, const _variant_t & p_Attribute3, const _variant_t & p_AutoAnswerCalls ) {
    HRESULT _hr = raw_SetACDOptions(p_Cost, p_Attribute1, p_Attribute2, p_Attribute3, p_AutoAnswerCalls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IEICNamesPtr IEICDSUser::GetSkills ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Skills(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline HRESULT IEICDSUser::AddSkill ( _bstr_t p_SkillName ) {
    HRESULT _hr = raw_AddSkill(p_SkillName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::RemoveSkill ( _bstr_t p_SkillName ) {
    HRESULT _hr = raw_RemoveSkill(p_SkillName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::SetSkill ( _bstr_t p_Name, long p_Proficiency, long p_DesireToUse ) {
    HRESULT _hr = raw_SetSkill(p_Name, p_Proficiency, p_DesireToUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::GetSkill ( _bstr_t p_Name, long * p_Proficiency, long * p_DesireToUse ) {
    HRESULT _hr = raw_GetSkill(p_Name, p_Proficiency, p_DesireToUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::GetAgentGreeting ( VARIANT_BOOL * p_HasAgentGreeting, BSTR * pVal ) {
    HRESULT _hr = raw_GetAgentGreeting(p_HasAgentGreeting, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::SetAgentGreeting ( VARIANT_BOOL p_HasAgentGreeting, _bstr_t p_AgentGreeting ) {
    HRESULT _hr = raw_SetAgentGreeting(p_HasAgentGreeting, p_AgentGreeting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::GetSMDI ( VARIANT * p_MWIEnabled, VARIANT * p_MWIPhoneNumber, VARIANT * p_SMDIPort ) {
    HRESULT _hr = raw_GetSMDI(p_MWIEnabled, p_MWIPhoneNumber, p_SMDIPort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::SetSMDI ( const _variant_t & p_MWIEnabled, const _variant_t & p_MWIPhoneNumber, const _variant_t & p_SMDIPort ) {
    HRESULT _hr = raw_SetSMDI(p_MWIEnabled, p_MWIPhoneNumber, p_SMDIPort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::GetClientNotification ( VARIANT * p_RingTelephone, VARIANT * p_RingComputer, VARIANT * p_PopClientWindow, VARIANT * p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_GetClientNotification(p_RingTelephone, p_RingComputer, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::SetClientNotification ( const _variant_t & p_RingTelephone, const _variant_t & p_RingComputer, const _variant_t & p_PopClientWindow, const _variant_t & p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_SetClientNotification(p_RingTelephone, p_RingComputer, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::GetNewChatOptions ( VARIANT * p_PlaySound, VARIANT * p_PopClientWindow, VARIANT * p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_GetNewChatOptions(p_PlaySound, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::SetNewChatOptions ( const _variant_t & p_PlaySound, const _variant_t & p_PopClientWindow, const _variant_t & p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_SetNewChatOptions(p_PlaySound, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::GetNewChatTextOptions ( VARIANT * p_PlaySound, VARIANT * p_PopClientWindow, VARIANT * p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_GetNewChatTextOptions(p_PlaySound, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::SetNewChatTextOptions ( const _variant_t & p_PlaySound, const _variant_t & p_PopClientWindow, const _variant_t & p_SetFocusToClientWindow ) {
    HRESULT _hr = raw_SetNewChatTextOptions(p_PlaySound, p_PopClientWindow, p_SetFocusToClientWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IEICDSUser::GetOfferingCallTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_OfferingCallTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSUser::PutOfferingCallTimeout ( long pVal ) {
    HRESULT _hr = put_OfferingCallTimeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICDSUser::GetActions ( VARIANT * p_AlertingAction, VARIANT * p_DisconnectedAction ) {
    HRESULT _hr = raw_GetActions(p_AlertingAction, p_DisconnectedAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::SetActions ( const _variant_t & p_AlertingAction, const _variant_t & p_DisconnectedAction ) {
    HRESULT _hr = raw_SetActions(p_AlertingAction, p_DisconnectedAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICDSUser::GetPagingActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PagingActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSUser::PutPagingActive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PagingActive(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSUser::GetPagingCarrier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PagingCarrier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSUser::PutPagingCarrier ( _bstr_t pVal ) {
    HRESULT _hr = put_PagingCarrier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSUser::GetPagingPIN ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PagingPIN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSUser::PutPagingPIN ( _bstr_t pVal ) {
    HRESULT _hr = put_PagingPIN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICDSUser::GetPageAccess ( enum DSPageAccess p_PageAccess ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PageAccess(p_PageAccess, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSUser::PutPageAccess ( enum DSPageAccess p_PageAccess, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PageAccess(p_PageAccess, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICDSUser::GetUserRights ( enum DSUserRights p_UserRights ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserRights(p_UserRights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSUser::PutUserRights ( enum DSUserRights p_UserRights, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UserRights(p_UserRights, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICDSUser::GetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * * p_Inherited, struct IEICNames * * p_CurrentAvailable, struct IEICNames * * p_CurrentSelected ) {
    HRESULT _hr = raw_GetAccessControl(p_Category, p_Inherited, p_CurrentAvailable, p_CurrentSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSUser::SetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * p_CurrentSelected ) {
    HRESULT _hr = raw_SetAccessControl(p_Category, p_CurrentSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDSWorkgroup wrapper method implementations
//

inline _bstr_t IEICDSWorkgroup::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSWorkgroup::PutExtension ( _bstr_t pVal ) {
    HRESULT _hr = put_Extension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSWorkgroup::GetMailbox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mailbox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSWorkgroup::PutMailbox ( _bstr_t pVal ) {
    HRESULT _hr = put_Mailbox(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSWorkgroup::GetMailboxDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailboxDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSWorkgroup::PutMailboxDisplayName ( _bstr_t pVal ) {
    HRESULT _hr = put_MailboxDisplayName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSWorkgroup::GetIcon ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSWorkgroup::PutIcon ( _bstr_t pVal ) {
    HRESULT _hr = put_Icon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSWorkgroup::GetRingSound ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RingSound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSWorkgroup::PutRingSound ( _bstr_t pVal ) {
    HRESULT _hr = put_RingSound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSWorkgroup::GetChatSound ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatSound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSWorkgroup::PutChatSound ( _bstr_t pVal ) {
    HRESULT _hr = put_ChatSound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSWorkgroup::GetOnHoldMusic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnHoldMusic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSWorkgroup::PutOnHoldMusic ( _bstr_t pVal ) {
    HRESULT _hr = put_OnHoldMusic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICDSWorkgroup::GetHasQueue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasQueue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSWorkgroup::PutHasQueue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HasQueue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICDSWorkgroup::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSWorkgroup::PutActive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Active(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IEICNamesPtr IEICDSWorkgroup::GetUsers ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Users(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline HRESULT IEICDSWorkgroup::AddUser ( _bstr_t p_Id ) {
    HRESULT _hr = raw_AddUser(p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSWorkgroup::RemoveUser ( _bstr_t p_Id ) {
    HRESULT _hr = raw_RemoveUser(p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IEICNamesPtr IEICDSWorkgroup::GetSkills ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Skills(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline HRESULT IEICDSWorkgroup::AddSkill ( _bstr_t p_SkillName ) {
    HRESULT _hr = raw_AddSkill(p_SkillName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSWorkgroup::RemoveSkill ( _bstr_t p_SkillName ) {
    HRESULT _hr = raw_RemoveSkill(p_SkillName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSWorkgroup::SetSkill ( _bstr_t p_Name, long p_Proficiency, long p_DesireToUse ) {
    HRESULT _hr = raw_SetSkill(p_Name, p_Proficiency, p_DesireToUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSWorkgroup::GetSkill ( _bstr_t p_Name, long * p_Proficiency, long * p_DesireToUse ) {
    HRESULT _hr = raw_GetSkill(p_Name, p_Proficiency, p_DesireToUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSWorkgroup::GetACDActions ( VARIANT * p_AlertingAction, VARIANT * p_DisconnectedAction, VARIANT * p_TransferAction, VARIANT * p_IncomingTransferAction ) {
    HRESULT _hr = raw_GetACDActions(p_AlertingAction, p_DisconnectedAction, p_TransferAction, p_IncomingTransferAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSWorkgroup::SetACDActions ( const _variant_t & p_AlertingAction, const _variant_t & p_DisconnectedAction, const _variant_t & p_TransferAction, const _variant_t & p_IncomingTransferAction ) {
    HRESULT _hr = raw_SetACDActions(p_AlertingAction, p_DisconnectedAction, p_TransferAction, p_IncomingTransferAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICDSWorkgroup::GetExecuteTransferActionOnUserTransfer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExecuteTransferActionOnUserTransfer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSWorkgroup::PutExecuteTransferActionOnUserTransfer ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExecuteTransferActionOnUserTransfer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSWorkgroup::GetNoAnswerStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoAnswerStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSWorkgroup::PutNoAnswerStatus ( _bstr_t pVal ) {
    HRESULT _hr = put_NoAnswerStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSWorkgroup::GetOnCallStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnCallStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSWorkgroup::PutOnCallStatus ( _bstr_t pVal ) {
    HRESULT _hr = put_OnCallStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICDSWorkgroup::GetWrapup ( long * p_WrapupTime, BSTR * p_WrapupStatus ) {
    HRESULT _hr = raw_GetWrapup(p_WrapupTime, p_WrapupStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSWorkgroup::SetWrapup ( long p_WrapupTime, _bstr_t p_WrapupStatus ) {
    HRESULT _hr = raw_SetWrapup(p_WrapupTime, p_WrapupStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSWorkgroup::GetActions ( VARIANT * p_AlertingAction, VARIANT * p_DisconnectedAction ) {
    HRESULT _hr = raw_GetActions(p_AlertingAction, p_DisconnectedAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSWorkgroup::SetActions ( const _variant_t & p_AlertingAction, const _variant_t & p_DisconnectedAction ) {
    HRESULT _hr = raw_SetActions(p_AlertingAction, p_DisconnectedAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IEICDSWorkgroup::GetOfferingCallTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_OfferingCallTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSWorkgroup::PutOfferingCallTimeout ( long pVal ) {
    HRESULT _hr = put_OfferingCallTimeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICDSWorkgroup::GetPagingActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PagingActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSWorkgroup::PutPagingActive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PagingActive(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICDSWorkgroup::GetCallStatistics ( VARIANT * p_StatisticsPeriod, VARIANT * p_EstimatedCallTimeInterval ) {
    HRESULT _hr = raw_GetCallStatistics(p_StatisticsPeriod, p_EstimatedCallTimeInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSWorkgroup::SetCallStatistics ( const _variant_t & p_StatisticsPeriod, const _variant_t & p_EstimatedCallTimeInterval ) {
    HRESULT _hr = raw_SetCallStatistics(p_StatisticsPeriod, p_EstimatedCallTimeInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IEICDSWorkgroup::GetStatisticsShiftStarts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StatisticsShiftStarts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IEICDSWorkgroup::PutStatisticsShiftStarts ( const _variant_t & pVal ) {
    HRESULT _hr = put_StatisticsShiftStarts(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICDSWorkgroup::GetPageAccess ( enum DSPageAccess p_PageAccess ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PageAccess(p_PageAccess, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSWorkgroup::PutPageAccess ( enum DSPageAccess p_PageAccess, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PageAccess(p_PageAccess, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICDSWorkgroup::GetUserRights ( enum DSUserRights p_UserRights ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserRights(p_UserRights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSWorkgroup::PutUserRights ( enum DSUserRights p_UserRights, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UserRights(p_UserRights, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICDSWorkgroup::GetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * * p_Inherited, struct IEICNames * * p_CurrentAvailable, struct IEICNames * * p_CurrentSelected ) {
    HRESULT _hr = raw_GetAccessControl(p_Category, p_Inherited, p_CurrentAvailable, p_CurrentSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDSWorkgroup::SetAccessControl ( enum DSAccessControlCategory p_Category, struct IEICNames * p_CurrentSelected ) {
    HRESULT _hr = raw_SetAccessControl(p_Category, p_CurrentSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDSStation wrapper method implementations
//

inline _bstr_t IEICDSStation::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutExtension ( _bstr_t pVal ) {
    HRESULT _hr = put_Extension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSStation::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutType ( _bstr_t pVal ) {
    HRESULT _hr = put_Type(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int IEICDSStation::GetPortNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_PortNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSStation::PutPortNumber ( int pVal ) {
    HRESULT _hr = put_PortNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int IEICDSStation::GetBoardNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_BoardNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSStation::PutBoardNumber ( int pVal ) {
    HRESULT _hr = put_BoardNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSStation::GetChannel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Channel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutChannel ( _bstr_t pVal ) {
    HRESULT _hr = put_Channel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSStation::GetDriver ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Driver(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutDriver ( _bstr_t pVal ) {
    HRESULT _hr = put_Driver(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICDSStation::GetActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSStation::PutActive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Active(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICDSStation::GetRingAlways ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RingAlways(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSStation::PutRingAlways ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RingAlways(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSStation::GetRemotePhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemotePhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutRemotePhone ( _bstr_t pVal ) {
    HRESULT _hr = put_RemotePhone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSStation::GetRemoteLineGroup ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteLineGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutRemoteLineGroup ( _bstr_t pVal ) {
    HRESULT _hr = put_RemoteLineGroup(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSStation::GetNode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Node(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutNode ( _bstr_t pVal ) {
    HRESULT _hr = put_Node(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int IEICDSStation::GetVoiceResource ( ) {
    int _result = 0;
    HRESULT _hr = get_VoiceResource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICDSStation::PutVoiceResource ( int pVal ) {
    HRESULT _hr = put_VoiceResource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSStation::GetADSI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ADSI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutADSI ( _bstr_t pVal ) {
    HRESULT _hr = put_ADSI(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSStation::GetFSKType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FSKType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutFSKType ( _bstr_t pVal ) {
    HRESULT _hr = put_FSKType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSStation::GetConnectionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutConnectionType ( _bstr_t pVal ) {
    HRESULT _hr = put_ConnectionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSStation::GetLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutLine ( _bstr_t pVal ) {
    HRESULT _hr = put_Line(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDSStation::GetIPAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IPAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDSStation::PutIPAddress ( _bstr_t pVal ) {
    HRESULT _hr = put_IPAddress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IEICNamesPtr IEICDSStation::GetAccess ( ) {
    struct IEICNames * _result = 0;
    HRESULT _hr = get_Access(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICNamesPtr(_result, false);
}

inline void IEICDSStation::PutAccess ( struct IEICNames * pVal ) {
    HRESULT _hr = put_Access(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEICGenericObject2 wrapper method implementations
//

inline int IEICGenericObject2::CreateNew ( _bstr_t p_QueueName, int p_QueueType, enum EICQueueObjectStates p_State, int p_Direction, int p_RemotePartyType, int p_LocalPartyType, _bstr_t p_RemoteName, _bstr_t p_RemoteId, _bstr_t p_LocalLocation ) {
    int _result = 0;
    HRESULT _hr = raw_CreateNew(p_QueueName, p_QueueType, p_State, p_Direction, p_RemotePartyType, p_LocalPartyType, p_RemoteName, p_RemoteId, p_LocalLocation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICUserStatus wrapper method implementations
//

inline _bstr_t IEICUserStatus::GetStatusMessage ( _bstr_t p_User ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusMessage(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICUserStatus::GetStatusKey ( _bstr_t p_User ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusKey(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE IEICUserStatus::GetUntilDateTime ( _bstr_t p_User ) {
    DATE _result = 0;
    HRESULT _hr = get_UntilDateTime(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICUserStatus::GetisDND ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isDND(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICUserStatus::GethasDate ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_hasDate(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICUserStatus::GethasTime ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_hasTime(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICUserStatus::GetIsLoggedIn ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoggedIn(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICUserStatus::GetisOnPhone ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isOnPhone(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICCampEvent wrapper method implementations
//

inline HRESULT IEICCampEvent::CampEvent ( _bstr_t p_UserId, long p_EventId ) {
    HRESULT _hr = raw_CampEvent(p_UserId, p_EventId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCampMonitor wrapper method implementations
//

inline HRESULT IEICCampMonitor::StartCamp ( _bstr_t p_UserId ) {
    HRESULT _hr = raw_StartCamp(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCampMonitor::EndCamp ( _bstr_t p_UserId ) {
    HRESULT _hr = raw_EndCamp(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCampMonitor::EndAllCamp ( ) {
    HRESULT _hr = raw_EndAllCamp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCampMonitor::SetMarshalledCallback ( struct IEICCampEvent * p_Handler ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCampMonitor::SetThreadCallback ( struct IEICCampEvent * p_Handler ) {
    HRESULT _hr = raw_SetThreadCallback(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueObject2WatcherAdapter wrapper method implementations
//

inline void IEICQueueObject2WatcherAdapter::PutStateChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_StateChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICQueueObject2WatcherAdapter::PutSubObjectChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_SubObjectChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICQueueObject2WatcherAdapter::PutObjectSpecificErrorFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectSpecificErrorFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICQueueObject2WatcherAdapter::PutObjectDestroyedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectDestroyedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IEICQueueObject2WatcherAdapter::GetStateChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StateChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICQueueObject2WatcherAdapter::GetSubObjectChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SubObjectChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICQueueObject2WatcherAdapter::GetObjectSpecificErrorFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectSpecificErrorFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICQueueObject2WatcherAdapter::GetObjectDestroyedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectDestroyedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICChatObject2WatcherAdapter wrapper method implementations
//

inline void IEICChatObject2WatcherAdapter::PutStateChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_StateChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICChatObject2WatcherAdapter::PutSubObjectChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_SubObjectChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICChatObject2WatcherAdapter::PutObjectSpecificErrorFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectSpecificErrorFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICChatObject2WatcherAdapter::PutObjectDestroyedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectDestroyedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICChatObject2WatcherAdapter::PutReceivedStringFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ReceivedStringFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICChatObject2WatcherAdapter::PutReceivedUrlFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ReceivedUrlFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICChatObject2WatcherAdapter::PutReceivedFileFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ReceivedFileFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IEICChatObject2WatcherAdapter::GetStateChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StateChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICChatObject2WatcherAdapter::GetSubObjectChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SubObjectChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICChatObject2WatcherAdapter::GetObjectSpecificErrorFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectSpecificErrorFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICChatObject2WatcherAdapter::GetObjectDestroyedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectDestroyedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICChatObject2WatcherAdapter::GetReceivedStringFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReceivedStringFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICChatObject2WatcherAdapter::GetReceivedUrlFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReceivedUrlFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICChatObject2WatcherAdapter::GetReceivedFileFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReceivedFileFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICCallObject2WatcherAdapter wrapper method implementations
//

inline void IEICCallObject2WatcherAdapter::PutStateChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_StateChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICCallObject2WatcherAdapter::PutSubObjectChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_SubObjectChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICCallObject2WatcherAdapter::PutObjectSpecificErrorFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectSpecificErrorFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICCallObject2WatcherAdapter::PutObjectDestroyedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_ObjectDestroyedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICCallObject2WatcherAdapter::PutStatusChangeFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = put_StatusChangeFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IEICCallObject2WatcherAdapter::GetStateChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StateChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICCallObject2WatcherAdapter::GetSubObjectChangedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SubObjectChangedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICCallObject2WatcherAdapter::GetObjectSpecificErrorFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectSpecificErrorFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICCallObject2WatcherAdapter::GetObjectDestroyedFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ObjectDestroyedFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICCallObject2WatcherAdapter::GetStatusChangeFunc ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StatusChangeFunc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IEICWorkgroup2 wrapper method implementations
//

inline HRESULT IEICWorkgroup2::SetMarshalledCallback ( IUnknown * p_Watcher, VARIANT_BOOL p_WatchIndividuals ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher, p_WatchIndividuals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICWorkgroup2::SetThreadCallback ( IUnknown * p_Watcher, VARIANT_BOOL p_WatchIndividuals ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher, p_WatchIndividuals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCallObject2 wrapper method implementations
//

inline HRESULT IEICCallObject2::PlayDigits ( _bstr_t p_StringOfDigits ) {
    HRESULT _hr = raw_PlayDigits(p_StringOfDigits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject2::ExtendedDial ( _bstr_t p_Number, short p_TimeoutSecs, VARIANT_BOOL p_CallAnalysis, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_ExtendedDial(p_Number, p_TimeoutSecs, p_CallAnalysis, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject2::Dial ( _bstr_t p_Number, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_Dial(p_Number, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject2::ExtendedDialForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_Number, short p_TimeoutSecs, VARIANT_BOOL p_CallAnalysis, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_ExtendedDialForUser(p_User, p_Station, p_Number, p_TimeoutSecs, p_CallAnalysis, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject2::DialForUser ( _bstr_t p_User, _bstr_t p_Station, _bstr_t p_Number, VARIANT_BOOL p_CallHandlerOnSuccess ) {
    HRESULT _hr = raw_DialForUser(p_User, p_Station, p_Number, p_CallHandlerOnSuccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallObject2::DialError ( long p_Error ) {
    HRESULT _hr = raw_DialError(p_Error);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICConferenceObject2 wrapper method implementations
//

inline HRESULT IEICConferenceObject2::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject2::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject2::SendTextMessage ( _bstr_t p_Msg ) {
    HRESULT _hr = raw_SendTextMessage(p_Msg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject2::SendTextMessageForUser ( _bstr_t p_UserId, _bstr_t p_Msg ) {
    HRESULT _hr = raw_SendTextMessageForUser(p_UserId, p_Msg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject2::GetCurrentText ( BSTR * p_Msgs ) {
    HRESULT _hr = raw_GetCurrentText(p_Msgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject2::Create ( struct IEICCallObject2 * p_Call ) {
    HRESULT _hr = raw_Create(p_Call);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICConferenceObject2::Add ( struct IEICCallObject2 * p_Call ) {
    HRESULT _hr = raw_Add(p_Call);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICEmailObject2 wrapper method implementations
//

inline _bstr_t IEICEmailObject2::GetFrom ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2::GetSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICEmailObject2::GetToList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ToList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICEmailObject2::GetCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICEmailObject2::GetBCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BCCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICEmailObject2::GetReplyList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReplyList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IEICEmailObject2::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2::GetTextBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2::GetImportance ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2::GetContentType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICEmailObject2::GetDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IEICEmailObject2::SaveAttachment ( _bstr_t attachmentFilePath, long Index ) {
    HRESULT _hr = raw_SaveAttachment(attachmentFilePath, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline int IEICEmailObject2::GetNumAttachments ( ) {
    int _result = 0;
    HRESULT _hr = get_NumAttachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEICEmailObject2::GetAttachmentName ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttachmentName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IEICEmailObject2Response wrapper method implementations
//

inline _bstr_t IEICEmailObject2Response::GetResponseFrom ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2Response::GetResponseSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseSenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICEmailObject2Response::GetResponseToList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseToList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICEmailObject2Response::GetResponseCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseCCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICEmailObject2Response::GetResponseBCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseBCCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICEmailObject2Response::GetResponseReplyList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseReplyList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IEICEmailObject2Response::GetResponseSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2Response::GetResponseTextBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseTextBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2Response::GetResponseImportance ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseImportance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2Response::GetResponseContentType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseContentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICEmailObject2Response::GetResponseDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IEICEmailObject2Response::GetResponseDirty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResponseDirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICEmailObject2Response::PutResponseFrom ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseFrom(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Response::PutResponseSenderName ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseSenderName(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Response::PutResponseToList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseToList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Response::PutResponseCCList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseCCList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Response::PutResponseBCCList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseBCCList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Response::PutResponseReplyList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseReplyList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Response::PutResponseSubject ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseSubject(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Response::PutResponseTextBody ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseTextBody(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Response::PutResponseImportance ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseImportance(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Response::PutResponseContentType ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseContentType(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Response::PutResponseDate ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseDate(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICEmailObject2Response::SaveResponse ( ) {
    HRESULT _hr = raw_SaveResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICEmailObject2Response::SendResponse ( ) {
    HRESULT _hr = raw_SendResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICEmailObject2Response::ClearResponse ( ) {
    HRESULT _hr = raw_ClearResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICEmailObject2Response::RemoveResponseAttachment ( long Index ) {
    HRESULT _hr = raw_RemoveResponseAttachment(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICEmailObject2Response::InsertResponseAttachment ( _bstr_t Name, _bstr_t Path, long Index ) {
    HRESULT _hr = raw_InsertResponseAttachment(Name, Path, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICEmailObject2Ex wrapper method implementations
//

inline _bstr_t IEICEmailObject2Ex::GetResponseFrom ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2Ex::GetResponseSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseSenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICEmailObject2Ex::GetResponseToList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseToList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICEmailObject2Ex::GetResponseCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseCCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICEmailObject2Ex::GetResponseBCCList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseBCCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICEmailObject2Ex::GetResponseReplyList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseReplyList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IEICEmailObject2Ex::GetResponseSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2Ex::GetResponseTextBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseTextBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2Ex::GetResponseImportance ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseImportance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICEmailObject2Ex::GetResponseContentType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseContentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICEmailObject2Ex::GetResponseDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IEICEmailObject2Ex::GetResponseDirty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResponseDirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICEmailObject2Ex::PutResponseFrom ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseFrom(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Ex::PutResponseSenderName ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseSenderName(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Ex::PutResponseToList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseToList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Ex::PutResponseCCList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseCCList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Ex::PutResponseBCCList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseBCCList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Ex::PutResponseReplyList ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseReplyList(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Ex::PutResponseSubject ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseSubject(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Ex::PutResponseTextBody ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseTextBody(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Ex::PutResponseImportance ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseImportance(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Ex::PutResponseContentType ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseContentType(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICEmailObject2Ex::PutResponseDate ( const _variant_t & Val ) {
    HRESULT _hr = put_ResponseDate(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IEICEmailObject2Ex::SaveResponse ( ) {
    HRESULT _hr = raw_SaveResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICEmailObject2Ex::SendResponse ( ) {
    HRESULT _hr = raw_SendResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICEmailObject2Ex::ClearResponse ( ) {
    HRESULT _hr = raw_ClearResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICEmailObject2Ex::RemoveResponseAttachment ( long Index ) {
    HRESULT _hr = raw_RemoveResponseAttachment(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICEmailObject2Ex::InsertResponseAttachment ( _bstr_t Name, _bstr_t Path, long Index ) {
    HRESULT _hr = raw_InsertResponseAttachment(Name, Path, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICQueueObjectWatcherAdapter wrapper method implementations
//

inline HRESULT IEICQueueObjectWatcherAdapter::StateChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = raw_StateChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObjectWatcherAdapter::ObjectSpecificChangeFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = raw_ObjectSpecificChangeFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObjectWatcherAdapter::ObjectDestroyedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = raw_ObjectDestroyedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObjectWatcherAdapter::ObjectSpecificErrorFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = raw_ObjectSpecificErrorFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueueObjectWatcherAdapter::SubObjectChangedFunc ( const _variant_t & p_Function ) {
    HRESULT _hr = raw_SubObjectChangedFunc(p_Function);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICCallAcoustics wrapper method implementations
//

inline HRESULT IEICCallAcoustics::PlayTone ( struct IEICCallObject2 * p_Call, short p_Frequency, short p_Amplitude, short p_Duration ) {
    HRESULT _hr = raw_PlayTone(p_Call, p_Frequency, p_Amplitude, p_Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallAcoustics::PlayWav ( struct IEICCallObject2 * p_Call, _bstr_t p_WavFile ) {
    HRESULT _hr = raw_PlayWav(p_Call, p_WavFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallAcoustics::PlayString ( struct IEICCallObject2 * p_Call, _bstr_t p_Text ) {
    HRESULT _hr = raw_PlayString(p_Call, p_Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallAcoustics::PlayDigits ( struct IEICCallObject2 * p_Call, _bstr_t p_Digits ) {
    HRESULT _hr = raw_PlayDigits(p_Call, p_Digits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallAcoustics::GetDigits ( struct IEICCallObject2 * p_Call, IUnknown * p_Callback ) {
    HRESULT _hr = raw_GetDigits(p_Call, p_Callback);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallAcoustics::GetTone ( struct IEICCallObject2 * p_Call, IUnknown * p_Callback ) {
    HRESULT _hr = raw_GetTone(p_Call, p_Callback);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICCallAcoustics::PlayDualTone ( struct IEICCallObject2 * p_Call, short p_Freq1, short p_Amp1, short p_Freq2, short p_Amp2, short p_Duration ) {
    HRESULT _hr = raw_PlayDualTone(p_Call, p_Freq1, p_Amp1, p_Freq2, p_Amp2, p_Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IIWebCallbackObject wrapper method implementations
//

inline _bstr_t IIWebCallbackObject::GetStartTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebCallbackObject::GetStopTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebCallbackObject::GetConnectTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebCallbackObject::GetPhoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IEICQueue2Ptr IIWebCallbackObject::GetQueue ( ) {
    struct IEICQueue2 * _result = 0;
    HRESULT _hr = get_Queue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueue2Ptr(_result, false);
}

inline _bstr_t IIWebCallbackObject::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IIWebInstantQuestion wrapper method implementations
//

inline _bstr_t IIWebInstantQuestion::GetStartTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebInstantQuestion::GetStopTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebInstantQuestion::GetConnectTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebInstantQuestion::GetUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IEICQueue2Ptr IIWebInstantQuestion::GetQueue ( ) {
    struct IEICQueue2 * _result = 0;
    HRESULT _hr = get_Queue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueue2Ptr(_result, false);
}

inline _bstr_t IIWebInstantQuestion::GetQuestion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Question(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IIWebInstantQuestion::Answer ( _bstr_t p_UserId, _bstr_t p_strMessage ) {
    HRESULT _hr = raw_Answer(p_UserId, p_strMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IIWebWebSession wrapper method implementations
//

inline _bstr_t IIWebWebSession::GetStartTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebWebSession::GetStopTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebWebSession::GetConnectTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebWebSession::GetGuid ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Guid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IEICQueue2Ptr IIWebWebSession::GetQueue ( ) {
    struct IEICQueue2 * _result = 0;
    HRESULT _hr = get_Queue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueue2Ptr(_result, false);
}

inline _variant_t IIWebWebSession::GetUrlHistory ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UrlHistory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IIWebWebSession::GetRegistrationInfo ( _bstr_t p_Tag ) {
    BSTR _result = 0;
    HRESULT _hr = get_RegistrationInfo(p_Tag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IIWebWebSession::SendPopupMessage ( _bstr_t p_UserId, _bstr_t p_strMessage ) {
    HRESULT _hr = raw_SendPopupMessage(p_UserId, p_strMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IIWebWebSession::SendURL ( _bstr_t p_UserId, _bstr_t p_strUrl ) {
    HRESULT _hr = raw_SendURL(p_UserId, p_strUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IIWebWebSession::RequestChat ( _bstr_t p_UserId ) {
    HRESULT _hr = raw_RequestChat(p_UserId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IIWebBrowserSync wrapper method implementations
//

inline _bstr_t IIWebBrowserSync::GetStartTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebBrowserSync::GetStopTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebBrowserSync::GetConnectTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IIWebBrowserSync::GetUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IIWebBrowserSync::SendURL ( _bstr_t p_UserId, _bstr_t p_URL ) {
    HRESULT _hr = raw_SendURL(p_UserId, p_URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IIWebBrowserSync2 wrapper method implementations
//

inline HRESULT IIWebBrowserSync2::LaunchCoBrowser ( _bstr_t p_User, _bstr_t p_Password ) {
    HRESULT _hr = raw_LaunchCoBrowser(p_User, p_Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICNotification wrapper method implementations
//

inline HRESULT IEICNotification::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotification::SendRequest ( struct IEICNotification * * p_RetVal, long p_TimeoutMilliseconds ) {
    HRESULT _hr = raw_SendRequest(p_RetVal, p_TimeoutMilliseconds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotification::SendResponse ( struct IEICNotification * p_NotificationData ) {
    HRESULT _hr = raw_SendResponse(p_NotificationData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotification::PopStringData ( BSTR * pVal ) {
    HRESULT _hr = raw_PopStringData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotification::PopLongData ( long * pVal ) {
    HRESULT _hr = raw_PopLongData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotification::PopShortData ( short * pVal ) {
    HRESULT _hr = raw_PopShortData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotification::PushStringData ( _bstr_t pVal ) {
    HRESULT _hr = raw_PushStringData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotification::PushLongData ( long pVal ) {
    HRESULT _hr = raw_PushLongData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotification::PushShortData ( short pVal ) {
    HRESULT _hr = raw_PushShortData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IEICNotification::GetObjectType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICNotification::PutObjectType ( _bstr_t pVal ) {
    HRESULT _hr = put_ObjectType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICNotification::GetObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICNotification::PutObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_ObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICNotification::GetEventName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EventName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICNotification::PutEventName ( _bstr_t pVal ) {
    HRESULT _hr = put_EventName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICNotification::GetIsResponse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICServerWatcher wrapper method implementations
//

inline HRESULT IEICServerWatcher::ReceivedNotification ( struct IEICNotification * p_Notification ) {
    HRESULT _hr = raw_ReceivedNotification(p_Notification);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICNotificationSink wrapper method implementations
//

inline HRESULT IEICNotificationSink::SetWatcher ( struct IEICServerWatcher * p_Watcher, VARIANT_BOOL p_InOwnThread ) {
    HRESULT _hr = raw_SetWatcher(p_Watcher, p_InOwnThread);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotificationSink::AddEventWatch ( _bstr_t p_Type, _bstr_t p_ObjectName, _bstr_t p_Event ) {
    HRESULT _hr = raw_AddEventWatch(p_Type, p_ObjectName, p_Event);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotificationSink::RemoveEventWatch ( _bstr_t p_Type, _bstr_t p_ObjectName, _bstr_t p_Event ) {
    HRESULT _hr = raw_RemoveEventWatch(p_Type, p_ObjectName, p_Event);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotificationSink::AddObjectWatch ( _bstr_t p_Type, _bstr_t p_ObjectName ) {
    HRESULT _hr = raw_AddObjectWatch(p_Type, p_ObjectName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotificationSink::RemoveObjectWatch ( _bstr_t p_Type, _bstr_t p_ObjectName ) {
    HRESULT _hr = raw_RemoveObjectWatch(p_Type, p_ObjectName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotificationSink::RemoveAllWatches ( ) {
    HRESULT _hr = raw_RemoveAllWatches();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotificationSink::SuspendAllWatches ( ) {
    HRESULT _hr = raw_SuspendAllWatches();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICNotificationSink::ResumeAllWatches ( ) {
    HRESULT _hr = raw_ResumeAllWatches();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISwitchover wrapper method implementations
//

inline _bstr_t ISwitchover::GetBackupName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BackupName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ISwitchover::GetBackupServer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BackupServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISwitchover::GetRunning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Running(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISwitchover::GetInstalled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Installed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISwitchover::GetSwitchoverInformation ( BSTR * pBackupMachine, VARIANT_BOOL * pIsBackup ) {
    HRESULT _hr = raw_GetSwitchoverInformation(pBackupMachine, pIsBackup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IACDHelpRequest wrapper method implementations
//

inline _bstr_t IACDHelpRequest::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IACDHelpRequest::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IEICQueueObject2Ptr IACDHelpRequest::GetInteraction ( ) {
    struct IEICQueueObject2 * _result = 0;
    HRESULT _hr = get_Interaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueueObject2Ptr(_result, false);
}

inline void IACDHelpRequest::PutInteraction ( struct IEICQueueObject2 * pVal ) {
    HRESULT _hr = put_Interaction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IACDHelpRequest::GetAgent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Agent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IACDHelpRequest::PutAgent ( _bstr_t pVal ) {
    HRESULT _hr = put_Agent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IACDHelpRequest::GetWorkgroup ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Workgroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IACDHelpRequest::PutWorkgroup ( _bstr_t pVal ) {
    HRESULT _hr = put_Workgroup(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IACDHelpRequest::GetStation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Station(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IACDHelpRequest::PutStation ( _bstr_t pVal ) {
    HRESULT _hr = put_Station(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IACDHelpRequest::GetExtension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IACDHelpRequest::PutExtension ( _bstr_t pVal ) {
    HRESULT _hr = put_Extension(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IACDHelpRequest::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IACDHelpMonitor wrapper method implementations
//

inline HRESULT IACDHelpMonitor::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IACDHelpMonitor::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IACDHelpMonitor::SendResponse ( struct IACDHelpRequest * p_Watcher ) {
    HRESULT _hr = raw_SendResponse(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IUserForwarding wrapper method implementations
//

inline _bstr_t IUserForwarding::GetForwardNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ForwardNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IUserForwarding::PutForwardNumber ( _bstr_t pVal ) {
    HRESULT _hr = put_ForwardNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IUserForwarding::GetForwardVoicemail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ForwardVoicemail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IUserForwarding::PutForwardVoicemail ( _bstr_t pVal ) {
    HRESULT _hr = put_ForwardVoicemail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum ForwardingOptions IUserForwarding::GetForward ( enum ForwardingCallResults result ) {
    enum ForwardingOptions _result;
    HRESULT _hr = get_Forward(result, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IUserForwarding::PutForward ( enum ForwardingCallResults result, enum ForwardingOptions pVal ) {
    HRESULT _hr = put_Forward(result, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEICQueue3 wrapper method implementations
//

inline HRESULT IEICQueue3::Activate ( enum EICQueueTypes Type, _bstr_t Name ) {
    HRESULT _hr = raw_Activate(Type, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueue3::Deactivate ( ) {
    HRESULT _hr = raw_Deactivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueue3::RequestAttributeUpdateCallback ( const _variant_t & p_attrs ) {
    HRESULT _hr = raw_RequestAttributeUpdateCallback(p_attrs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICQueue3::Contains ( const _variant_t & InteractionId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(InteractionId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICQueue3::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICQueue3::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IIWebCallbackObject2 wrapper method implementations
//

inline VARIANT_BOOL IIWebCallbackObject2::GetSuccessful ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Successful(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IIWebCallbackObject2::PutSuccessful ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Successful(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEICMarshaller wrapper method implementations
//

inline HRESULT IEICMarshaller::CallBack ( ) {
    HRESULT _hr = raw_CallBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICServer2Watcher wrapper method implementations
//

inline HRESULT IEICServer2Watcher::SwitchOver ( ) {
    HRESULT _hr = raw_SwitchOver();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICServer2Watcher::ConnectionLost ( ) {
    HRESULT _hr = raw_ConnectionLost();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICServer2Watcher::CSRequestedShutDown ( ) {
    HRESULT _hr = raw_CSRequestedShutDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICServer2Watcher::CSShutDown ( ) {
    HRESULT _hr = raw_CSShutDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICServer2 wrapper method implementations
//

inline long IEICServer2::FullConnect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_AutoDisconnect, long p_MediaTypes ) {
    long _result = 0;
    HRESULT _hr = raw_FullConnect(p_App, p_Server, p_User, p_Password, p_Station, p_AutoDisconnect, p_MediaTypes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICServer2::RemoteConnect ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, VARIANT_BOOL p_PersistentConnection, VARIANT_BOOL p_AutoDisconnect, long p_MediaTypes ) {
    long _result = 0;
    HRESULT _hr = raw_RemoteConnect(p_App, p_Server, p_User, p_Password, p_Station, p_PersistentConnection, p_AutoDisconnect, p_MediaTypes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICServer2::NotifierLogin ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Password, VARIANT_BOOL p_AutoDisconnect ) {
    long _result = 0;
    HRESULT _hr = raw_NotifierLogin(p_App, p_Server, p_User, p_Password, p_AutoDisconnect, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICServer2::NotifierLoginCheck ( _bstr_t p_User, _bstr_t p_Password ) {
    long _result = 0;
    HRESULT _hr = raw_NotifierLoginCheck(p_User, p_Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICServer2::CSLogin ( _bstr_t p_User, _bstr_t p_Password, _bstr_t p_Station, _bstr_t p_InitialStatus, VARIANT_BOOL p_Remote, VARIANT_BOOL p_Persistent, long p_MediaTypes ) {
    long _result = 0;
    HRESULT _hr = raw_CSLogin(p_User, p_Password, p_Station, p_InitialStatus, p_Remote, p_Persistent, p_MediaTypes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICServer2::CSLogout ( _bstr_t p_User, _bstr_t p_Station ) {
    HRESULT _hr = raw_CSLogout(p_User, p_Station);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICServer2::GetRemote ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Remote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICServer2::GetPersistentRemoteConnection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersistentRemoteConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICServer2::SetMarshalledCallback ( struct IEICServer2Watcher * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICServer2::SetThreadCallback ( struct IEICServer2Watcher * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IEICServer2::ServerParameter ( _bstr_t p_Param ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ServerParameter(p_Param, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IEICServer2::ServerParameterList ( const _variant_t & p_Params ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ServerParameterList(p_Params, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IEICServer2::GetTimeStamp ( short * p_Day, short * p_Month, short * p_Year, short * p_Hour, short * p_Minute, short * p_Second ) {
    HRESULT _hr = raw_GetTimeStamp(p_Day, p_Month, p_Year, p_Hour, p_Minute, p_Second);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICServer2::ForceLoginOnError ( ) {
    HRESULT _hr = raw_ForceLoginOnError();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IClientServicesWatcher wrapper method implementations
//

inline HRESULT IClientServicesWatcher::LicenseRevoked ( _bstr_t p_StatName, _bstr_t p_License ) {
    HRESULT _hr = raw_LicenseRevoked(p_StatName, p_License);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICServer3 wrapper method implementations
//

inline long IEICServer3::DoesStationHaveRightsToRun ( _bstr_t p_Station, _bstr_t p_License, VARIANT_BOOL p_BootOffOtherInstanceIfInUse ) {
    long _result = 0;
    HRESULT _hr = raw_DoesStationHaveRightsToRun(p_Station, p_License, p_BootOffOtherInstanceIfInUse, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEICServer3::GetLoginCookie ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLoginCookie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IEICServer3::NotifierLoginWithCookie ( _bstr_t p_App, _bstr_t p_Server, _bstr_t p_User, _bstr_t p_Cookie ) {
    long _result = 0;
    HRESULT _hr = raw_NotifierLoginWithCookie(p_App, p_Server, p_User, p_Cookie, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICServer3::SetClientServicesCallback ( struct IClientServicesWatcher * p_Watcher, VARIANT_BOOL p_Marshalled ) {
    HRESULT _hr = raw_SetClientServicesCallback(p_Watcher, p_Marshalled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICServer3::SetPassword ( _bstr_t p_Password ) {
    HRESULT _hr = raw_SetPassword(p_Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISIPPhone wrapper method implementations
//

inline HRESULT ISIPPhone::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISIPPhone::Deactivate ( ) {
    HRESULT _hr = raw_Deactivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDSAction wrapper method implementations
//

inline _bstr_t IEICDSAction::GetApplication ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IEICUserEx2Watcher wrapper method implementations
//

inline HRESULT IEICUserEx2Watcher::StatusChanged ( struct IEICUserEx2 * p_User, _bstr_t p_StatusKey, VARIANT_BOOL p_IsDND, DATE p_UntilDateTime, VARIANT_BOOL p_HasDate, VARIANT_BOOL p_HasTime ) {
    HRESULT _hr = raw_StatusChanged(p_User, p_StatusKey, p_IsDND, p_UntilDateTime, p_HasDate, p_HasTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUserEx2Watcher::UserChanged ( struct IEICUserEx2 * p_User ) {
    HRESULT _hr = raw_UserChanged(p_User);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUserEx2Watcher::UserLoginChanged ( struct IEICUserEx2 * p_User, _bstr_t p_Station, VARIANT_BOOL p_Login ) {
    HRESULT _hr = raw_UserLoginChanged(p_User, p_Station, p_Login);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUserEx2Watcher::UserOnPhoneChanged ( struct IEICUserEx2 * p_User, VARIANT_BOOL p_OnPhone ) {
    HRESULT _hr = raw_UserOnPhoneChanged(p_User, p_OnPhone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICUserEx2 wrapper method implementations
//

inline HRESULT IEICUserEx2::SetMarshalledCallback ( IUnknown * p_Handler ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICUserEx2::SetThreadCallback ( IUnknown * p_Handler ) {
    HRESULT _hr = raw_SetThreadCallback(p_Handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICUserEx2::GetStatusHasDate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StatusHasDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICUserEx2::GetStatusHasTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StatusHasTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICUserEx2::SetUntilDateTimeEx ( const _variant_t & dateTime, VARIANT_BOOL hasDate, VARIANT_BOOL hasTime ) {
    HRESULT _hr = raw_SetUntilDateTimeEx(dateTime, hasDate, hasTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IEICUserEx2::GetNextStatusMessageV ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetNextStatusMessageV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IEICUserEx2::GetDirectoryList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DirectoryList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IEICDirectoryPtr IEICUserEx2::GetDirectory ( _bstr_t p_SourceName, long p_Type ) {
    struct IEICDirectory * _result = 0;
    HRESULT _hr = raw_GetDirectory(p_SourceName, p_Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICDirectoryPtr(_result, false);
}

inline IEICWorkgroupPtr IEICUserEx2::GetWorkgroup ( _bstr_t p_Name ) {
    struct IEICWorkgroup * _result = 0;
    HRESULT _hr = raw_GetWorkgroup(p_Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICWorkgroupPtr(_result, false);
}

inline IEICQueuePtr IEICUserEx2::GetQueue ( _bstr_t p_Name, long p_Type ) {
    struct IEICQueue * _result = 0;
    HRESULT _hr = raw_GetQueue(p_Name, p_Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEICQueuePtr(_result, false);
}

inline long IEICUserEx2::GetAvailableActions ( ) {
    long _result = 0;
    HRESULT _hr = get_AvailableActions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEICUserEx2::GetStationVolume ( ) {
    long _result = 0;
    HRESULT _hr = get_StationVolume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IEICUserEx2::PutStationVolume ( long p_Volume ) {
    HRESULT _hr = put_StationVolume(p_Volume);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUserEx2::isOnPhoneForUser ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isOnPhoneForUser(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEICUserEx2::isLoggedInForUser ( _bstr_t p_User ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_isLoggedInForUser(p_User, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICUser3 wrapper method implementations
//

inline _bstr_t IEICUser3::GetFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICUser3::GetLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IEICUser3::GetisACD ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isACD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUserForwardingPtr IEICUser3::GetForwarding ( ) {
    struct IUserForwarding * _result = 0;
    HRESULT _hr = get_Forwarding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserForwardingPtr(_result, false);
}

inline void IEICUser3::PutForwarding ( struct IUserForwarding * pVal ) {
    HRESULT _hr = put_Forwarding(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IEICUser3::GetExcludeFromDirectory ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExcludeFromDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEICUser3::GetDepartmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DepartmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline unsigned long IEICUser3::GetMediaSupportFlags ( ) {
    unsigned long _result = 0;
    HRESULT _hr = get_MediaSupportFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IEICUser3::GetPeerServerNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PeerServerNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline DATE IEICUser3::GetStatusChangeTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StatusChangeTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICDirectory wrapper method implementations
//

inline HRESULT IEICDirectory::StartMemberList ( ) {
    HRESULT _hr = raw_StartMemberList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectory::GetNextMember ( long * p_Id ) {
    HRESULT _hr = raw_GetNextMember(p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectory::Connect ( _bstr_t p_SourceName, long p_Type ) {
    HRESULT _hr = raw_Connect(p_SourceName, p_Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEICDirectory::GetIsPublic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPublic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEICDirectory::SetChangeHandler ( struct IEICDirectoryWatcher * p_Watcher ) {
    HRESULT _hr = raw_SetChangeHandler(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectory::SetUser ( _bstr_t p_User, _bstr_t p_Password ) {
    HRESULT _hr = raw_SetUser(p_User, p_Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDirectoryWatcher wrapper method implementations
//

inline HRESULT IEICDirectoryWatcher::MemberChanged ( struct IEICDirectory * p_Directory, long p_Id ) {
    HRESULT _hr = raw_MemberChanged(p_Directory, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectoryWatcher::MemberRemoved ( struct IEICDirectory * p_Directory, long p_Id ) {
    HRESULT _hr = raw_MemberRemoved(p_Directory, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectoryWatcher::MemberAdded ( struct IEICDirectory * p_Directory, long p_Id ) {
    HRESULT _hr = raw_MemberAdded(p_Directory, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDirectory2 wrapper method implementations
//

inline HRESULT IEICDirectory2::SetMarshalledCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetMarshalledCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectory2::SetThreadCallback ( IUnknown * p_Watcher ) {
    HRESULT _hr = raw_SetThreadCallback(p_Watcher);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IEICDirectory2::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IEICDirectory2::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEICDirectoryEntry wrapper method implementations
//

inline HRESULT IEICDirectoryEntry::Load ( struct IEICDirectory * p_Directory, long p_Id ) {
    HRESULT _hr = raw_Load(p_Directory, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectoryEntry::Create ( struct IEICDirectory * p_Directory ) {
    HRESULT _hr = raw_Create(p_Directory);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectoryEntry::Commit ( ) {
    HRESULT _hr = raw_Commit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectoryEntry::Rollback ( ) {
    HRESULT _hr = raw_Rollback();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IEICDirectoryEntry::GetUserId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICDirectoryEntry::GetStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IEICDirectoryEntry::GetLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutLastName ( _bstr_t pVal ) {
    HRESULT _hr = put_LastName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutFirstName ( _bstr_t pVal ) {
    HRESULT _hr = put_FirstName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IEICDirectoryEntry::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutAddress ( _bstr_t pVal ) {
    HRESULT _hr = put_Address(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutCity ( _bstr_t pVal ) {
    HRESULT _hr = put_City(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_City(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutState ( _bstr_t pVal ) {
    HRESULT _hr = put_State(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutZip ( _bstr_t pVal ) {
    HRESULT _hr = put_Zip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Zip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutPhone ( _bstr_t pVal ) {
    HRESULT _hr = put_Phone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Phone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutCompany ( _bstr_t pVal ) {
    HRESULT _hr = put_Company(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Company(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutDepartment ( _bstr_t pVal ) {
    HRESULT _hr = put_Department(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetDepartment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Department(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutBusinessAddress ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessAddress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetBusinessAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutBusinessCity ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessCity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetBusinessCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutBusinessState ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessState(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetBusinessState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutBusinessZip ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessZip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetBusinessZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessZip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutBusinessCountry ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessCountry(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetBusinessCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutBusinessEMail ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessEMail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetBusinessEMail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessEMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutAssistant ( _bstr_t pVal ) {
    HRESULT _hr = put_Assistant(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetAssistant ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutHomeCountry ( _bstr_t pVal ) {
    HRESULT _hr = put_HomeCountry(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetHomeCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutHomeEMail ( _bstr_t pVal ) {
    HRESULT _hr = put_HomeEMail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetHomeEMail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeEMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutBusinessPhone ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessPhone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetBusinessPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutBusinessPhone2 ( _bstr_t pVal ) {
    HRESULT _hr = put_BusinessPhone2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetBusinessPhone2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessPhone2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutHomePhone2 ( _bstr_t pVal ) {
    HRESULT _hr = put_HomePhone2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetHomePhone2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomePhone2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutMobile ( _bstr_t pVal ) {
    HRESULT _hr = put_Mobile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetMobile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mobile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutFax ( _bstr_t pVal ) {
    HRESULT _hr = put_Fax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetFax ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Fax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutPager ( _bstr_t pVal ) {
    HRESULT _hr = put_Pager(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetPager ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Pager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutAssistantPhone ( _bstr_t pVal ) {
    HRESULT _hr = put_AssistantPhone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetAssistantPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssistantPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutUrl ( _bstr_t pVal ) {
    HRESULT _hr = put_Url(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutPrimaryNumber ( _bstr_t pVal ) {
    HRESULT _hr = put_PrimaryNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetPrimaryNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrimaryNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IEICDirectoryEntry::PutNotes ( _bstr_t pVal ) {
    HRESULT _hr = put_Notes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IEICDirectoryEntry::GetNotes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Notes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IEICDirectory2Watcher wrapper method implementations
//

inline HRESULT IEICDirectory2Watcher::MemberChanged ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id ) {
    HRESULT _hr = raw_MemberChanged(p_Directory, p_Entry, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectory2Watcher::MemberRemoved ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id ) {
    HRESULT _hr = raw_MemberRemoved(p_Directory, p_Entry, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectory2Watcher::MemberAdded ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id ) {
    HRESULT _hr = raw_MemberAdded(p_Directory, p_Entry, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEICDirectory2Watcher::MemberDisplayChanged ( struct IEICDirectory2 * p_Directory, struct IEICDirectoryEntry * p_Entry, long p_Id ) {
    HRESULT _hr = raw_MemberDisplayChanged(p_Directory, p_Entry, p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEICDirectory2Ex wrapper method implementations
//

inline HRESULT IEICDirectory2Ex::DeleteEntry ( long p_Id ) {
    HRESULT _hr = raw_DeleteEntry(p_Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEIC_UMFMessageWatcher wrapper method implementations
//

inline HRESULT IEIC_UMFMessageWatcher::ResponseReceived ( struct IEIC_UMFMessage * pResponse ) {
    HRESULT _hr = raw_ResponseReceived(pResponse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIC_UMFMessageWatcher::Error ( struct IErrorInfo * p_Info ) {
    HRESULT _hr = raw_Error(p_Info);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEIC_UMFMessage wrapper method implementations
//

inline HRESULT IEIC_UMFMessage::Initialize ( long p_dwServerTimeoutMsec ) {
    HRESULT _hr = raw_Initialize(p_dwServerTimeoutMsec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIC_UMFMessage::Send ( _bstr_t p_ObjectId, _bstr_t p_EventId, long p_TimeoutSec, struct IEIC_UMFMessageWatcher * p_Responder ) {
    HRESULT _hr = raw_Send(p_ObjectId, p_EventId, p_TimeoutSec, p_Responder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIC_UMFMessage::CancelResponseWait ( ) {
    HRESULT _hr = raw_CancelResponseWait();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIC_UMFMessage::AddInteger ( long p_Int ) {
    HRESULT _hr = raw_AddInteger(p_Int);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIC_UMFMessage::AddString ( _bstr_t p_String ) {
    HRESULT _hr = raw_AddString(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIC_UMFMessage::GetInteger ( long * p_Int ) {
    HRESULT _hr = raw_GetInteger(p_Int);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIC_UMFMessage::GetString ( BSTR * p_String ) {
    HRESULT _hr = raw_GetString(p_String);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEIC_UMFMessage::Connect ( _bstr_t p_Notifier, _bstr_t p_User, _bstr_t p_Password, _bstr_t p_App ) {
    HRESULT _hr = raw_Connect(p_Notifier, p_User, p_Password, p_App);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void IEIC_UMFMessage::PutId ( long _arg1 ) {
    HRESULT _hr = put_Id(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEIC_UMFMessage2 wrapper method implementations
//

inline HRESULT IEIC_UMFMessage2::SendMarshalled ( _bstr_t p_ObjectId, _bstr_t p_EventId, long p_TimeoutSec, struct IEIC_UMFMessageWatcher * p_Responder ) {
    HRESULT _hr = raw_SendMarshalled(p_ObjectId, p_EventId, p_TimeoutSec, p_Responder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
